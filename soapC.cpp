/* soapC.cpp
   Generated by gSOAP 2.7.11 from temp.h
   Copyright(C) 2000-2008, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapC.cpp ver 2.7.11 2008-08-31 14:10:32 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->header)
	{	soap->part = SOAP_IN_HEADER;
		if (soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, NULL))
			return soap->error;
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", NULL, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_header(struct soap *soap)
{
	if (!soap->header)
	{	soap->header = soap_new_SOAP_ENV__Header(soap, -1);
		soap_default_SOAP_ENV__Header(soap, soap->header);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (!soap->fault)
	{	soap->fault = soap_new_SOAP_ENV__Fault(soap, -1);
		if (!soap->fault)
			return;
		soap_default_SOAP_ENV__Fault(soap, soap->fault);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Code)
	{	soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap, -1);
		soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Reason)
	{	soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap, -1);
		soap_default_SOAP_ENV__Reason(soap, soap->fault->SOAP_ENV__Reason);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", NULL);
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (!soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap, -1);
			soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode);
		}
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)&soap->fault->faultstring;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 1)
	{	if (!soap->fault->detail)
		{	soap->fault->detail = (struct SOAP_ENV__Detail*)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail));
			soap_default_SOAP_ENV__Detail(soap, soap->fault->detail);
		}
		return (const char**)&soap->fault->detail->__any;
	}
	if (!soap->fault->SOAP_ENV__Detail)
	{	soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap, -1);
		soap_default_SOAP_ENV__Detail(soap, soap->fault->SOAP_ENV__Detail);
	}
	return (const char**)&soap->fault->SOAP_ENV__Detail->__any;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	for (;;)
		if (!soap_getelement(soap, &t))
			if (soap->error || soap_ignore_element(soap))
				break;
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, int *type)
{
	if (soap_peek_element(soap))
		return NULL;
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_byte:
		return soap_in_byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_in_int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_unsignedByte:
		return soap_in_unsignedByte(soap, NULL, NULL, "xsd:unsignedByte");
	case SOAP_TYPE_unsignedInt:
		return soap_in_unsignedInt(soap, NULL, NULL, "xsd:unsignedInt");
	case SOAP_TYPE_unsignedLONG64:
		return soap_in_unsignedLONG64(soap, NULL, NULL, "xsd:unsignedLong");
	case SOAP_TYPE_std__string:
		return soap_in_std__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_ns1__ArrayOfRainbowTableStatus:
		return soap_in_ns1__ArrayOfRainbowTableStatus(soap, NULL, NULL, "ns1:ArrayOfRainbowTableStatus");
	case SOAP_TYPE_ns1__RainbowTableStatus:
		return soap_in_ns1__RainbowTableStatus(soap, NULL, NULL, "ns1:RainbowTableStatus");
	case SOAP_TYPE_ns1__ArrayOfChainCheckHash:
		return soap_in_ns1__ArrayOfChainCheckHash(soap, NULL, NULL, "ns1:ArrayOfChainCheckHash");
	case SOAP_TYPE_ns1__ChainCheckHash:
		return soap_in_ns1__ChainCheckHash(soap, NULL, NULL, "ns1:ChainCheckHash");
	case SOAP_TYPE_ns1__ArrayOfIndexHash:
		return soap_in_ns1__ArrayOfIndexHash(soap, NULL, NULL, "ns1:ArrayOfIndexHash");
	case SOAP_TYPE_ns1__IndexHash:
		return soap_in_ns1__IndexHash(soap, NULL, NULL, "ns1:IndexHash");
	case SOAP_TYPE_ns1__ArrayOfWorkUnit:
		return soap_in_ns1__ArrayOfWorkUnit(soap, NULL, NULL, "ns1:ArrayOfWorkUnit");
	case SOAP_TYPE_ns1__WorkUnit:
		return soap_in_ns1__WorkUnit(soap, NULL, NULL, "ns1:WorkUnit");
	case SOAP_TYPE_ns1__MachineInfo:
		return soap_in_ns1__MachineInfo(soap, NULL, NULL, "ns1:MachineInfo");
	case SOAP_TYPE_ns1__rtgenDetails:
		return soap_in_ns1__rtgenDetails(soap, NULL, NULL, "ns1:rtgenDetails");
	case SOAP_TYPE_ns1__ArrayOfCPU:
		return soap_in_ns1__ArrayOfCPU(soap, NULL, NULL, "ns1:ArrayOfCPU");
	case SOAP_TYPE_ns1__CPU:
		return soap_in_ns1__CPU(soap, NULL, NULL, "ns1:CPU");
	case SOAP_TYPE_ns1__Credentials:
		return soap_in_ns1__Credentials(soap, NULL, NULL, "ns1:Credentials");
	case SOAP_TYPE_xsd__base64Binary:
		return soap_in_xsd__base64Binary(soap, NULL, NULL, "xsd:base64Binary");
	case SOAP_TYPE_ns1__RequestDetailedCrackingInfo:
		return soap_in_ns1__RequestDetailedCrackingInfo(soap, NULL, NULL, "ns1:RequestDetailedCrackingInfo");
	case SOAP_TYPE_ns1__RequestDetailedCrackingInfoResponse:
		return soap_in_ns1__RequestDetailedCrackingInfoResponse(soap, NULL, NULL, "ns1:RequestDetailedCrackingInfoResponse");
	case SOAP_TYPE_ns1__ReportError:
		return soap_in_ns1__ReportError(soap, NULL, NULL, "ns1:ReportError");
	case SOAP_TYPE_ns1__ReportErrorResponse:
		return soap_in_ns1__ReportErrorResponse(soap, NULL, NULL, "ns1:ReportErrorResponse");
	case SOAP_TYPE_ns1__SendChainCheckResult:
		return soap_in_ns1__SendChainCheckResult(soap, NULL, NULL, "ns1:SendChainCheckResult");
	case SOAP_TYPE_ns1__SendChainCheckResultResponse:
		return soap_in_ns1__SendChainCheckResultResponse(soap, NULL, NULL, "ns1:SendChainCheckResultResponse");
	case SOAP_TYPE_ns1__RequestChainCheck:
		return soap_in_ns1__RequestChainCheck(soap, NULL, NULL, "ns1:RequestChainCheck");
	case SOAP_TYPE_ns1__RequestChainCheckResponse:
		return soap_in_ns1__RequestChainCheckResponse(soap, NULL, NULL, "ns1:RequestChainCheckResponse");
	case SOAP_TYPE_ns1__UploadHashIndexList:
		return soap_in_ns1__UploadHashIndexList(soap, NULL, NULL, "ns1:UploadHashIndexList");
	case SOAP_TYPE_ns1__UploadHashIndexListResponse:
		return soap_in_ns1__UploadHashIndexListResponse(soap, NULL, NULL, "ns1:UploadHashIndexListResponse");
	case SOAP_TYPE_ns1__RequestHashToIndex:
		return soap_in_ns1__RequestHashToIndex(soap, NULL, NULL, "ns1:RequestHashToIndex");
	case SOAP_TYPE_ns1__RequestHashToIndexResponse:
		return soap_in_ns1__RequestHashToIndexResponse(soap, NULL, NULL, "ns1:RequestHashToIndexResponse");
	case SOAP_TYPE_ns1__UploadCompletedWork:
		return soap_in_ns1__UploadCompletedWork(soap, NULL, NULL, "ns1:UploadCompletedWork");
	case SOAP_TYPE_ns1__UploadCompletedWorkResponse:
		return soap_in_ns1__UploadCompletedWorkResponse(soap, NULL, NULL, "ns1:UploadCompletedWorkResponse");
	case SOAP_TYPE_ns1__RequestWork:
		return soap_in_ns1__RequestWork(soap, NULL, NULL, "ns1:RequestWork");
	case SOAP_TYPE_ns1__RequestWorkResponse:
		return soap_in_ns1__RequestWorkResponse(soap, NULL, NULL, "ns1:RequestWorkResponse");
	case SOAP_TYPE_ns1__RegisterNewClient:
		return soap_in_ns1__RegisterNewClient(soap, NULL, NULL, "ns1:RegisterNewClient");
	case SOAP_TYPE_ns1__RegisterNewClientResponse:
		return soap_in_ns1__RegisterNewClientResponse(soap, NULL, NULL, "ns1:RegisterNewClientResponse");
	case SOAP_TYPE_PointerTons1__ArrayOfRainbowTableStatus:
		return soap_in_PointerTons1__ArrayOfRainbowTableStatus(soap, NULL, NULL, "ns1:ArrayOfRainbowTableStatus");
	case SOAP_TYPE_PointerTons1__ArrayOfChainCheckHash:
		return soap_in_PointerTons1__ArrayOfChainCheckHash(soap, NULL, NULL, "ns1:ArrayOfChainCheckHash");
	case SOAP_TYPE_PointerTons1__ArrayOfIndexHash:
		return soap_in_PointerTons1__ArrayOfIndexHash(soap, NULL, NULL, "ns1:ArrayOfIndexHash");
	case SOAP_TYPE_PointerTons1__rtgenDetails:
		return soap_in_PointerTons1__rtgenDetails(soap, NULL, NULL, "ns1:rtgenDetails");
	case SOAP_TYPE_PointerTons1__ArrayOfWorkUnit:
		return soap_in_PointerTons1__ArrayOfWorkUnit(soap, NULL, NULL, "ns1:ArrayOfWorkUnit");
	case SOAP_TYPE_PointerTons1__MachineInfo:
		return soap_in_PointerTons1__MachineInfo(soap, NULL, NULL, "ns1:MachineInfo");
	case SOAP_TYPE_PointerTons1__RainbowTableStatus:
		return soap_in_PointerTons1__RainbowTableStatus(soap, NULL, NULL, "ns1:RainbowTableStatus");
	case SOAP_TYPE_PointerTons1__ChainCheckHash:
		return soap_in_PointerTons1__ChainCheckHash(soap, NULL, NULL, "ns1:ChainCheckHash");
	case SOAP_TYPE_PointerTons1__IndexHash:
		return soap_in_PointerTons1__IndexHash(soap, NULL, NULL, "ns1:IndexHash");
	case SOAP_TYPE_PointerTons1__WorkUnit:
		return soap_in_PointerTons1__WorkUnit(soap, NULL, NULL, "ns1:WorkUnit");
	case SOAP_TYPE_PointerTons1__ArrayOfCPU:
		return soap_in_PointerTons1__ArrayOfCPU(soap, NULL, NULL, "ns1:ArrayOfCPU");
	case SOAP_TYPE_PointerTons1__Credentials:
		return soap_in_PointerTons1__Credentials(soap, NULL, NULL, "ns1:Credentials");
	case SOAP_TYPE_PointerTons1__CPU:
		return soap_in_PointerTons1__CPU(soap, NULL, NULL, "ns1:CPU");
	case SOAP_TYPE_PointerTounsignedByte:
		return soap_in_PointerTounsignedByte(soap, NULL, NULL, "xsd:unsignedByte");
	case SOAP_TYPE_string:
	{	char **s;
		s = soap_in_string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	*type = SOAP_TYPE_std__string;
			return soap_in_std__string(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ArrayOfRainbowTableStatus"))
		{	*type = SOAP_TYPE_ns1__ArrayOfRainbowTableStatus;
			return soap_in_ns1__ArrayOfRainbowTableStatus(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:RainbowTableStatus"))
		{	*type = SOAP_TYPE_ns1__RainbowTableStatus;
			return soap_in_ns1__RainbowTableStatus(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ArrayOfChainCheckHash"))
		{	*type = SOAP_TYPE_ns1__ArrayOfChainCheckHash;
			return soap_in_ns1__ArrayOfChainCheckHash(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ChainCheckHash"))
		{	*type = SOAP_TYPE_ns1__ChainCheckHash;
			return soap_in_ns1__ChainCheckHash(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ArrayOfIndexHash"))
		{	*type = SOAP_TYPE_ns1__ArrayOfIndexHash;
			return soap_in_ns1__ArrayOfIndexHash(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:IndexHash"))
		{	*type = SOAP_TYPE_ns1__IndexHash;
			return soap_in_ns1__IndexHash(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ArrayOfWorkUnit"))
		{	*type = SOAP_TYPE_ns1__ArrayOfWorkUnit;
			return soap_in_ns1__ArrayOfWorkUnit(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:WorkUnit"))
		{	*type = SOAP_TYPE_ns1__WorkUnit;
			return soap_in_ns1__WorkUnit(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:MachineInfo"))
		{	*type = SOAP_TYPE_ns1__MachineInfo;
			return soap_in_ns1__MachineInfo(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:rtgenDetails"))
		{	*type = SOAP_TYPE_ns1__rtgenDetails;
			return soap_in_ns1__rtgenDetails(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ArrayOfCPU"))
		{	*type = SOAP_TYPE_ns1__ArrayOfCPU;
			return soap_in_ns1__ArrayOfCPU(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:CPU"))
		{	*type = SOAP_TYPE_ns1__CPU;
			return soap_in_ns1__CPU(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:Credentials"))
		{	*type = SOAP_TYPE_ns1__Credentials;
			return soap_in_ns1__Credentials(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:base64Binary"))
		{	*type = SOAP_TYPE_xsd__base64Binary;
			return soap_in_xsd__base64Binary(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_byte;
			return soap_in_byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_int;
			return soap_in_int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedByte"))
		{	*type = SOAP_TYPE_unsignedByte;
			return soap_in_unsignedByte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedInt"))
		{	*type = SOAP_TYPE_unsignedInt;
			return soap_in_unsignedInt(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedLong"))
		{	*type = SOAP_TYPE_unsignedLONG64;
			return soap_in_unsignedLONG64(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:RequestDetailedCrackingInfo"))
		{	*type = SOAP_TYPE_ns1__RequestDetailedCrackingInfo;
			return soap_in_ns1__RequestDetailedCrackingInfo(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:RequestDetailedCrackingInfoResponse"))
		{	*type = SOAP_TYPE_ns1__RequestDetailedCrackingInfoResponse;
			return soap_in_ns1__RequestDetailedCrackingInfoResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ReportError"))
		{	*type = SOAP_TYPE_ns1__ReportError;
			return soap_in_ns1__ReportError(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ReportErrorResponse"))
		{	*type = SOAP_TYPE_ns1__ReportErrorResponse;
			return soap_in_ns1__ReportErrorResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:SendChainCheckResult"))
		{	*type = SOAP_TYPE_ns1__SendChainCheckResult;
			return soap_in_ns1__SendChainCheckResult(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:SendChainCheckResultResponse"))
		{	*type = SOAP_TYPE_ns1__SendChainCheckResultResponse;
			return soap_in_ns1__SendChainCheckResultResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:RequestChainCheck"))
		{	*type = SOAP_TYPE_ns1__RequestChainCheck;
			return soap_in_ns1__RequestChainCheck(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:RequestChainCheckResponse"))
		{	*type = SOAP_TYPE_ns1__RequestChainCheckResponse;
			return soap_in_ns1__RequestChainCheckResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:UploadHashIndexList"))
		{	*type = SOAP_TYPE_ns1__UploadHashIndexList;
			return soap_in_ns1__UploadHashIndexList(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:UploadHashIndexListResponse"))
		{	*type = SOAP_TYPE_ns1__UploadHashIndexListResponse;
			return soap_in_ns1__UploadHashIndexListResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:RequestHashToIndex"))
		{	*type = SOAP_TYPE_ns1__RequestHashToIndex;
			return soap_in_ns1__RequestHashToIndex(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:RequestHashToIndexResponse"))
		{	*type = SOAP_TYPE_ns1__RequestHashToIndexResponse;
			return soap_in_ns1__RequestHashToIndexResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:UploadCompletedWork"))
		{	*type = SOAP_TYPE_ns1__UploadCompletedWork;
			return soap_in_ns1__UploadCompletedWork(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:UploadCompletedWorkResponse"))
		{	*type = SOAP_TYPE_ns1__UploadCompletedWorkResponse;
			return soap_in_ns1__UploadCompletedWorkResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:RequestWork"))
		{	*type = SOAP_TYPE_ns1__RequestWork;
			return soap_in_ns1__RequestWork(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:RequestWorkResponse"))
		{	*type = SOAP_TYPE_ns1__RequestWorkResponse;
			return soap_in_ns1__RequestWorkResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:RegisterNewClient"))
		{	*type = SOAP_TYPE_ns1__RegisterNewClient;
			return soap_in_ns1__RegisterNewClient(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:RegisterNewClientResponse"))
		{	*type = SOAP_TYPE_ns1__RegisterNewClientResponse;
			return soap_in_ns1__RegisterNewClientResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_string;
			s = soap_in_string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		t = soap->tag;
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE__QName;
			s = soap_in__QName(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
	}
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unexpected element '%s' in input (level=%u, %d)\n", soap->tag, soap->level, soap->body));
		if (soap->mustUnderstand && !soap->other)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, &t))
		{	soap->peeked = 0;
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body)
			{	soap->level++;
				while (!soap_ignore_element(soap))
					;
				if (soap->error == SOAP_NO_TAG)
					soap->error = soap_element_end_in(soap, NULL);
			}
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, "id", pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{
	switch (type)
	{
	case SOAP_TYPE_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_unsignedByte:
		return soap_out_unsignedByte(soap, tag, id, (const unsigned char *)ptr, "xsd:unsignedByte");
	case SOAP_TYPE_unsignedInt:
		return soap_out_unsignedInt(soap, tag, id, (const unsigned int *)ptr, "xsd:unsignedInt");
	case SOAP_TYPE_unsignedLONG64:
		return soap_out_unsignedLONG64(soap, tag, id, (const ULONG64 *)ptr, "xsd:unsignedLong");
	case SOAP_TYPE_std__string:
		return soap_out_std__string(soap, tag, id, (const std::string *)ptr, "xsd:string");
	case SOAP_TYPE_ns1__ArrayOfRainbowTableStatus:
		return ((ns1__ArrayOfRainbowTableStatus *)ptr)->soap_out(soap, tag, id, "ns1:ArrayOfRainbowTableStatus");
	case SOAP_TYPE_ns1__RainbowTableStatus:
		return ((ns1__RainbowTableStatus *)ptr)->soap_out(soap, tag, id, "ns1:RainbowTableStatus");
	case SOAP_TYPE_ns1__ArrayOfChainCheckHash:
		return ((ns1__ArrayOfChainCheckHash *)ptr)->soap_out(soap, tag, id, "ns1:ArrayOfChainCheckHash");
	case SOAP_TYPE_ns1__ChainCheckHash:
		return ((ns1__ChainCheckHash *)ptr)->soap_out(soap, tag, id, "ns1:ChainCheckHash");
	case SOAP_TYPE_ns1__ArrayOfIndexHash:
		return ((ns1__ArrayOfIndexHash *)ptr)->soap_out(soap, tag, id, "ns1:ArrayOfIndexHash");
	case SOAP_TYPE_ns1__IndexHash:
		return ((ns1__IndexHash *)ptr)->soap_out(soap, tag, id, "ns1:IndexHash");
	case SOAP_TYPE_ns1__ArrayOfWorkUnit:
		return ((ns1__ArrayOfWorkUnit *)ptr)->soap_out(soap, tag, id, "ns1:ArrayOfWorkUnit");
	case SOAP_TYPE_ns1__WorkUnit:
		return ((ns1__WorkUnit *)ptr)->soap_out(soap, tag, id, "ns1:WorkUnit");
	case SOAP_TYPE_ns1__MachineInfo:
		return ((ns1__MachineInfo *)ptr)->soap_out(soap, tag, id, "ns1:MachineInfo");
	case SOAP_TYPE_ns1__rtgenDetails:
		return ((ns1__rtgenDetails *)ptr)->soap_out(soap, tag, id, "ns1:rtgenDetails");
	case SOAP_TYPE_ns1__ArrayOfCPU:
		return ((ns1__ArrayOfCPU *)ptr)->soap_out(soap, tag, id, "ns1:ArrayOfCPU");
	case SOAP_TYPE_ns1__CPU:
		return ((ns1__CPU *)ptr)->soap_out(soap, tag, id, "ns1:CPU");
	case SOAP_TYPE_ns1__Credentials:
		return ((ns1__Credentials *)ptr)->soap_out(soap, tag, id, "ns1:Credentials");
	case SOAP_TYPE_xsd__base64Binary:
		return ((xsd__base64Binary *)ptr)->soap_out(soap, tag, id, "xsd:base64Binary");
	case SOAP_TYPE_ns1__RequestDetailedCrackingInfo:
		return soap_out_ns1__RequestDetailedCrackingInfo(soap, tag, id, (const struct ns1__RequestDetailedCrackingInfo *)ptr, "ns1:RequestDetailedCrackingInfo");
	case SOAP_TYPE_ns1__RequestDetailedCrackingInfoResponse:
		return soap_out_ns1__RequestDetailedCrackingInfoResponse(soap, tag, id, (const struct ns1__RequestDetailedCrackingInfoResponse *)ptr, "ns1:RequestDetailedCrackingInfoResponse");
	case SOAP_TYPE_ns1__ReportError:
		return soap_out_ns1__ReportError(soap, tag, id, (const struct ns1__ReportError *)ptr, "ns1:ReportError");
	case SOAP_TYPE_ns1__ReportErrorResponse:
		return soap_out_ns1__ReportErrorResponse(soap, tag, id, (const struct ns1__ReportErrorResponse *)ptr, "ns1:ReportErrorResponse");
	case SOAP_TYPE_ns1__SendChainCheckResult:
		return soap_out_ns1__SendChainCheckResult(soap, tag, id, (const struct ns1__SendChainCheckResult *)ptr, "ns1:SendChainCheckResult");
	case SOAP_TYPE_ns1__SendChainCheckResultResponse:
		return soap_out_ns1__SendChainCheckResultResponse(soap, tag, id, (const struct ns1__SendChainCheckResultResponse *)ptr, "ns1:SendChainCheckResultResponse");
	case SOAP_TYPE_ns1__RequestChainCheck:
		return soap_out_ns1__RequestChainCheck(soap, tag, id, (const struct ns1__RequestChainCheck *)ptr, "ns1:RequestChainCheck");
	case SOAP_TYPE_ns1__RequestChainCheckResponse:
		return soap_out_ns1__RequestChainCheckResponse(soap, tag, id, (const struct ns1__RequestChainCheckResponse *)ptr, "ns1:RequestChainCheckResponse");
	case SOAP_TYPE_ns1__UploadHashIndexList:
		return soap_out_ns1__UploadHashIndexList(soap, tag, id, (const struct ns1__UploadHashIndexList *)ptr, "ns1:UploadHashIndexList");
	case SOAP_TYPE_ns1__UploadHashIndexListResponse:
		return soap_out_ns1__UploadHashIndexListResponse(soap, tag, id, (const struct ns1__UploadHashIndexListResponse *)ptr, "ns1:UploadHashIndexListResponse");
	case SOAP_TYPE_ns1__RequestHashToIndex:
		return soap_out_ns1__RequestHashToIndex(soap, tag, id, (const struct ns1__RequestHashToIndex *)ptr, "ns1:RequestHashToIndex");
	case SOAP_TYPE_ns1__RequestHashToIndexResponse:
		return soap_out_ns1__RequestHashToIndexResponse(soap, tag, id, (const struct ns1__RequestHashToIndexResponse *)ptr, "ns1:RequestHashToIndexResponse");
	case SOAP_TYPE_ns1__UploadCompletedWork:
		return soap_out_ns1__UploadCompletedWork(soap, tag, id, (const struct ns1__UploadCompletedWork *)ptr, "ns1:UploadCompletedWork");
	case SOAP_TYPE_ns1__UploadCompletedWorkResponse:
		return soap_out_ns1__UploadCompletedWorkResponse(soap, tag, id, (const struct ns1__UploadCompletedWorkResponse *)ptr, "ns1:UploadCompletedWorkResponse");
	case SOAP_TYPE_ns1__RequestWork:
		return soap_out_ns1__RequestWork(soap, tag, id, (const struct ns1__RequestWork *)ptr, "ns1:RequestWork");
	case SOAP_TYPE_ns1__RequestWorkResponse:
		return soap_out_ns1__RequestWorkResponse(soap, tag, id, (const struct ns1__RequestWorkResponse *)ptr, "ns1:RequestWorkResponse");
	case SOAP_TYPE_ns1__RegisterNewClient:
		return soap_out_ns1__RegisterNewClient(soap, tag, id, (const struct ns1__RegisterNewClient *)ptr, "ns1:RegisterNewClient");
	case SOAP_TYPE_ns1__RegisterNewClientResponse:
		return soap_out_ns1__RegisterNewClientResponse(soap, tag, id, (const struct ns1__RegisterNewClientResponse *)ptr, "ns1:RegisterNewClientResponse");
	case SOAP_TYPE_PointerTons1__ArrayOfRainbowTableStatus:
		return soap_out_PointerTons1__ArrayOfRainbowTableStatus(soap, tag, id, (ns1__ArrayOfRainbowTableStatus *const*)ptr, "ns1:ArrayOfRainbowTableStatus");
	case SOAP_TYPE_PointerTons1__ArrayOfChainCheckHash:
		return soap_out_PointerTons1__ArrayOfChainCheckHash(soap, tag, id, (ns1__ArrayOfChainCheckHash *const*)ptr, "ns1:ArrayOfChainCheckHash");
	case SOAP_TYPE_PointerTons1__ArrayOfIndexHash:
		return soap_out_PointerTons1__ArrayOfIndexHash(soap, tag, id, (ns1__ArrayOfIndexHash *const*)ptr, "ns1:ArrayOfIndexHash");
	case SOAP_TYPE_PointerTons1__rtgenDetails:
		return soap_out_PointerTons1__rtgenDetails(soap, tag, id, (ns1__rtgenDetails *const*)ptr, "ns1:rtgenDetails");
	case SOAP_TYPE_PointerTons1__ArrayOfWorkUnit:
		return soap_out_PointerTons1__ArrayOfWorkUnit(soap, tag, id, (ns1__ArrayOfWorkUnit *const*)ptr, "ns1:ArrayOfWorkUnit");
	case SOAP_TYPE_PointerTons1__MachineInfo:
		return soap_out_PointerTons1__MachineInfo(soap, tag, id, (ns1__MachineInfo *const*)ptr, "ns1:MachineInfo");
	case SOAP_TYPE_PointerTons1__RainbowTableStatus:
		return soap_out_PointerTons1__RainbowTableStatus(soap, tag, id, (ns1__RainbowTableStatus *const*)ptr, "ns1:RainbowTableStatus");
	case SOAP_TYPE_PointerTons1__ChainCheckHash:
		return soap_out_PointerTons1__ChainCheckHash(soap, tag, id, (ns1__ChainCheckHash *const*)ptr, "ns1:ChainCheckHash");
	case SOAP_TYPE_PointerTons1__IndexHash:
		return soap_out_PointerTons1__IndexHash(soap, tag, id, (ns1__IndexHash *const*)ptr, "ns1:IndexHash");
	case SOAP_TYPE_PointerTons1__WorkUnit:
		return soap_out_PointerTons1__WorkUnit(soap, tag, id, (ns1__WorkUnit *const*)ptr, "ns1:WorkUnit");
	case SOAP_TYPE_PointerTons1__ArrayOfCPU:
		return soap_out_PointerTons1__ArrayOfCPU(soap, tag, id, (ns1__ArrayOfCPU *const*)ptr, "ns1:ArrayOfCPU");
	case SOAP_TYPE_PointerTons1__Credentials:
		return soap_out_PointerTons1__Credentials(soap, tag, id, (ns1__Credentials *const*)ptr, "ns1:Credentials");
	case SOAP_TYPE_PointerTons1__CPU:
		return soap_out_PointerTons1__CPU(soap, tag, id, (ns1__CPU *const*)ptr, "ns1:CPU");
	case SOAP_TYPE_PointerTounsignedByte:
		return soap_out_PointerTounsignedByte(soap, tag, id, (unsigned char *const*)ptr, "xsd:unsignedByte");
	case SOAP_TYPE__QName:
		return soap_out_string(soap, "xsd:QName", id, (char*const*)&ptr, NULL);
	case SOAP_TYPE_string:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:string");
	}
	return SOAP_OK;
}

#ifdef __cplusplus
}
#endif
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE_std__string:
		soap_serialize_std__string(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_ns1__ArrayOfRainbowTableStatus:
		((ns1__ArrayOfRainbowTableStatus *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__RainbowTableStatus:
		((ns1__RainbowTableStatus *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__ArrayOfChainCheckHash:
		((ns1__ArrayOfChainCheckHash *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__ChainCheckHash:
		((ns1__ChainCheckHash *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__ArrayOfIndexHash:
		((ns1__ArrayOfIndexHash *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__IndexHash:
		((ns1__IndexHash *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__ArrayOfWorkUnit:
		((ns1__ArrayOfWorkUnit *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__WorkUnit:
		((ns1__WorkUnit *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__MachineInfo:
		((ns1__MachineInfo *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__rtgenDetails:
		((ns1__rtgenDetails *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__ArrayOfCPU:
		((ns1__ArrayOfCPU *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__CPU:
		((ns1__CPU *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__Credentials:
		((ns1__Credentials *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__base64Binary:
		((xsd__base64Binary *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__RequestDetailedCrackingInfo:
		soap_serialize_ns1__RequestDetailedCrackingInfo(soap, (const struct ns1__RequestDetailedCrackingInfo *)ptr);
		break;
	case SOAP_TYPE_ns1__RequestDetailedCrackingInfoResponse:
		soap_serialize_ns1__RequestDetailedCrackingInfoResponse(soap, (const struct ns1__RequestDetailedCrackingInfoResponse *)ptr);
		break;
	case SOAP_TYPE_ns1__ReportError:
		soap_serialize_ns1__ReportError(soap, (const struct ns1__ReportError *)ptr);
		break;
	case SOAP_TYPE_ns1__ReportErrorResponse:
		soap_serialize_ns1__ReportErrorResponse(soap, (const struct ns1__ReportErrorResponse *)ptr);
		break;
	case SOAP_TYPE_ns1__SendChainCheckResult:
		soap_serialize_ns1__SendChainCheckResult(soap, (const struct ns1__SendChainCheckResult *)ptr);
		break;
	case SOAP_TYPE_ns1__SendChainCheckResultResponse:
		soap_serialize_ns1__SendChainCheckResultResponse(soap, (const struct ns1__SendChainCheckResultResponse *)ptr);
		break;
	case SOAP_TYPE_ns1__RequestChainCheck:
		soap_serialize_ns1__RequestChainCheck(soap, (const struct ns1__RequestChainCheck *)ptr);
		break;
	case SOAP_TYPE_ns1__RequestChainCheckResponse:
		soap_serialize_ns1__RequestChainCheckResponse(soap, (const struct ns1__RequestChainCheckResponse *)ptr);
		break;
	case SOAP_TYPE_ns1__UploadHashIndexList:
		soap_serialize_ns1__UploadHashIndexList(soap, (const struct ns1__UploadHashIndexList *)ptr);
		break;
	case SOAP_TYPE_ns1__UploadHashIndexListResponse:
		soap_serialize_ns1__UploadHashIndexListResponse(soap, (const struct ns1__UploadHashIndexListResponse *)ptr);
		break;
	case SOAP_TYPE_ns1__RequestHashToIndex:
		soap_serialize_ns1__RequestHashToIndex(soap, (const struct ns1__RequestHashToIndex *)ptr);
		break;
	case SOAP_TYPE_ns1__RequestHashToIndexResponse:
		soap_serialize_ns1__RequestHashToIndexResponse(soap, (const struct ns1__RequestHashToIndexResponse *)ptr);
		break;
	case SOAP_TYPE_ns1__UploadCompletedWork:
		soap_serialize_ns1__UploadCompletedWork(soap, (const struct ns1__UploadCompletedWork *)ptr);
		break;
	case SOAP_TYPE_ns1__UploadCompletedWorkResponse:
		soap_serialize_ns1__UploadCompletedWorkResponse(soap, (const struct ns1__UploadCompletedWorkResponse *)ptr);
		break;
	case SOAP_TYPE_ns1__RequestWork:
		soap_serialize_ns1__RequestWork(soap, (const struct ns1__RequestWork *)ptr);
		break;
	case SOAP_TYPE_ns1__RequestWorkResponse:
		soap_serialize_ns1__RequestWorkResponse(soap, (const struct ns1__RequestWorkResponse *)ptr);
		break;
	case SOAP_TYPE_ns1__RegisterNewClient:
		soap_serialize_ns1__RegisterNewClient(soap, (const struct ns1__RegisterNewClient *)ptr);
		break;
	case SOAP_TYPE_ns1__RegisterNewClientResponse:
		soap_serialize_ns1__RegisterNewClientResponse(soap, (const struct ns1__RegisterNewClientResponse *)ptr);
		break;
	case SOAP_TYPE_PointerTons1__ArrayOfRainbowTableStatus:
		soap_serialize_PointerTons1__ArrayOfRainbowTableStatus(soap, (ns1__ArrayOfRainbowTableStatus *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__ArrayOfChainCheckHash:
		soap_serialize_PointerTons1__ArrayOfChainCheckHash(soap, (ns1__ArrayOfChainCheckHash *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__ArrayOfIndexHash:
		soap_serialize_PointerTons1__ArrayOfIndexHash(soap, (ns1__ArrayOfIndexHash *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__rtgenDetails:
		soap_serialize_PointerTons1__rtgenDetails(soap, (ns1__rtgenDetails *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__ArrayOfWorkUnit:
		soap_serialize_PointerTons1__ArrayOfWorkUnit(soap, (ns1__ArrayOfWorkUnit *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__MachineInfo:
		soap_serialize_PointerTons1__MachineInfo(soap, (ns1__MachineInfo *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__RainbowTableStatus:
		soap_serialize_PointerTons1__RainbowTableStatus(soap, (ns1__RainbowTableStatus *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__ChainCheckHash:
		soap_serialize_PointerTons1__ChainCheckHash(soap, (ns1__ChainCheckHash *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__IndexHash:
		soap_serialize_PointerTons1__IndexHash(soap, (ns1__IndexHash *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__WorkUnit:
		soap_serialize_PointerTons1__WorkUnit(soap, (ns1__WorkUnit *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__ArrayOfCPU:
		soap_serialize_PointerTons1__ArrayOfCPU(soap, (ns1__ArrayOfCPU *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__Credentials:
		soap_serialize_PointerTons1__Credentials(soap, (ns1__Credentials *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__CPU:
		soap_serialize_PointerTons1__CPU(soap, (ns1__CPU *const*)ptr);
		break;
	case SOAP_TYPE_PointerTounsignedByte:
		soap_serialize_PointerTounsignedByte(soap, (unsigned char *const*)ptr);
		break;
	case SOAP_TYPE__QName:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	case SOAP_TYPE_string:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	}
}

#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{
	switch (t)
	{
	case SOAP_TYPE_xsd__base64Binary:
		return (void*)soap_instantiate_xsd__base64Binary(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__string:
		return (void*)soap_instantiate_std__string(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__Credentials:
		return (void*)soap_instantiate_ns1__Credentials(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__CPU:
		return (void*)soap_instantiate_ns1__CPU(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__ArrayOfCPU:
		return (void*)soap_instantiate_ns1__ArrayOfCPU(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__rtgenDetails:
		return (void*)soap_instantiate_ns1__rtgenDetails(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__MachineInfo:
		return (void*)soap_instantiate_ns1__MachineInfo(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__WorkUnit:
		return (void*)soap_instantiate_ns1__WorkUnit(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__ArrayOfWorkUnit:
		return (void*)soap_instantiate_ns1__ArrayOfWorkUnit(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__IndexHash:
		return (void*)soap_instantiate_ns1__IndexHash(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__ArrayOfIndexHash:
		return (void*)soap_instantiate_ns1__ArrayOfIndexHash(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__ChainCheckHash:
		return (void*)soap_instantiate_ns1__ChainCheckHash(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__ArrayOfChainCheckHash:
		return (void*)soap_instantiate_ns1__ArrayOfChainCheckHash(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__RainbowTableStatus:
		return (void*)soap_instantiate_ns1__RainbowTableStatus(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__ArrayOfRainbowTableStatus:
		return (void*)soap_instantiate_ns1__ArrayOfRainbowTableStatus(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__RegisterNewClientResponse:
		return (void*)soap_instantiate_ns1__RegisterNewClientResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__RegisterNewClient:
		return (void*)soap_instantiate_ns1__RegisterNewClient(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__RequestWorkResponse:
		return (void*)soap_instantiate_ns1__RequestWorkResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__RequestWork:
		return (void*)soap_instantiate_ns1__RequestWork(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__UploadCompletedWorkResponse:
		return (void*)soap_instantiate_ns1__UploadCompletedWorkResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__UploadCompletedWork:
		return (void*)soap_instantiate_ns1__UploadCompletedWork(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__RequestHashToIndexResponse:
		return (void*)soap_instantiate_ns1__RequestHashToIndexResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__RequestHashToIndex:
		return (void*)soap_instantiate_ns1__RequestHashToIndex(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__UploadHashIndexListResponse:
		return (void*)soap_instantiate_ns1__UploadHashIndexListResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__UploadHashIndexList:
		return (void*)soap_instantiate_ns1__UploadHashIndexList(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__RequestChainCheckResponse:
		return (void*)soap_instantiate_ns1__RequestChainCheckResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__RequestChainCheck:
		return (void*)soap_instantiate_ns1__RequestChainCheck(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__SendChainCheckResultResponse:
		return (void*)soap_instantiate_ns1__SendChainCheckResultResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__SendChainCheckResult:
		return (void*)soap_instantiate_ns1__SendChainCheckResult(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__ReportErrorResponse:
		return (void*)soap_instantiate_ns1__ReportErrorResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__ReportError:
		return (void*)soap_instantiate_ns1__ReportError(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__RequestDetailedCrackingInfoResponse:
		return (void*)soap_instantiate_ns1__RequestDetailedCrackingInfoResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__RequestDetailedCrackingInfo:
		return (void*)soap_instantiate_ns1__RequestDetailedCrackingInfo(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		return (void*)soap_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		return (void*)soap_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		return (void*)soap_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		return (void*)soap_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		return (void*)soap_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	case SOAP_TYPE_std__vectorTemplateOfPointerTons1__RainbowTableStatus:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTons1__RainbowTableStatus(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfPointerTons1__ChainCheckHash:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTons1__ChainCheckHash(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfPointerTons1__IndexHash:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTons1__IndexHash(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfPointerTons1__WorkUnit:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTons1__WorkUnit(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfPointerTons1__CPU:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTons1__CPU(soap, -1, type, arrayType, n);
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist *p)
{	switch (p->type)
	{
	case SOAP_TYPE_xsd__base64Binary:
		if (p->size < 0)
			delete (xsd__base64Binary*)p->ptr;
		else
			delete[] (xsd__base64Binary*)p->ptr;
		break;
	case SOAP_TYPE_std__string:
		if (p->size < 0)
			delete (std::string*)p->ptr;
		else
			delete[] (std::string*)p->ptr;
		break;
	case SOAP_TYPE_ns1__Credentials:
		if (p->size < 0)
			delete (ns1__Credentials*)p->ptr;
		else
			delete[] (ns1__Credentials*)p->ptr;
		break;
	case SOAP_TYPE_ns1__CPU:
		if (p->size < 0)
			delete (ns1__CPU*)p->ptr;
		else
			delete[] (ns1__CPU*)p->ptr;
		break;
	case SOAP_TYPE_ns1__ArrayOfCPU:
		if (p->size < 0)
			delete (ns1__ArrayOfCPU*)p->ptr;
		else
			delete[] (ns1__ArrayOfCPU*)p->ptr;
		break;
	case SOAP_TYPE_ns1__rtgenDetails:
		if (p->size < 0)
			delete (ns1__rtgenDetails*)p->ptr;
		else
			delete[] (ns1__rtgenDetails*)p->ptr;
		break;
	case SOAP_TYPE_ns1__MachineInfo:
		if (p->size < 0)
			delete (ns1__MachineInfo*)p->ptr;
		else
			delete[] (ns1__MachineInfo*)p->ptr;
		break;
	case SOAP_TYPE_ns1__WorkUnit:
		if (p->size < 0)
			delete (ns1__WorkUnit*)p->ptr;
		else
			delete[] (ns1__WorkUnit*)p->ptr;
		break;
	case SOAP_TYPE_ns1__ArrayOfWorkUnit:
		if (p->size < 0)
			delete (ns1__ArrayOfWorkUnit*)p->ptr;
		else
			delete[] (ns1__ArrayOfWorkUnit*)p->ptr;
		break;
	case SOAP_TYPE_ns1__IndexHash:
		if (p->size < 0)
			delete (ns1__IndexHash*)p->ptr;
		else
			delete[] (ns1__IndexHash*)p->ptr;
		break;
	case SOAP_TYPE_ns1__ArrayOfIndexHash:
		if (p->size < 0)
			delete (ns1__ArrayOfIndexHash*)p->ptr;
		else
			delete[] (ns1__ArrayOfIndexHash*)p->ptr;
		break;
	case SOAP_TYPE_ns1__ChainCheckHash:
		if (p->size < 0)
			delete (ns1__ChainCheckHash*)p->ptr;
		else
			delete[] (ns1__ChainCheckHash*)p->ptr;
		break;
	case SOAP_TYPE_ns1__ArrayOfChainCheckHash:
		if (p->size < 0)
			delete (ns1__ArrayOfChainCheckHash*)p->ptr;
		else
			delete[] (ns1__ArrayOfChainCheckHash*)p->ptr;
		break;
	case SOAP_TYPE_ns1__RainbowTableStatus:
		if (p->size < 0)
			delete (ns1__RainbowTableStatus*)p->ptr;
		else
			delete[] (ns1__RainbowTableStatus*)p->ptr;
		break;
	case SOAP_TYPE_ns1__ArrayOfRainbowTableStatus:
		if (p->size < 0)
			delete (ns1__ArrayOfRainbowTableStatus*)p->ptr;
		else
			delete[] (ns1__ArrayOfRainbowTableStatus*)p->ptr;
		break;
	case SOAP_TYPE_ns1__RegisterNewClientResponse:
		if (p->size < 0)
			delete (struct ns1__RegisterNewClientResponse*)p->ptr;
		else
			delete[] (struct ns1__RegisterNewClientResponse*)p->ptr;
		break;
	case SOAP_TYPE_ns1__RegisterNewClient:
		if (p->size < 0)
			delete (struct ns1__RegisterNewClient*)p->ptr;
		else
			delete[] (struct ns1__RegisterNewClient*)p->ptr;
		break;
	case SOAP_TYPE_ns1__RequestWorkResponse:
		if (p->size < 0)
			delete (struct ns1__RequestWorkResponse*)p->ptr;
		else
			delete[] (struct ns1__RequestWorkResponse*)p->ptr;
		break;
	case SOAP_TYPE_ns1__RequestWork:
		if (p->size < 0)
			delete (struct ns1__RequestWork*)p->ptr;
		else
			delete[] (struct ns1__RequestWork*)p->ptr;
		break;
	case SOAP_TYPE_ns1__UploadCompletedWorkResponse:
		if (p->size < 0)
			delete (struct ns1__UploadCompletedWorkResponse*)p->ptr;
		else
			delete[] (struct ns1__UploadCompletedWorkResponse*)p->ptr;
		break;
	case SOAP_TYPE_ns1__UploadCompletedWork:
		if (p->size < 0)
			delete (struct ns1__UploadCompletedWork*)p->ptr;
		else
			delete[] (struct ns1__UploadCompletedWork*)p->ptr;
		break;
	case SOAP_TYPE_ns1__RequestHashToIndexResponse:
		if (p->size < 0)
			delete (struct ns1__RequestHashToIndexResponse*)p->ptr;
		else
			delete[] (struct ns1__RequestHashToIndexResponse*)p->ptr;
		break;
	case SOAP_TYPE_ns1__RequestHashToIndex:
		if (p->size < 0)
			delete (struct ns1__RequestHashToIndex*)p->ptr;
		else
			delete[] (struct ns1__RequestHashToIndex*)p->ptr;
		break;
	case SOAP_TYPE_ns1__UploadHashIndexListResponse:
		if (p->size < 0)
			delete (struct ns1__UploadHashIndexListResponse*)p->ptr;
		else
			delete[] (struct ns1__UploadHashIndexListResponse*)p->ptr;
		break;
	case SOAP_TYPE_ns1__UploadHashIndexList:
		if (p->size < 0)
			delete (struct ns1__UploadHashIndexList*)p->ptr;
		else
			delete[] (struct ns1__UploadHashIndexList*)p->ptr;
		break;
	case SOAP_TYPE_ns1__RequestChainCheckResponse:
		if (p->size < 0)
			delete (struct ns1__RequestChainCheckResponse*)p->ptr;
		else
			delete[] (struct ns1__RequestChainCheckResponse*)p->ptr;
		break;
	case SOAP_TYPE_ns1__RequestChainCheck:
		if (p->size < 0)
			delete (struct ns1__RequestChainCheck*)p->ptr;
		else
			delete[] (struct ns1__RequestChainCheck*)p->ptr;
		break;
	case SOAP_TYPE_ns1__SendChainCheckResultResponse:
		if (p->size < 0)
			delete (struct ns1__SendChainCheckResultResponse*)p->ptr;
		else
			delete[] (struct ns1__SendChainCheckResultResponse*)p->ptr;
		break;
	case SOAP_TYPE_ns1__SendChainCheckResult:
		if (p->size < 0)
			delete (struct ns1__SendChainCheckResult*)p->ptr;
		else
			delete[] (struct ns1__SendChainCheckResult*)p->ptr;
		break;
	case SOAP_TYPE_ns1__ReportErrorResponse:
		if (p->size < 0)
			delete (struct ns1__ReportErrorResponse*)p->ptr;
		else
			delete[] (struct ns1__ReportErrorResponse*)p->ptr;
		break;
	case SOAP_TYPE_ns1__ReportError:
		if (p->size < 0)
			delete (struct ns1__ReportError*)p->ptr;
		else
			delete[] (struct ns1__ReportError*)p->ptr;
		break;
	case SOAP_TYPE_ns1__RequestDetailedCrackingInfoResponse:
		if (p->size < 0)
			delete (struct ns1__RequestDetailedCrackingInfoResponse*)p->ptr;
		else
			delete[] (struct ns1__RequestDetailedCrackingInfoResponse*)p->ptr;
		break;
	case SOAP_TYPE_ns1__RequestDetailedCrackingInfo:
		if (p->size < 0)
			delete (struct ns1__RequestDetailedCrackingInfo*)p->ptr;
		else
			delete[] (struct ns1__RequestDetailedCrackingInfo*)p->ptr;
		break;
	case SOAP_TYPE_SOAP_ENV__Header:
		if (p->size < 0)
			delete (struct SOAP_ENV__Header*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Header*)p->ptr;
		break;
	case SOAP_TYPE_SOAP_ENV__Code:
		if (p->size < 0)
			delete (struct SOAP_ENV__Code*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Code*)p->ptr;
		break;
	case SOAP_TYPE_SOAP_ENV__Detail:
		if (p->size < 0)
			delete (struct SOAP_ENV__Detail*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Detail*)p->ptr;
		break;
	case SOAP_TYPE_SOAP_ENV__Reason:
		if (p->size < 0)
			delete (struct SOAP_ENV__Reason*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Reason*)p->ptr;
		break;
	case SOAP_TYPE_SOAP_ENV__Fault:
		if (p->size < 0)
			delete (struct SOAP_ENV__Fault*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Fault*)p->ptr;
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTons1__RainbowTableStatus:
		if (p->size < 0)
			delete (std::vector<ns1__RainbowTableStatus * >*)p->ptr;
		else
			delete[] (std::vector<ns1__RainbowTableStatus * >*)p->ptr;
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTons1__ChainCheckHash:
		if (p->size < 0)
			delete (std::vector<ns1__ChainCheckHash * >*)p->ptr;
		else
			delete[] (std::vector<ns1__ChainCheckHash * >*)p->ptr;
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTons1__IndexHash:
		if (p->size < 0)
			delete (std::vector<ns1__IndexHash * >*)p->ptr;
		else
			delete[] (std::vector<ns1__IndexHash * >*)p->ptr;
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTons1__WorkUnit:
		if (p->size < 0)
			delete (std::vector<ns1__WorkUnit * >*)p->ptr;
		else
			delete[] (std::vector<ns1__WorkUnit * >*)p->ptr;
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTons1__CPU:
		if (p->size < 0)
			delete (std::vector<ns1__CPU * >*)p->ptr;
		else
			delete[] (std::vector<ns1__CPU * >*)p->ptr;
		break;
	default:	return SOAP_ERR;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap *soap, const char *id, void *p, int t, size_t n, const char *type, const char *arrayType)
{	return soap_id_enter(soap, id, p, t, n, 0, type, arrayType, soap_instantiate);
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_container_id_forward(struct soap *soap, const char *href, void *p, size_t len, int st, int tt, size_t n, unsigned int k)
{	return soap_id_forward(soap, href, p, len, st, tt, n, k, soap_container_insert);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_container_insert(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
#ifdef WIN32
#pragma warning(push)
#pragma warning(disable:4065)
#endif
{	switch (tt)
	{
	case SOAP_TYPE_std__vectorTemplateOfPointerTons1__RainbowTableStatus:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container insert type=%d in %d location=%p object=%p len=%lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<ns1__RainbowTableStatus * >*)p)[len] = *(ns1__RainbowTableStatus **)q;
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTons1__ChainCheckHash:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container insert type=%d in %d location=%p object=%p len=%lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<ns1__ChainCheckHash * >*)p)[len] = *(ns1__ChainCheckHash **)q;
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTons1__IndexHash:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container insert type=%d in %d location=%p object=%p len=%lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<ns1__IndexHash * >*)p)[len] = *(ns1__IndexHash **)q;
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTons1__WorkUnit:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container insert type=%d in %d location=%p object=%p len=%lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<ns1__WorkUnit * >*)p)[len] = *(ns1__WorkUnit **)q;
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTons1__CPU:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container insert type=%d in %d location=%p object=%p len=%lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<ns1__CPU * >*)p)[len] = *(ns1__CPU **)q;
		break;
	default:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Could not insert type=%d in %d\n", st, tt));
	}
#ifdef WIN32
#pragma warning(pop)
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap *soap, char *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_byte);
	if (soap_out_byte(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{
	return soap_inbyte(soap, tag, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap *soap, int *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_int);
	if (soap_out_int(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{
	return soap_inint(soap, tag, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedByte(struct soap *soap, unsigned char *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedByte
	*a = SOAP_DEFAULT_unsignedByte;
#else
	*a = (unsigned char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedByte(struct soap *soap, const unsigned char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_unsignedByte);
	if (soap_out_unsignedByte(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedByte(struct soap *soap, const char *tag, int id, const unsigned char *a, const char *type)
{
	return soap_outunsignedByte(soap, tag, id, a, type, SOAP_TYPE_unsignedByte);
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_get_unsignedByte(struct soap *soap, unsigned char *p, const char *tag, const char *type)
{
	if ((p = soap_in_unsignedByte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_in_unsignedByte(struct soap *soap, const char *tag, unsigned char *a, const char *type)
{
	return soap_inunsignedByte(soap, tag, a, type, SOAP_TYPE_unsignedByte);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedInt(struct soap *soap, unsigned int *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedInt
	*a = SOAP_DEFAULT_unsignedInt;
#else
	*a = (unsigned int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedInt(struct soap *soap, const unsigned int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_unsignedInt);
	if (soap_out_unsignedInt(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedInt(struct soap *soap, const char *tag, int id, const unsigned int *a, const char *type)
{
	return soap_outunsignedInt(soap, tag, id, a, type, SOAP_TYPE_unsignedInt);
}

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_get_unsignedInt(struct soap *soap, unsigned int *p, const char *tag, const char *type)
{
	if ((p = soap_in_unsignedInt(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_in_unsignedInt(struct soap *soap, const char *tag, unsigned int *a, const char *type)
{
	return soap_inunsignedInt(soap, tag, a, type, SOAP_TYPE_unsignedInt);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedLONG64(struct soap *soap, ULONG64 *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedLONG64
	*a = SOAP_DEFAULT_unsignedLONG64;
#else
	*a = (ULONG64)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedLONG64(struct soap *soap, const ULONG64 *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_unsignedLONG64);
	if (soap_out_unsignedLONG64(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedLONG64(struct soap *soap, const char *tag, int id, const ULONG64 *a, const char *type)
{
	return soap_outULONG64(soap, tag, id, a, type, SOAP_TYPE_unsignedLONG64);
}

SOAP_FMAC3 ULONG64 * SOAP_FMAC4 soap_get_unsignedLONG64(struct soap *soap, ULONG64 *p, const char *tag, const char *type)
{
	if ((p = soap_in_unsignedLONG64(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 ULONG64 * SOAP_FMAC4 soap_in_unsignedLONG64(struct soap *soap, const char *tag, ULONG64 *a, const char *type)
{
	return soap_inULONG64(soap, tag, a, type, SOAP_TYPE_unsignedLONG64);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__string(struct soap *soap, std::string *p)
{	(void)soap; /* appease -Wall -Werror */
	p->erase();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap *soap, const std::string *p)
{	(void)soap; (void)p; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_std__string);
	if (soap_out_std__string(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_std__string), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_std__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_in_std__string(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
		{
			if ((t = soap_string_in(soap, 1, -1, -1)))
				s->assign(t);
			else
				return NULL;
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_std__string, 0, sizeof(std::string), 0, soap_copy_std__string);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC5 std::string * SOAP_FMAC6 soap_new_std__string(struct soap *soap, int n)
{	return soap_instantiate_std__string(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_std__string(struct soap *soap, std::string *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_instantiate_std__string(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__string(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__string, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new std::string;
		if (size)
			*size = sizeof(std::string);
	}
	else
	{	cp->ptr = (void*)new std::string[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::string);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::string*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__string(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::string %p -> %p\n", q, p));
	*(std::string*)p = *(std::string*)q;
}

void ns1__ArrayOfRainbowTableStatus::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__vectorTemplateOfPointerTons1__RainbowTableStatus(soap, &this->ns1__ArrayOfRainbowTableStatus::RainbowTableStatusElement);
	/* transient soap skipped */
}

void ns1__ArrayOfRainbowTableStatus::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__vectorTemplateOfPointerTons1__RainbowTableStatus(soap, &this->ns1__ArrayOfRainbowTableStatus::RainbowTableStatusElement);
	/* transient soap skipped */
}

int ns1__ArrayOfRainbowTableStatus::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns1__ArrayOfRainbowTableStatus);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int ns1__ArrayOfRainbowTableStatus::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__ArrayOfRainbowTableStatus(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ArrayOfRainbowTableStatus(struct soap *soap, const char *tag, int id, const ns1__ArrayOfRainbowTableStatus *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__ArrayOfRainbowTableStatus), type))
		return soap->error;
	if (soap_out_std__vectorTemplateOfPointerTons1__RainbowTableStatus(soap, "RainbowTableStatusElement", -1, &(a->ns1__ArrayOfRainbowTableStatus::RainbowTableStatusElement), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__ArrayOfRainbowTableStatus::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__ArrayOfRainbowTableStatus(soap, this, tag, type);
}

SOAP_FMAC3 ns1__ArrayOfRainbowTableStatus * SOAP_FMAC4 soap_get_ns1__ArrayOfRainbowTableStatus(struct soap *soap, ns1__ArrayOfRainbowTableStatus *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__ArrayOfRainbowTableStatus(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *ns1__ArrayOfRainbowTableStatus::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__ArrayOfRainbowTableStatus(soap, tag, this, type);
}

SOAP_FMAC3 ns1__ArrayOfRainbowTableStatus * SOAP_FMAC4 soap_in_ns1__ArrayOfRainbowTableStatus(struct soap *soap, const char *tag, ns1__ArrayOfRainbowTableStatus *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__ArrayOfRainbowTableStatus *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__ArrayOfRainbowTableStatus, sizeof(ns1__ArrayOfRainbowTableStatus), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__ArrayOfRainbowTableStatus)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__ArrayOfRainbowTableStatus *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfPointerTons1__RainbowTableStatus(soap, "RainbowTableStatusElement", &(a->ns1__ArrayOfRainbowTableStatus::RainbowTableStatusElement), "ns1:RainbowTableStatus"))
					continue;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__ArrayOfRainbowTableStatus *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__ArrayOfRainbowTableStatus, 0, sizeof(ns1__ArrayOfRainbowTableStatus), 0, soap_copy_ns1__ArrayOfRainbowTableStatus);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 ns1__ArrayOfRainbowTableStatus * SOAP_FMAC6 soap_new_ns1__ArrayOfRainbowTableStatus(struct soap *soap, int n)
{	return soap_instantiate_ns1__ArrayOfRainbowTableStatus(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ns1__ArrayOfRainbowTableStatus(struct soap *soap, ns1__ArrayOfRainbowTableStatus *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 ns1__ArrayOfRainbowTableStatus * SOAP_FMAC4 soap_instantiate_ns1__ArrayOfRainbowTableStatus(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__ArrayOfRainbowTableStatus(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__ArrayOfRainbowTableStatus, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new ns1__ArrayOfRainbowTableStatus;
		if (size)
			*size = sizeof(ns1__ArrayOfRainbowTableStatus);
		((ns1__ArrayOfRainbowTableStatus*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new ns1__ArrayOfRainbowTableStatus[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns1__ArrayOfRainbowTableStatus);
		for (int i = 0; i < n; i++)
			((ns1__ArrayOfRainbowTableStatus*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns1__ArrayOfRainbowTableStatus*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__ArrayOfRainbowTableStatus(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__ArrayOfRainbowTableStatus %p -> %p\n", q, p));
	*(ns1__ArrayOfRainbowTableStatus*)p = *(ns1__ArrayOfRainbowTableStatus*)q;
}

void ns1__RainbowTableStatus::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->ns1__RainbowTableStatus::Tablename);
	soap_default_std__string(soap, &this->ns1__RainbowTableStatus::Status);
	/* transient soap skipped */
}

void ns1__RainbowTableStatus::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &this->ns1__RainbowTableStatus::Tablename);
	soap_serialize_std__string(soap, &this->ns1__RainbowTableStatus::Status);
	/* transient soap skipped */
}

int ns1__RainbowTableStatus::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns1__RainbowTableStatus);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int ns1__RainbowTableStatus::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__RainbowTableStatus(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__RainbowTableStatus(struct soap *soap, const char *tag, int id, const ns1__RainbowTableStatus *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__RainbowTableStatus), type))
		return soap->error;
	if (soap_out_std__string(soap, "Tablename", -1, &(a->ns1__RainbowTableStatus::Tablename), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Status", -1, &(a->ns1__RainbowTableStatus::Status), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__RainbowTableStatus::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__RainbowTableStatus(soap, this, tag, type);
}

SOAP_FMAC3 ns1__RainbowTableStatus * SOAP_FMAC4 soap_get_ns1__RainbowTableStatus(struct soap *soap, ns1__RainbowTableStatus *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__RainbowTableStatus(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *ns1__RainbowTableStatus::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__RainbowTableStatus(soap, tag, this, type);
}

SOAP_FMAC3 ns1__RainbowTableStatus * SOAP_FMAC4 soap_in_ns1__RainbowTableStatus(struct soap *soap, const char *tag, ns1__RainbowTableStatus *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__RainbowTableStatus *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__RainbowTableStatus, sizeof(ns1__RainbowTableStatus), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__RainbowTableStatus)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__RainbowTableStatus *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_Tablename1 = 1;
	size_t soap_flag_Status1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Tablename1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Tablename", &(a->ns1__RainbowTableStatus::Tablename), "xsd:string"))
				{	soap_flag_Tablename1--;
					continue;
				}
			if (soap_flag_Status1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Status", &(a->ns1__RainbowTableStatus::Status), "xsd:string"))
				{	soap_flag_Status1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__RainbowTableStatus *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__RainbowTableStatus, 0, sizeof(ns1__RainbowTableStatus), 0, soap_copy_ns1__RainbowTableStatus);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_Tablename1 > 0 || soap_flag_Status1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 ns1__RainbowTableStatus * SOAP_FMAC6 soap_new_ns1__RainbowTableStatus(struct soap *soap, int n)
{	return soap_instantiate_ns1__RainbowTableStatus(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ns1__RainbowTableStatus(struct soap *soap, ns1__RainbowTableStatus *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 ns1__RainbowTableStatus * SOAP_FMAC4 soap_instantiate_ns1__RainbowTableStatus(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__RainbowTableStatus(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__RainbowTableStatus, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new ns1__RainbowTableStatus;
		if (size)
			*size = sizeof(ns1__RainbowTableStatus);
		((ns1__RainbowTableStatus*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new ns1__RainbowTableStatus[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns1__RainbowTableStatus);
		for (int i = 0; i < n; i++)
			((ns1__RainbowTableStatus*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns1__RainbowTableStatus*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__RainbowTableStatus(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__RainbowTableStatus %p -> %p\n", q, p));
	*(ns1__RainbowTableStatus*)p = *(ns1__RainbowTableStatus*)q;
}

void ns1__ArrayOfChainCheckHash::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__vectorTemplateOfPointerTons1__ChainCheckHash(soap, &this->ns1__ArrayOfChainCheckHash::ChainCheckHashElement);
	/* transient soap skipped */
}

void ns1__ArrayOfChainCheckHash::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__vectorTemplateOfPointerTons1__ChainCheckHash(soap, &this->ns1__ArrayOfChainCheckHash::ChainCheckHashElement);
	/* transient soap skipped */
}

int ns1__ArrayOfChainCheckHash::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns1__ArrayOfChainCheckHash);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int ns1__ArrayOfChainCheckHash::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__ArrayOfChainCheckHash(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ArrayOfChainCheckHash(struct soap *soap, const char *tag, int id, const ns1__ArrayOfChainCheckHash *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__ArrayOfChainCheckHash), type))
		return soap->error;
	if (soap_out_std__vectorTemplateOfPointerTons1__ChainCheckHash(soap, "ChainCheckHashElement", -1, &(a->ns1__ArrayOfChainCheckHash::ChainCheckHashElement), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__ArrayOfChainCheckHash::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__ArrayOfChainCheckHash(soap, this, tag, type);
}

SOAP_FMAC3 ns1__ArrayOfChainCheckHash * SOAP_FMAC4 soap_get_ns1__ArrayOfChainCheckHash(struct soap *soap, ns1__ArrayOfChainCheckHash *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__ArrayOfChainCheckHash(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *ns1__ArrayOfChainCheckHash::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__ArrayOfChainCheckHash(soap, tag, this, type);
}

SOAP_FMAC3 ns1__ArrayOfChainCheckHash * SOAP_FMAC4 soap_in_ns1__ArrayOfChainCheckHash(struct soap *soap, const char *tag, ns1__ArrayOfChainCheckHash *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__ArrayOfChainCheckHash *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__ArrayOfChainCheckHash, sizeof(ns1__ArrayOfChainCheckHash), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__ArrayOfChainCheckHash)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__ArrayOfChainCheckHash *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfPointerTons1__ChainCheckHash(soap, "ChainCheckHashElement", &(a->ns1__ArrayOfChainCheckHash::ChainCheckHashElement), "ns1:ChainCheckHash"))
					continue;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__ArrayOfChainCheckHash *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__ArrayOfChainCheckHash, 0, sizeof(ns1__ArrayOfChainCheckHash), 0, soap_copy_ns1__ArrayOfChainCheckHash);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 ns1__ArrayOfChainCheckHash * SOAP_FMAC6 soap_new_ns1__ArrayOfChainCheckHash(struct soap *soap, int n)
{	return soap_instantiate_ns1__ArrayOfChainCheckHash(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ns1__ArrayOfChainCheckHash(struct soap *soap, ns1__ArrayOfChainCheckHash *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 ns1__ArrayOfChainCheckHash * SOAP_FMAC4 soap_instantiate_ns1__ArrayOfChainCheckHash(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__ArrayOfChainCheckHash(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__ArrayOfChainCheckHash, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new ns1__ArrayOfChainCheckHash;
		if (size)
			*size = sizeof(ns1__ArrayOfChainCheckHash);
		((ns1__ArrayOfChainCheckHash*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new ns1__ArrayOfChainCheckHash[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns1__ArrayOfChainCheckHash);
		for (int i = 0; i < n; i++)
			((ns1__ArrayOfChainCheckHash*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns1__ArrayOfChainCheckHash*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__ArrayOfChainCheckHash(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__ArrayOfChainCheckHash %p -> %p\n", q, p));
	*(ns1__ArrayOfChainCheckHash*)p = *(ns1__ArrayOfChainCheckHash*)q;
}

void ns1__ChainCheckHash::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_unsignedInt(soap, &this->ns1__ChainCheckHash::RequestID);
	soap_default_std__string(soap, &this->ns1__ChainCheckHash::Hash);
	soap_default_std__string(soap, &this->ns1__ChainCheckHash::HashRoutine);
	soap_default_std__string(soap, &this->ns1__ChainCheckHash::Charset);
	soap_default_unsignedInt(soap, &this->ns1__ChainCheckHash::ChainLength);
	soap_default_unsignedInt(soap, &this->ns1__ChainCheckHash::MinLetters);
	soap_default_unsignedInt(soap, &this->ns1__ChainCheckHash::MaxLetters);
	soap_default_unsignedInt(soap, &this->ns1__ChainCheckHash::Index);
	soap_default_std__string(soap, &this->ns1__ChainCheckHash::Salt);
	soap_default_std__string(soap, &this->ns1__ChainCheckHash::ExpireTime);
	soap_default_std__string(soap, &this->ns1__ChainCheckHash::Chains);
	/* transient soap skipped */
}

void ns1__ChainCheckHash::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &this->ns1__ChainCheckHash::Hash);
	soap_serialize_std__string(soap, &this->ns1__ChainCheckHash::HashRoutine);
	soap_serialize_std__string(soap, &this->ns1__ChainCheckHash::Charset);
	soap_serialize_std__string(soap, &this->ns1__ChainCheckHash::Salt);
	soap_serialize_std__string(soap, &this->ns1__ChainCheckHash::ExpireTime);
	soap_serialize_std__string(soap, &this->ns1__ChainCheckHash::Chains);
	/* transient soap skipped */
}

int ns1__ChainCheckHash::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns1__ChainCheckHash);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int ns1__ChainCheckHash::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__ChainCheckHash(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ChainCheckHash(struct soap *soap, const char *tag, int id, const ns1__ChainCheckHash *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__ChainCheckHash), type))
		return soap->error;
	if (soap_out_unsignedInt(soap, "RequestID", -1, &(a->ns1__ChainCheckHash::RequestID), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Hash", -1, &(a->ns1__ChainCheckHash::Hash), ""))
		return soap->error;
	if (soap_out_std__string(soap, "HashRoutine", -1, &(a->ns1__ChainCheckHash::HashRoutine), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Charset", -1, &(a->ns1__ChainCheckHash::Charset), ""))
		return soap->error;
	if (soap_out_unsignedInt(soap, "ChainLength", -1, &(a->ns1__ChainCheckHash::ChainLength), ""))
		return soap->error;
	if (soap_out_unsignedInt(soap, "MinLetters", -1, &(a->ns1__ChainCheckHash::MinLetters), ""))
		return soap->error;
	if (soap_out_unsignedInt(soap, "MaxLetters", -1, &(a->ns1__ChainCheckHash::MaxLetters), ""))
		return soap->error;
	if (soap_out_unsignedInt(soap, "Index", -1, &(a->ns1__ChainCheckHash::Index), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Salt", -1, &(a->ns1__ChainCheckHash::Salt), ""))
		return soap->error;
	if (soap_out_std__string(soap, "ExpireTime", -1, &(a->ns1__ChainCheckHash::ExpireTime), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Chains", -1, &(a->ns1__ChainCheckHash::Chains), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__ChainCheckHash::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__ChainCheckHash(soap, this, tag, type);
}

SOAP_FMAC3 ns1__ChainCheckHash * SOAP_FMAC4 soap_get_ns1__ChainCheckHash(struct soap *soap, ns1__ChainCheckHash *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__ChainCheckHash(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *ns1__ChainCheckHash::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__ChainCheckHash(soap, tag, this, type);
}

SOAP_FMAC3 ns1__ChainCheckHash * SOAP_FMAC4 soap_in_ns1__ChainCheckHash(struct soap *soap, const char *tag, ns1__ChainCheckHash *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__ChainCheckHash *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__ChainCheckHash, sizeof(ns1__ChainCheckHash), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__ChainCheckHash)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__ChainCheckHash *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_RequestID1 = 1;
	size_t soap_flag_Hash1 = 1;
	size_t soap_flag_HashRoutine1 = 1;
	size_t soap_flag_Charset1 = 1;
	size_t soap_flag_ChainLength1 = 1;
	size_t soap_flag_MinLetters1 = 1;
	size_t soap_flag_MaxLetters1 = 1;
	size_t soap_flag_Index1 = 1;
	size_t soap_flag_Salt1 = 1;
	size_t soap_flag_ExpireTime1 = 1;
	size_t soap_flag_Chains1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_RequestID1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedInt(soap, "RequestID", &(a->ns1__ChainCheckHash::RequestID), "xsd:unsignedInt"))
				{	soap_flag_RequestID1--;
					continue;
				}
			if (soap_flag_Hash1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Hash", &(a->ns1__ChainCheckHash::Hash), "xsd:string"))
				{	soap_flag_Hash1--;
					continue;
				}
			if (soap_flag_HashRoutine1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "HashRoutine", &(a->ns1__ChainCheckHash::HashRoutine), "xsd:string"))
				{	soap_flag_HashRoutine1--;
					continue;
				}
			if (soap_flag_Charset1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Charset", &(a->ns1__ChainCheckHash::Charset), "xsd:string"))
				{	soap_flag_Charset1--;
					continue;
				}
			if (soap_flag_ChainLength1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedInt(soap, "ChainLength", &(a->ns1__ChainCheckHash::ChainLength), "xsd:unsignedInt"))
				{	soap_flag_ChainLength1--;
					continue;
				}
			if (soap_flag_MinLetters1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedInt(soap, "MinLetters", &(a->ns1__ChainCheckHash::MinLetters), "xsd:unsignedInt"))
				{	soap_flag_MinLetters1--;
					continue;
				}
			if (soap_flag_MaxLetters1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedInt(soap, "MaxLetters", &(a->ns1__ChainCheckHash::MaxLetters), "xsd:unsignedInt"))
				{	soap_flag_MaxLetters1--;
					continue;
				}
			if (soap_flag_Index1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedInt(soap, "Index", &(a->ns1__ChainCheckHash::Index), "xsd:unsignedInt"))
				{	soap_flag_Index1--;
					continue;
				}
			if (soap_flag_Salt1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Salt", &(a->ns1__ChainCheckHash::Salt), "xsd:string"))
				{	soap_flag_Salt1--;
					continue;
				}
			if (soap_flag_ExpireTime1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "ExpireTime", &(a->ns1__ChainCheckHash::ExpireTime), "xsd:string"))
				{	soap_flag_ExpireTime1--;
					continue;
				}
			if (soap_flag_Chains1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Chains", &(a->ns1__ChainCheckHash::Chains), "xsd:string"))
				{	soap_flag_Chains1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__ChainCheckHash *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__ChainCheckHash, 0, sizeof(ns1__ChainCheckHash), 0, soap_copy_ns1__ChainCheckHash);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_RequestID1 > 0 || soap_flag_Hash1 > 0 || soap_flag_HashRoutine1 > 0 || soap_flag_Charset1 > 0 || soap_flag_ChainLength1 > 0 || soap_flag_MinLetters1 > 0 || soap_flag_MaxLetters1 > 0 || soap_flag_Index1 > 0 || soap_flag_Salt1 > 0 || soap_flag_ExpireTime1 > 0 || soap_flag_Chains1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 ns1__ChainCheckHash * SOAP_FMAC6 soap_new_ns1__ChainCheckHash(struct soap *soap, int n)
{	return soap_instantiate_ns1__ChainCheckHash(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ns1__ChainCheckHash(struct soap *soap, ns1__ChainCheckHash *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 ns1__ChainCheckHash * SOAP_FMAC4 soap_instantiate_ns1__ChainCheckHash(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__ChainCheckHash(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__ChainCheckHash, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new ns1__ChainCheckHash;
		if (size)
			*size = sizeof(ns1__ChainCheckHash);
		((ns1__ChainCheckHash*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new ns1__ChainCheckHash[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns1__ChainCheckHash);
		for (int i = 0; i < n; i++)
			((ns1__ChainCheckHash*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns1__ChainCheckHash*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__ChainCheckHash(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__ChainCheckHash %p -> %p\n", q, p));
	*(ns1__ChainCheckHash*)p = *(ns1__ChainCheckHash*)q;
}

void ns1__ArrayOfIndexHash::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__vectorTemplateOfPointerTons1__IndexHash(soap, &this->ns1__ArrayOfIndexHash::IndexHashElement);
	/* transient soap skipped */
}

void ns1__ArrayOfIndexHash::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__vectorTemplateOfPointerTons1__IndexHash(soap, &this->ns1__ArrayOfIndexHash::IndexHashElement);
	/* transient soap skipped */
}

int ns1__ArrayOfIndexHash::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns1__ArrayOfIndexHash);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int ns1__ArrayOfIndexHash::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__ArrayOfIndexHash(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ArrayOfIndexHash(struct soap *soap, const char *tag, int id, const ns1__ArrayOfIndexHash *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__ArrayOfIndexHash), type))
		return soap->error;
	if (soap_out_std__vectorTemplateOfPointerTons1__IndexHash(soap, "IndexHashElement", -1, &(a->ns1__ArrayOfIndexHash::IndexHashElement), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__ArrayOfIndexHash::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__ArrayOfIndexHash(soap, this, tag, type);
}

SOAP_FMAC3 ns1__ArrayOfIndexHash * SOAP_FMAC4 soap_get_ns1__ArrayOfIndexHash(struct soap *soap, ns1__ArrayOfIndexHash *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__ArrayOfIndexHash(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *ns1__ArrayOfIndexHash::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__ArrayOfIndexHash(soap, tag, this, type);
}

SOAP_FMAC3 ns1__ArrayOfIndexHash * SOAP_FMAC4 soap_in_ns1__ArrayOfIndexHash(struct soap *soap, const char *tag, ns1__ArrayOfIndexHash *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__ArrayOfIndexHash *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__ArrayOfIndexHash, sizeof(ns1__ArrayOfIndexHash), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__ArrayOfIndexHash)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__ArrayOfIndexHash *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfPointerTons1__IndexHash(soap, "IndexHashElement", &(a->ns1__ArrayOfIndexHash::IndexHashElement), "ns1:IndexHash"))
					continue;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__ArrayOfIndexHash *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__ArrayOfIndexHash, 0, sizeof(ns1__ArrayOfIndexHash), 0, soap_copy_ns1__ArrayOfIndexHash);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 ns1__ArrayOfIndexHash * SOAP_FMAC6 soap_new_ns1__ArrayOfIndexHash(struct soap *soap, int n)
{	return soap_instantiate_ns1__ArrayOfIndexHash(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ns1__ArrayOfIndexHash(struct soap *soap, ns1__ArrayOfIndexHash *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 ns1__ArrayOfIndexHash * SOAP_FMAC4 soap_instantiate_ns1__ArrayOfIndexHash(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__ArrayOfIndexHash(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__ArrayOfIndexHash, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new ns1__ArrayOfIndexHash;
		if (size)
			*size = sizeof(ns1__ArrayOfIndexHash);
		((ns1__ArrayOfIndexHash*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new ns1__ArrayOfIndexHash[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns1__ArrayOfIndexHash);
		for (int i = 0; i < n; i++)
			((ns1__ArrayOfIndexHash*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns1__ArrayOfIndexHash*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__ArrayOfIndexHash(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__ArrayOfIndexHash %p -> %p\n", q, p));
	*(ns1__ArrayOfIndexHash*)p = *(ns1__ArrayOfIndexHash*)q;
}

void ns1__IndexHash::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_unsignedInt(soap, &this->ns1__IndexHash::RequestID);
	soap_default_std__string(soap, &this->ns1__IndexHash::Hash);
	soap_default_std__string(soap, &this->ns1__IndexHash::HashRoutine);
	soap_default_std__string(soap, &this->ns1__IndexHash::Charset);
	soap_default_unsignedInt(soap, &this->ns1__IndexHash::ChainLength);
	soap_default_unsignedInt(soap, &this->ns1__IndexHash::MinLetters);
	soap_default_unsignedInt(soap, &this->ns1__IndexHash::MaxLetters);
	soap_default_unsignedInt(soap, &this->ns1__IndexHash::Index);
	soap_default_std__string(soap, &this->ns1__IndexHash::Salt);
	soap_default_std__string(soap, &this->ns1__IndexHash::ExpireTime);
	/* transient soap skipped */
}

void ns1__IndexHash::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &this->ns1__IndexHash::Hash);
	soap_serialize_std__string(soap, &this->ns1__IndexHash::HashRoutine);
	soap_serialize_std__string(soap, &this->ns1__IndexHash::Charset);
	soap_serialize_std__string(soap, &this->ns1__IndexHash::Salt);
	soap_serialize_std__string(soap, &this->ns1__IndexHash::ExpireTime);
	/* transient soap skipped */
}

int ns1__IndexHash::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns1__IndexHash);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int ns1__IndexHash::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__IndexHash(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__IndexHash(struct soap *soap, const char *tag, int id, const ns1__IndexHash *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__IndexHash), type))
		return soap->error;
	if (soap_out_unsignedInt(soap, "RequestID", -1, &(a->ns1__IndexHash::RequestID), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Hash", -1, &(a->ns1__IndexHash::Hash), ""))
		return soap->error;
	if (soap_out_std__string(soap, "HashRoutine", -1, &(a->ns1__IndexHash::HashRoutine), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Charset", -1, &(a->ns1__IndexHash::Charset), ""))
		return soap->error;
	if (soap_out_unsignedInt(soap, "ChainLength", -1, &(a->ns1__IndexHash::ChainLength), ""))
		return soap->error;
	if (soap_out_unsignedInt(soap, "MinLetters", -1, &(a->ns1__IndexHash::MinLetters), ""))
		return soap->error;
	if (soap_out_unsignedInt(soap, "MaxLetters", -1, &(a->ns1__IndexHash::MaxLetters), ""))
		return soap->error;
	if (soap_out_unsignedInt(soap, "Index", -1, &(a->ns1__IndexHash::Index), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Salt", -1, &(a->ns1__IndexHash::Salt), ""))
		return soap->error;
	if (soap_out_std__string(soap, "ExpireTime", -1, &(a->ns1__IndexHash::ExpireTime), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__IndexHash::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__IndexHash(soap, this, tag, type);
}

SOAP_FMAC3 ns1__IndexHash * SOAP_FMAC4 soap_get_ns1__IndexHash(struct soap *soap, ns1__IndexHash *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__IndexHash(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *ns1__IndexHash::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__IndexHash(soap, tag, this, type);
}

SOAP_FMAC3 ns1__IndexHash * SOAP_FMAC4 soap_in_ns1__IndexHash(struct soap *soap, const char *tag, ns1__IndexHash *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__IndexHash *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__IndexHash, sizeof(ns1__IndexHash), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__IndexHash)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__IndexHash *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_RequestID1 = 1;
	size_t soap_flag_Hash1 = 1;
	size_t soap_flag_HashRoutine1 = 1;
	size_t soap_flag_Charset1 = 1;
	size_t soap_flag_ChainLength1 = 1;
	size_t soap_flag_MinLetters1 = 1;
	size_t soap_flag_MaxLetters1 = 1;
	size_t soap_flag_Index1 = 1;
	size_t soap_flag_Salt1 = 1;
	size_t soap_flag_ExpireTime1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_RequestID1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedInt(soap, "RequestID", &(a->ns1__IndexHash::RequestID), "xsd:unsignedInt"))
				{	soap_flag_RequestID1--;
					continue;
				}
			if (soap_flag_Hash1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Hash", &(a->ns1__IndexHash::Hash), "xsd:string"))
				{	soap_flag_Hash1--;
					continue;
				}
			if (soap_flag_HashRoutine1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "HashRoutine", &(a->ns1__IndexHash::HashRoutine), "xsd:string"))
				{	soap_flag_HashRoutine1--;
					continue;
				}
			if (soap_flag_Charset1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Charset", &(a->ns1__IndexHash::Charset), "xsd:string"))
				{	soap_flag_Charset1--;
					continue;
				}
			if (soap_flag_ChainLength1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedInt(soap, "ChainLength", &(a->ns1__IndexHash::ChainLength), "xsd:unsignedInt"))
				{	soap_flag_ChainLength1--;
					continue;
				}
			if (soap_flag_MinLetters1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedInt(soap, "MinLetters", &(a->ns1__IndexHash::MinLetters), "xsd:unsignedInt"))
				{	soap_flag_MinLetters1--;
					continue;
				}
			if (soap_flag_MaxLetters1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedInt(soap, "MaxLetters", &(a->ns1__IndexHash::MaxLetters), "xsd:unsignedInt"))
				{	soap_flag_MaxLetters1--;
					continue;
				}
			if (soap_flag_Index1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedInt(soap, "Index", &(a->ns1__IndexHash::Index), "xsd:unsignedInt"))
				{	soap_flag_Index1--;
					continue;
				}
			if (soap_flag_Salt1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Salt", &(a->ns1__IndexHash::Salt), "xsd:string"))
				{	soap_flag_Salt1--;
					continue;
				}
			if (soap_flag_ExpireTime1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "ExpireTime", &(a->ns1__IndexHash::ExpireTime), "xsd:string"))
				{	soap_flag_ExpireTime1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__IndexHash *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__IndexHash, 0, sizeof(ns1__IndexHash), 0, soap_copy_ns1__IndexHash);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_RequestID1 > 0 || soap_flag_Hash1 > 0 || soap_flag_HashRoutine1 > 0 || soap_flag_Charset1 > 0 || soap_flag_ChainLength1 > 0 || soap_flag_MinLetters1 > 0 || soap_flag_MaxLetters1 > 0 || soap_flag_Index1 > 0 || soap_flag_Salt1 > 0 || soap_flag_ExpireTime1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 ns1__IndexHash * SOAP_FMAC6 soap_new_ns1__IndexHash(struct soap *soap, int n)
{	return soap_instantiate_ns1__IndexHash(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ns1__IndexHash(struct soap *soap, ns1__IndexHash *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 ns1__IndexHash * SOAP_FMAC4 soap_instantiate_ns1__IndexHash(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__IndexHash(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__IndexHash, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new ns1__IndexHash;
		if (size)
			*size = sizeof(ns1__IndexHash);
		((ns1__IndexHash*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new ns1__IndexHash[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns1__IndexHash);
		for (int i = 0; i < n; i++)
			((ns1__IndexHash*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns1__IndexHash*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__IndexHash(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__IndexHash %p -> %p\n", q, p));
	*(ns1__IndexHash*)p = *(ns1__IndexHash*)q;
}

void ns1__ArrayOfWorkUnit::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__vectorTemplateOfPointerTons1__WorkUnit(soap, &this->ns1__ArrayOfWorkUnit::WorkUnitElement);
	/* transient soap skipped */
}

void ns1__ArrayOfWorkUnit::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__vectorTemplateOfPointerTons1__WorkUnit(soap, &this->ns1__ArrayOfWorkUnit::WorkUnitElement);
	/* transient soap skipped */
}

int ns1__ArrayOfWorkUnit::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns1__ArrayOfWorkUnit);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int ns1__ArrayOfWorkUnit::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__ArrayOfWorkUnit(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ArrayOfWorkUnit(struct soap *soap, const char *tag, int id, const ns1__ArrayOfWorkUnit *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__ArrayOfWorkUnit), type))
		return soap->error;
	if (soap_out_std__vectorTemplateOfPointerTons1__WorkUnit(soap, "WorkUnitElement", -1, &(a->ns1__ArrayOfWorkUnit::WorkUnitElement), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__ArrayOfWorkUnit::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__ArrayOfWorkUnit(soap, this, tag, type);
}

SOAP_FMAC3 ns1__ArrayOfWorkUnit * SOAP_FMAC4 soap_get_ns1__ArrayOfWorkUnit(struct soap *soap, ns1__ArrayOfWorkUnit *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__ArrayOfWorkUnit(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *ns1__ArrayOfWorkUnit::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__ArrayOfWorkUnit(soap, tag, this, type);
}

SOAP_FMAC3 ns1__ArrayOfWorkUnit * SOAP_FMAC4 soap_in_ns1__ArrayOfWorkUnit(struct soap *soap, const char *tag, ns1__ArrayOfWorkUnit *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__ArrayOfWorkUnit *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__ArrayOfWorkUnit, sizeof(ns1__ArrayOfWorkUnit), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__ArrayOfWorkUnit)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__ArrayOfWorkUnit *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfPointerTons1__WorkUnit(soap, "WorkUnitElement", &(a->ns1__ArrayOfWorkUnit::WorkUnitElement), "ns1:WorkUnit"))
					continue;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__ArrayOfWorkUnit *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__ArrayOfWorkUnit, 0, sizeof(ns1__ArrayOfWorkUnit), 0, soap_copy_ns1__ArrayOfWorkUnit);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 ns1__ArrayOfWorkUnit * SOAP_FMAC6 soap_new_ns1__ArrayOfWorkUnit(struct soap *soap, int n)
{	return soap_instantiate_ns1__ArrayOfWorkUnit(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ns1__ArrayOfWorkUnit(struct soap *soap, ns1__ArrayOfWorkUnit *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 ns1__ArrayOfWorkUnit * SOAP_FMAC4 soap_instantiate_ns1__ArrayOfWorkUnit(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__ArrayOfWorkUnit(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__ArrayOfWorkUnit, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new ns1__ArrayOfWorkUnit;
		if (size)
			*size = sizeof(ns1__ArrayOfWorkUnit);
		((ns1__ArrayOfWorkUnit*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new ns1__ArrayOfWorkUnit[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns1__ArrayOfWorkUnit);
		for (int i = 0; i < n; i++)
			((ns1__ArrayOfWorkUnit*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns1__ArrayOfWorkUnit*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__ArrayOfWorkUnit(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__ArrayOfWorkUnit %p -> %p\n", q, p));
	*(ns1__ArrayOfWorkUnit*)p = *(ns1__ArrayOfWorkUnit*)q;
}

void ns1__WorkUnit::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_unsignedInt(soap, &this->ns1__WorkUnit::PartID);
	soap_default_std__string(soap, &this->ns1__WorkUnit::HashRoutine);
	soap_default_std__string(soap, &this->ns1__WorkUnit::Charset);
	soap_default_unsignedInt(soap, &this->ns1__WorkUnit::MinLetters);
	soap_default_unsignedInt(soap, &this->ns1__WorkUnit::MaxLetters);
	soap_default_unsignedInt(soap, &this->ns1__WorkUnit::Index);
	soap_default_unsignedInt(soap, &this->ns1__WorkUnit::ChainLength);
	soap_default_unsignedInt(soap, &this->ns1__WorkUnit::ChainCount);
	soap_default_unsignedLONG64(soap, &this->ns1__WorkUnit::ChainStart);
	soap_default_std__string(soap, &this->ns1__WorkUnit::Salt);
	/* transient soap skipped */
}

void ns1__WorkUnit::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &this->ns1__WorkUnit::HashRoutine);
	soap_serialize_std__string(soap, &this->ns1__WorkUnit::Charset);
	soap_serialize_std__string(soap, &this->ns1__WorkUnit::Salt);
	/* transient soap skipped */
}

int ns1__WorkUnit::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns1__WorkUnit);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int ns1__WorkUnit::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__WorkUnit(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__WorkUnit(struct soap *soap, const char *tag, int id, const ns1__WorkUnit *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__WorkUnit), type))
		return soap->error;
	if (soap_out_unsignedInt(soap, "PartID", -1, &(a->ns1__WorkUnit::PartID), ""))
		return soap->error;
	if (soap_out_std__string(soap, "HashRoutine", -1, &(a->ns1__WorkUnit::HashRoutine), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Charset", -1, &(a->ns1__WorkUnit::Charset), ""))
		return soap->error;
	if (soap_out_unsignedInt(soap, "MinLetters", -1, &(a->ns1__WorkUnit::MinLetters), ""))
		return soap->error;
	if (soap_out_unsignedInt(soap, "MaxLetters", -1, &(a->ns1__WorkUnit::MaxLetters), ""))
		return soap->error;
	if (soap_out_unsignedInt(soap, "Index", -1, &(a->ns1__WorkUnit::Index), ""))
		return soap->error;
	if (soap_out_unsignedInt(soap, "ChainLength", -1, &(a->ns1__WorkUnit::ChainLength), ""))
		return soap->error;
	if (soap_out_unsignedInt(soap, "ChainCount", -1, &(a->ns1__WorkUnit::ChainCount), ""))
		return soap->error;
	if (soap_out_unsignedLONG64(soap, "ChainStart", -1, &(a->ns1__WorkUnit::ChainStart), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Salt", -1, &(a->ns1__WorkUnit::Salt), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__WorkUnit::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__WorkUnit(soap, this, tag, type);
}

SOAP_FMAC3 ns1__WorkUnit * SOAP_FMAC4 soap_get_ns1__WorkUnit(struct soap *soap, ns1__WorkUnit *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__WorkUnit(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *ns1__WorkUnit::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__WorkUnit(soap, tag, this, type);
}

SOAP_FMAC3 ns1__WorkUnit * SOAP_FMAC4 soap_in_ns1__WorkUnit(struct soap *soap, const char *tag, ns1__WorkUnit *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__WorkUnit *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__WorkUnit, sizeof(ns1__WorkUnit), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__WorkUnit)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__WorkUnit *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_PartID1 = 1;
	size_t soap_flag_HashRoutine1 = 1;
	size_t soap_flag_Charset1 = 1;
	size_t soap_flag_MinLetters1 = 1;
	size_t soap_flag_MaxLetters1 = 1;
	size_t soap_flag_Index1 = 1;
	size_t soap_flag_ChainLength1 = 1;
	size_t soap_flag_ChainCount1 = 1;
	size_t soap_flag_ChainStart1 = 1;
	size_t soap_flag_Salt1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_PartID1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedInt(soap, "PartID", &(a->ns1__WorkUnit::PartID), "xsd:unsignedInt"))
				{	soap_flag_PartID1--;
					continue;
				}
			if (soap_flag_HashRoutine1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "HashRoutine", &(a->ns1__WorkUnit::HashRoutine), "xsd:string"))
				{	soap_flag_HashRoutine1--;
					continue;
				}
			if (soap_flag_Charset1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Charset", &(a->ns1__WorkUnit::Charset), "xsd:string"))
				{	soap_flag_Charset1--;
					continue;
				}
			if (soap_flag_MinLetters1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedInt(soap, "MinLetters", &(a->ns1__WorkUnit::MinLetters), "xsd:unsignedInt"))
				{	soap_flag_MinLetters1--;
					continue;
				}
			if (soap_flag_MaxLetters1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedInt(soap, "MaxLetters", &(a->ns1__WorkUnit::MaxLetters), "xsd:unsignedInt"))
				{	soap_flag_MaxLetters1--;
					continue;
				}
			if (soap_flag_Index1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedInt(soap, "Index", &(a->ns1__WorkUnit::Index), "xsd:unsignedInt"))
				{	soap_flag_Index1--;
					continue;
				}
			if (soap_flag_ChainLength1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedInt(soap, "ChainLength", &(a->ns1__WorkUnit::ChainLength), "xsd:unsignedInt"))
				{	soap_flag_ChainLength1--;
					continue;
				}
			if (soap_flag_ChainCount1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedInt(soap, "ChainCount", &(a->ns1__WorkUnit::ChainCount), "xsd:unsignedInt"))
				{	soap_flag_ChainCount1--;
					continue;
				}
			if (soap_flag_ChainStart1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedLONG64(soap, "ChainStart", &(a->ns1__WorkUnit::ChainStart), "xsd:unsignedLong"))
				{	soap_flag_ChainStart1--;
					continue;
				}
			if (soap_flag_Salt1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Salt", &(a->ns1__WorkUnit::Salt), "xsd:string"))
				{	soap_flag_Salt1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__WorkUnit *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__WorkUnit, 0, sizeof(ns1__WorkUnit), 0, soap_copy_ns1__WorkUnit);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_PartID1 > 0 || soap_flag_HashRoutine1 > 0 || soap_flag_Charset1 > 0 || soap_flag_MinLetters1 > 0 || soap_flag_MaxLetters1 > 0 || soap_flag_Index1 > 0 || soap_flag_ChainLength1 > 0 || soap_flag_ChainCount1 > 0 || soap_flag_ChainStart1 > 0 || soap_flag_Salt1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 ns1__WorkUnit * SOAP_FMAC6 soap_new_ns1__WorkUnit(struct soap *soap, int n)
{	return soap_instantiate_ns1__WorkUnit(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ns1__WorkUnit(struct soap *soap, ns1__WorkUnit *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 ns1__WorkUnit * SOAP_FMAC4 soap_instantiate_ns1__WorkUnit(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__WorkUnit(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__WorkUnit, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new ns1__WorkUnit;
		if (size)
			*size = sizeof(ns1__WorkUnit);
		((ns1__WorkUnit*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new ns1__WorkUnit[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns1__WorkUnit);
		for (int i = 0; i < n; i++)
			((ns1__WorkUnit*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns1__WorkUnit*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__WorkUnit(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__WorkUnit %p -> %p\n", q, p));
	*(ns1__WorkUnit*)p = *(ns1__WorkUnit*)q;
}

void ns1__MachineInfo::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__MachineInfo::Credentials = NULL;
	soap_default_std__string(soap, &this->ns1__MachineInfo::Version);
	soap_default_std__string(soap, &this->ns1__MachineInfo::Hostname);
	soap_default_int(soap, &this->ns1__MachineInfo::SupportHybrid);
	this->ns1__MachineInfo::CPU = NULL;
	soap_default_int(soap, &this->ns1__MachineInfo::ClientID);
	/* transient soap skipped */
}

void ns1__MachineInfo::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTons1__Credentials(soap, &this->ns1__MachineInfo::Credentials);
	soap_serialize_std__string(soap, &this->ns1__MachineInfo::Version);
	soap_serialize_std__string(soap, &this->ns1__MachineInfo::Hostname);
	soap_serialize_PointerTons1__ArrayOfCPU(soap, &this->ns1__MachineInfo::CPU);
	/* transient soap skipped */
}

int ns1__MachineInfo::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns1__MachineInfo);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int ns1__MachineInfo::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__MachineInfo(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__MachineInfo(struct soap *soap, const char *tag, int id, const ns1__MachineInfo *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__MachineInfo), type))
		return soap->error;
	if (soap_out_PointerTons1__Credentials(soap, "Credentials", -1, &(a->ns1__MachineInfo::Credentials), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Version", -1, &(a->ns1__MachineInfo::Version), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Hostname", -1, &(a->ns1__MachineInfo::Hostname), ""))
		return soap->error;
	if (soap_out_int(soap, "SupportHybrid", -1, &(a->ns1__MachineInfo::SupportHybrid), ""))
		return soap->error;
	if (soap_out_PointerTons1__ArrayOfCPU(soap, "CPU", -1, &(a->ns1__MachineInfo::CPU), ""))
		return soap->error;
	if (soap_out_int(soap, "ClientID", -1, &(a->ns1__MachineInfo::ClientID), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__MachineInfo::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__MachineInfo(soap, this, tag, type);
}

SOAP_FMAC3 ns1__MachineInfo * SOAP_FMAC4 soap_get_ns1__MachineInfo(struct soap *soap, ns1__MachineInfo *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__MachineInfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *ns1__MachineInfo::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__MachineInfo(soap, tag, this, type);
}

SOAP_FMAC3 ns1__MachineInfo * SOAP_FMAC4 soap_in_ns1__MachineInfo(struct soap *soap, const char *tag, ns1__MachineInfo *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__MachineInfo *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__MachineInfo, sizeof(ns1__MachineInfo), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__MachineInfo)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__MachineInfo *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_Credentials1 = 1;
	size_t soap_flag_Version1 = 1;
	size_t soap_flag_Hostname1 = 1;
	size_t soap_flag_SupportHybrid1 = 1;
	size_t soap_flag_CPU1 = 1;
	size_t soap_flag_ClientID1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Credentials1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__Credentials(soap, "Credentials", &(a->ns1__MachineInfo::Credentials), "ns1:Credentials"))
				{	soap_flag_Credentials1--;
					continue;
				}
			if (soap_flag_Version1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Version", &(a->ns1__MachineInfo::Version), "xsd:string"))
				{	soap_flag_Version1--;
					continue;
				}
			if (soap_flag_Hostname1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Hostname", &(a->ns1__MachineInfo::Hostname), "xsd:string"))
				{	soap_flag_Hostname1--;
					continue;
				}
			if (soap_flag_SupportHybrid1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "SupportHybrid", &(a->ns1__MachineInfo::SupportHybrid), "xsd:int"))
				{	soap_flag_SupportHybrid1--;
					continue;
				}
			if (soap_flag_CPU1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__ArrayOfCPU(soap, "CPU", &(a->ns1__MachineInfo::CPU), "ns1:ArrayOfCPU"))
				{	soap_flag_CPU1--;
					continue;
				}
			if (soap_flag_ClientID1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ClientID", &(a->ns1__MachineInfo::ClientID), "xsd:int"))
				{	soap_flag_ClientID1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__MachineInfo *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__MachineInfo, 0, sizeof(ns1__MachineInfo), 0, soap_copy_ns1__MachineInfo);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_Credentials1 > 0 || soap_flag_Version1 > 0 || soap_flag_Hostname1 > 0 || soap_flag_SupportHybrid1 > 0 || soap_flag_CPU1 > 0 || soap_flag_ClientID1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 ns1__MachineInfo * SOAP_FMAC6 soap_new_ns1__MachineInfo(struct soap *soap, int n)
{	return soap_instantiate_ns1__MachineInfo(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ns1__MachineInfo(struct soap *soap, ns1__MachineInfo *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 ns1__MachineInfo * SOAP_FMAC4 soap_instantiate_ns1__MachineInfo(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__MachineInfo(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__MachineInfo, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new ns1__MachineInfo;
		if (size)
			*size = sizeof(ns1__MachineInfo);
		((ns1__MachineInfo*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new ns1__MachineInfo[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns1__MachineInfo);
		for (int i = 0; i < n; i++)
			((ns1__MachineInfo*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns1__MachineInfo*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__MachineInfo(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__MachineInfo %p -> %p\n", q, p));
	*(ns1__MachineInfo*)p = *(ns1__MachineInfo*)q;
}

void ns1__rtgenDetails::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->ns1__rtgenDetails::Version);
	soap_default_std__string(soap, &this->ns1__rtgenDetails::Architecture);
	/* transient soap skipped */
}

void ns1__rtgenDetails::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &this->ns1__rtgenDetails::Version);
	soap_serialize_std__string(soap, &this->ns1__rtgenDetails::Architecture);
	/* transient soap skipped */
}

int ns1__rtgenDetails::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns1__rtgenDetails);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int ns1__rtgenDetails::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__rtgenDetails(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__rtgenDetails(struct soap *soap, const char *tag, int id, const ns1__rtgenDetails *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__rtgenDetails), type))
		return soap->error;
	if (soap_out_std__string(soap, "Version", -1, &(a->ns1__rtgenDetails::Version), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Architecture", -1, &(a->ns1__rtgenDetails::Architecture), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__rtgenDetails::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__rtgenDetails(soap, this, tag, type);
}

SOAP_FMAC3 ns1__rtgenDetails * SOAP_FMAC4 soap_get_ns1__rtgenDetails(struct soap *soap, ns1__rtgenDetails *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__rtgenDetails(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *ns1__rtgenDetails::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__rtgenDetails(soap, tag, this, type);
}

SOAP_FMAC3 ns1__rtgenDetails * SOAP_FMAC4 soap_in_ns1__rtgenDetails(struct soap *soap, const char *tag, ns1__rtgenDetails *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__rtgenDetails *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__rtgenDetails, sizeof(ns1__rtgenDetails), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__rtgenDetails)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__rtgenDetails *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_Version1 = 1;
	size_t soap_flag_Architecture1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Version1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Version", &(a->ns1__rtgenDetails::Version), "xsd:string"))
				{	soap_flag_Version1--;
					continue;
				}
			if (soap_flag_Architecture1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Architecture", &(a->ns1__rtgenDetails::Architecture), "xsd:string"))
				{	soap_flag_Architecture1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__rtgenDetails *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__rtgenDetails, 0, sizeof(ns1__rtgenDetails), 0, soap_copy_ns1__rtgenDetails);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_Version1 > 0 || soap_flag_Architecture1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 ns1__rtgenDetails * SOAP_FMAC6 soap_new_ns1__rtgenDetails(struct soap *soap, int n)
{	return soap_instantiate_ns1__rtgenDetails(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ns1__rtgenDetails(struct soap *soap, ns1__rtgenDetails *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 ns1__rtgenDetails * SOAP_FMAC4 soap_instantiate_ns1__rtgenDetails(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__rtgenDetails(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__rtgenDetails, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new ns1__rtgenDetails;
		if (size)
			*size = sizeof(ns1__rtgenDetails);
		((ns1__rtgenDetails*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new ns1__rtgenDetails[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns1__rtgenDetails);
		for (int i = 0; i < n; i++)
			((ns1__rtgenDetails*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns1__rtgenDetails*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__rtgenDetails(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__rtgenDetails %p -> %p\n", q, p));
	*(ns1__rtgenDetails*)p = *(ns1__rtgenDetails*)q;
}

void ns1__ArrayOfCPU::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__vectorTemplateOfPointerTons1__CPU(soap, &this->ns1__ArrayOfCPU::CPUElement);
	/* transient soap skipped */
}

void ns1__ArrayOfCPU::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__vectorTemplateOfPointerTons1__CPU(soap, &this->ns1__ArrayOfCPU::CPUElement);
	/* transient soap skipped */
}

int ns1__ArrayOfCPU::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns1__ArrayOfCPU);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int ns1__ArrayOfCPU::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__ArrayOfCPU(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ArrayOfCPU(struct soap *soap, const char *tag, int id, const ns1__ArrayOfCPU *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__ArrayOfCPU), type))
		return soap->error;
	if (soap_out_std__vectorTemplateOfPointerTons1__CPU(soap, "CPUElement", -1, &(a->ns1__ArrayOfCPU::CPUElement), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__ArrayOfCPU::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__ArrayOfCPU(soap, this, tag, type);
}

SOAP_FMAC3 ns1__ArrayOfCPU * SOAP_FMAC4 soap_get_ns1__ArrayOfCPU(struct soap *soap, ns1__ArrayOfCPU *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__ArrayOfCPU(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *ns1__ArrayOfCPU::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__ArrayOfCPU(soap, tag, this, type);
}

SOAP_FMAC3 ns1__ArrayOfCPU * SOAP_FMAC4 soap_in_ns1__ArrayOfCPU(struct soap *soap, const char *tag, ns1__ArrayOfCPU *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__ArrayOfCPU *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__ArrayOfCPU, sizeof(ns1__ArrayOfCPU), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__ArrayOfCPU)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__ArrayOfCPU *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfPointerTons1__CPU(soap, "CPUElement", &(a->ns1__ArrayOfCPU::CPUElement), "ns1:CPU"))
					continue;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__ArrayOfCPU *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__ArrayOfCPU, 0, sizeof(ns1__ArrayOfCPU), 0, soap_copy_ns1__ArrayOfCPU);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 ns1__ArrayOfCPU * SOAP_FMAC6 soap_new_ns1__ArrayOfCPU(struct soap *soap, int n)
{	return soap_instantiate_ns1__ArrayOfCPU(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ns1__ArrayOfCPU(struct soap *soap, ns1__ArrayOfCPU *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 ns1__ArrayOfCPU * SOAP_FMAC4 soap_instantiate_ns1__ArrayOfCPU(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__ArrayOfCPU(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__ArrayOfCPU, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new ns1__ArrayOfCPU;
		if (size)
			*size = sizeof(ns1__ArrayOfCPU);
		((ns1__ArrayOfCPU*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new ns1__ArrayOfCPU[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns1__ArrayOfCPU);
		for (int i = 0; i < n; i++)
			((ns1__ArrayOfCPU*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns1__ArrayOfCPU*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__ArrayOfCPU(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__ArrayOfCPU %p -> %p\n", q, p));
	*(ns1__ArrayOfCPU*)p = *(ns1__ArrayOfCPU*)q;
}

void ns1__CPU::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->ns1__CPU::Architecture);
	soap_default_int(soap, &this->ns1__CPU::CurrentSpeed);
	soap_default_int(soap, &this->ns1__CPU::MaxSpeed);
	soap_default_int(soap, &this->ns1__CPU::NumCores);
	/* transient soap skipped */
}

void ns1__CPU::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &this->ns1__CPU::Architecture);
	/* transient soap skipped */
}

int ns1__CPU::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns1__CPU);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int ns1__CPU::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__CPU(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__CPU(struct soap *soap, const char *tag, int id, const ns1__CPU *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__CPU), type))
		return soap->error;
	if (soap_out_std__string(soap, "Architecture", -1, &(a->ns1__CPU::Architecture), ""))
		return soap->error;
	if (soap_out_int(soap, "CurrentSpeed", -1, &(a->ns1__CPU::CurrentSpeed), ""))
		return soap->error;
	if (soap_out_int(soap, "MaxSpeed", -1, &(a->ns1__CPU::MaxSpeed), ""))
		return soap->error;
	if (soap_out_int(soap, "NumCores", -1, &(a->ns1__CPU::NumCores), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__CPU::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__CPU(soap, this, tag, type);
}

SOAP_FMAC3 ns1__CPU * SOAP_FMAC4 soap_get_ns1__CPU(struct soap *soap, ns1__CPU *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__CPU(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *ns1__CPU::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__CPU(soap, tag, this, type);
}

SOAP_FMAC3 ns1__CPU * SOAP_FMAC4 soap_in_ns1__CPU(struct soap *soap, const char *tag, ns1__CPU *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__CPU *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__CPU, sizeof(ns1__CPU), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__CPU)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__CPU *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_Architecture1 = 1;
	size_t soap_flag_CurrentSpeed1 = 1;
	size_t soap_flag_MaxSpeed1 = 1;
	size_t soap_flag_NumCores1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Architecture1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Architecture", &(a->ns1__CPU::Architecture), "xsd:string"))
				{	soap_flag_Architecture1--;
					continue;
				}
			if (soap_flag_CurrentSpeed1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "CurrentSpeed", &(a->ns1__CPU::CurrentSpeed), "xsd:int"))
				{	soap_flag_CurrentSpeed1--;
					continue;
				}
			if (soap_flag_MaxSpeed1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "MaxSpeed", &(a->ns1__CPU::MaxSpeed), "xsd:int"))
				{	soap_flag_MaxSpeed1--;
					continue;
				}
			if (soap_flag_NumCores1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "NumCores", &(a->ns1__CPU::NumCores), "xsd:int"))
				{	soap_flag_NumCores1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__CPU *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__CPU, 0, sizeof(ns1__CPU), 0, soap_copy_ns1__CPU);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_Architecture1 > 0 || soap_flag_CurrentSpeed1 > 0 || soap_flag_MaxSpeed1 > 0 || soap_flag_NumCores1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 ns1__CPU * SOAP_FMAC6 soap_new_ns1__CPU(struct soap *soap, int n)
{	return soap_instantiate_ns1__CPU(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ns1__CPU(struct soap *soap, ns1__CPU *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 ns1__CPU * SOAP_FMAC4 soap_instantiate_ns1__CPU(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__CPU(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__CPU, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new ns1__CPU;
		if (size)
			*size = sizeof(ns1__CPU);
		((ns1__CPU*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new ns1__CPU[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns1__CPU);
		for (int i = 0; i < n; i++)
			((ns1__CPU*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns1__CPU*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__CPU(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__CPU %p -> %p\n", q, p));
	*(ns1__CPU*)p = *(ns1__CPU*)q;
}

void ns1__Credentials::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->ns1__Credentials::Username);
	soap_default_std__string(soap, &this->ns1__Credentials::Password);
	/* transient soap skipped */
}

void ns1__Credentials::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &this->ns1__Credentials::Username);
	soap_serialize_std__string(soap, &this->ns1__Credentials::Password);
	/* transient soap skipped */
}

int ns1__Credentials::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns1__Credentials);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int ns1__Credentials::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__Credentials(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__Credentials(struct soap *soap, const char *tag, int id, const ns1__Credentials *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__Credentials), type))
		return soap->error;
	if (soap_out_std__string(soap, "Username", -1, &(a->ns1__Credentials::Username), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Password", -1, &(a->ns1__Credentials::Password), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__Credentials::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__Credentials(soap, this, tag, type);
}

SOAP_FMAC3 ns1__Credentials * SOAP_FMAC4 soap_get_ns1__Credentials(struct soap *soap, ns1__Credentials *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__Credentials(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *ns1__Credentials::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__Credentials(soap, tag, this, type);
}

SOAP_FMAC3 ns1__Credentials * SOAP_FMAC4 soap_in_ns1__Credentials(struct soap *soap, const char *tag, ns1__Credentials *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__Credentials *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__Credentials, sizeof(ns1__Credentials), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__Credentials)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__Credentials *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_Username1 = 1;
	size_t soap_flag_Password1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Username1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Username", &(a->ns1__Credentials::Username), "xsd:string"))
				{	soap_flag_Username1--;
					continue;
				}
			if (soap_flag_Password1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Password", &(a->ns1__Credentials::Password), "xsd:string"))
				{	soap_flag_Password1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__Credentials *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__Credentials, 0, sizeof(ns1__Credentials), 0, soap_copy_ns1__Credentials);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_Username1 > 0 || soap_flag_Password1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 ns1__Credentials * SOAP_FMAC6 soap_new_ns1__Credentials(struct soap *soap, int n)
{	return soap_instantiate_ns1__Credentials(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ns1__Credentials(struct soap *soap, ns1__Credentials *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 ns1__Credentials * SOAP_FMAC4 soap_instantiate_ns1__Credentials(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__Credentials(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__Credentials, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new ns1__Credentials;
		if (size)
			*size = sizeof(ns1__Credentials);
		((ns1__Credentials*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new ns1__Credentials[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns1__Credentials);
		for (int i = 0; i < n; i++)
			((ns1__Credentials*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns1__Credentials*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__Credentials(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__Credentials %p -> %p\n", q, p));
	*(ns1__Credentials*)p = *(ns1__Credentials*)q;
}

void xsd__base64Binary::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->__size = 0;
	this->__ptr = NULL;
	this->id = NULL;
	this->type = NULL;
	this->options = NULL;
}

void xsd__base64Binary::soap_serialize(struct soap *soap) const
{
	if (this->__ptr && !soap_array_reference(soap, this, (struct soap_array*)&this->__ptr, 1, SOAP_TYPE_xsd__base64Binary))
		if (this->id || this->type)
			soap->mode |= SOAP_ENC_DIME;
}

int xsd__base64Binary::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, (struct soap_array*)&this->__ptr, 1, tag, SOAP_TYPE_xsd__base64Binary);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int xsd__base64Binary::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{	return soap_out_xsd__base64Binary(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__base64Binary(struct soap *soap, const char *tag, int id, const xsd__base64Binary *a, const char *type)
{
#ifndef WITH_LEANER
	id = soap_attachment(soap, tag, id, a, (struct soap_array*)&a->__ptr, a->id, a->type, a->options, 1, type, SOAP_TYPE_xsd__base64Binary);
#else
	id = soap_element_id(soap, tag, id, a, (struct soap_array*)&a->__ptr, 1, type, SOAP_TYPE_xsd__base64Binary);
#endif
	if (id < 0)
		return soap->error;
	if (soap_element_begin_out(soap, tag, id, type))
		return soap->error;
	if (soap_putbase64(soap, a->__ptr, a->__size))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *xsd__base64Binary::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__base64Binary(soap, this, tag, type);
}

SOAP_FMAC3 xsd__base64Binary * SOAP_FMAC4 soap_get_xsd__base64Binary(struct soap *soap, xsd__base64Binary *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__base64Binary(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *xsd__base64Binary::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__base64Binary(soap, tag, this, type);
}

SOAP_FMAC3 xsd__base64Binary * SOAP_FMAC4 soap_in_xsd__base64Binary(struct soap *soap, const char *tag, xsd__base64Binary *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type) && soap_match_tag(soap, soap->type, ":base64Binary") && soap_match_tag(soap, soap->type, ":base64"))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (xsd__base64Binary *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__base64Binary, sizeof(xsd__base64Binary), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
		a->soap_default(soap);
	if (soap->body && !*soap->href)
	{
		a->__ptr = soap_getbase64(soap, &a->__size, 0);
#ifndef WITH_LEANER
		if (soap_xop_forward(soap, &a->__ptr, &a->__size, &a->id, &a->type, &a->options))
			return NULL;
#endif
		if ((!a->__ptr && soap->error) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	
#ifndef WITH_LEANER
		if (*soap->href != '#')
		{	if (soap_dime_forward(soap, &a->__ptr, &a->__size, &a->id, &a->type, &a->options))
				return NULL;
		}
		else
#endif
			a = (xsd__base64Binary *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_xsd__base64Binary, 0, sizeof(xsd__base64Binary), 0, soap_copy_xsd__base64Binary);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 xsd__base64Binary * SOAP_FMAC6 soap_new_xsd__base64Binary(struct soap *soap, int n)
{	return soap_instantiate_xsd__base64Binary(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_xsd__base64Binary(struct soap *soap, xsd__base64Binary *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 xsd__base64Binary * SOAP_FMAC4 soap_instantiate_xsd__base64Binary(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__base64Binary(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__base64Binary, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new xsd__base64Binary;
		if (size)
			*size = sizeof(xsd__base64Binary);
		((xsd__base64Binary*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new xsd__base64Binary[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(xsd__base64Binary);
		for (int i = 0; i < n; i++)
			((xsd__base64Binary*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (xsd__base64Binary*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__base64Binary(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__base64Binary %p -> %p\n", q, p));
	*(xsd__base64Binary*)p = *(xsd__base64Binary*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->faultcode);
	soap_serialize_string(soap, &a->faultstring);
	soap_serialize_string(soap, &a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, &a->SOAP_ENV__Node);
	soap_serialize_string(soap, &a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Fault);
	if (soap_out_SOAP_ENV__Fault(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Fault), type))
		return soap->error;
	if (soap_out__QName(soap, "faultcode", -1, (char*const*)&soap_tmp_faultcode, ""))
		return soap->error;
	if (soap_out_string(soap, "faultstring", -1, &a->faultstring, ""))
		return soap->error;
	if (soap_out_string(soap, "faultactor", -1, &a->faultactor, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Node", -1, &a->SOAP_ENV__Node, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Role", -1, &a->SOAP_ENV__Role, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	size_t soap_flag_faultcode = 1;
	size_t soap_flag_faultstring = 1;
	size_t soap_flag_faultactor = 1;
	size_t soap_flag_detail = 1;
	size_t soap_flag_SOAP_ENV__Code = 1;
	size_t soap_flag_SOAP_ENV__Reason = 1;
	size_t soap_flag_SOAP_ENV__Node = 1;
	size_t soap_flag_SOAP_ENV__Role = 1;
	size_t soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Fault *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "faultcode", &a->faultcode, ""))
				{	soap_flag_faultcode--;
					continue;
				}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultstring", &a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultactor", &a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Node", &a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Role", &a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Fault, 0, sizeof(struct SOAP_ENV__Fault), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct SOAP_ENV__Fault * SOAP_FMAC6 soap_new_SOAP_ENV__Fault(struct soap *soap, int n)
{	return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Fault, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SOAP_ENV__Fault;
		if (size)
			*size = sizeof(struct SOAP_ENV__Fault);
	}
	else
	{	cp->ptr = (void*)new struct SOAP_ENV__Fault[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Fault);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Fault*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Fault %p -> %p\n", q, p));
	*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Reason);
	if (soap_out_SOAP_ENV__Reason(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Reason), type))
		return soap->error;
	if (soap->lang)
		soap_set_attr(soap, "xml:lang", soap->lang);
	if (soap_out_string(soap, "SOAP-ENV:Text", -1, &a->SOAP_ENV__Text, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Reason *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Text", &a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Reason, 0, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct SOAP_ENV__Reason * SOAP_FMAC6 soap_new_SOAP_ENV__Reason(struct soap *soap, int n)
{	return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Reason, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SOAP_ENV__Reason;
		if (size)
			*size = sizeof(struct SOAP_ENV__Reason);
	}
	else
	{	cp->ptr = (void*)new struct SOAP_ENV__Reason[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Reason);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Reason*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Reason %p -> %p\n", q, p));
	*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__type = 0;
	a->fault = NULL;
	a->__any = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_markelement(soap, a->fault, a->__type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Detail);
	if (soap_out_SOAP_ENV__Detail(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Detail), type))
		return soap->error;
	if (soap_putelement(soap, a->fault, "fault", -1, a->__type))
		return soap->error;
	soap_outliteral(soap, "-any", &a->__any, NULL);
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	size_t soap_flag_fault = 1;
	size_t soap_flag___any = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Detail *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
				if ((a->fault = soap_getelement(soap, &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", &a->__any))
				{	soap_flag___any--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Detail, 0, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct SOAP_ENV__Detail * SOAP_FMAC6 soap_new_SOAP_ENV__Detail(struct soap *soap, int n)
{	return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Detail, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SOAP_ENV__Detail;
		if (size)
			*size = sizeof(struct SOAP_ENV__Detail);
	}
	else
	{	cp->ptr = (void*)new struct SOAP_ENV__Detail[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Detail);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Detail*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Detail %p -> %p\n", q, p));
	*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Code);
	if (soap_out_SOAP_ENV__Code(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Code), type))
		return soap->error;
	if (soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)&soap_tmp_SOAP_ENV__Value, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Value = 1;
	size_t soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Code *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "SOAP-ENV:Value", &a->SOAP_ENV__Value, ""))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Code, 0, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct SOAP_ENV__Code * SOAP_FMAC6 soap_new_SOAP_ENV__Code(struct soap *soap, int n)
{	return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Code, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SOAP_ENV__Code;
		if (size)
			*size = sizeof(struct SOAP_ENV__Code);
	}
	else
	{	cp->ptr = (void*)new struct SOAP_ENV__Code[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Code);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Code*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Code %p -> %p\n", q, p));
	*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Header);
	if (soap_out_SOAP_ENV__Header(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Header), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Header *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Header, 0, sizeof(struct SOAP_ENV__Header), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct SOAP_ENV__Header * SOAP_FMAC6 soap_new_SOAP_ENV__Header(struct soap *soap, int n)
{	return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Header, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SOAP_ENV__Header;
		if (size)
			*size = sizeof(struct SOAP_ENV__Header);
	}
	else
	{	cp->ptr = (void*)new struct SOAP_ENV__Header[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Header);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Header*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Header %p -> %p\n", q, p));
	*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__RequestDetailedCrackingInfo(struct soap *soap, struct ns1__RequestDetailedCrackingInfo *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->RequestID);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__RequestDetailedCrackingInfo(struct soap *soap, const struct ns1__RequestDetailedCrackingInfo *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__RequestDetailedCrackingInfo(struct soap *soap, const struct ns1__RequestDetailedCrackingInfo *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns1__RequestDetailedCrackingInfo);
	if (soap_out_ns1__RequestDetailedCrackingInfo(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__RequestDetailedCrackingInfo(struct soap *soap, const char *tag, int id, const struct ns1__RequestDetailedCrackingInfo *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__RequestDetailedCrackingInfo), type))
		return soap->error;
	if (soap_out_int(soap, "RequestID", -1, &a->RequestID, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__RequestDetailedCrackingInfo * SOAP_FMAC4 soap_get_ns1__RequestDetailedCrackingInfo(struct soap *soap, struct ns1__RequestDetailedCrackingInfo *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__RequestDetailedCrackingInfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct ns1__RequestDetailedCrackingInfo * SOAP_FMAC4 soap_in_ns1__RequestDetailedCrackingInfo(struct soap *soap, const char *tag, struct ns1__RequestDetailedCrackingInfo *a, const char *type)
{
	size_t soap_flag_RequestID = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns1__RequestDetailedCrackingInfo *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__RequestDetailedCrackingInfo, sizeof(struct ns1__RequestDetailedCrackingInfo), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns1__RequestDetailedCrackingInfo(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_RequestID && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "RequestID", &a->RequestID, "xsd:int"))
				{	soap_flag_RequestID--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns1__RequestDetailedCrackingInfo *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__RequestDetailedCrackingInfo, 0, sizeof(struct ns1__RequestDetailedCrackingInfo), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_RequestID > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 struct ns1__RequestDetailedCrackingInfo * SOAP_FMAC6 soap_new_ns1__RequestDetailedCrackingInfo(struct soap *soap, int n)
{	return soap_instantiate_ns1__RequestDetailedCrackingInfo(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ns1__RequestDetailedCrackingInfo(struct soap *soap, struct ns1__RequestDetailedCrackingInfo *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct ns1__RequestDetailedCrackingInfo * SOAP_FMAC4 soap_instantiate_ns1__RequestDetailedCrackingInfo(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__RequestDetailedCrackingInfo(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__RequestDetailedCrackingInfo, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct ns1__RequestDetailedCrackingInfo;
		if (size)
			*size = sizeof(struct ns1__RequestDetailedCrackingInfo);
	}
	else
	{	cp->ptr = (void*)new struct ns1__RequestDetailedCrackingInfo[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns1__RequestDetailedCrackingInfo);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns1__RequestDetailedCrackingInfo*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__RequestDetailedCrackingInfo(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns1__RequestDetailedCrackingInfo %p -> %p\n", q, p));
	*(struct ns1__RequestDetailedCrackingInfo*)p = *(struct ns1__RequestDetailedCrackingInfo*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__RequestDetailedCrackingInfoResponse(struct soap *soap, struct ns1__RequestDetailedCrackingInfoResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->HashStatus = NULL;
	soap_default_int(soap, &a->ErrorCode);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__RequestDetailedCrackingInfoResponse(struct soap *soap, const struct ns1__RequestDetailedCrackingInfoResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTons1__ArrayOfRainbowTableStatus(soap, &a->HashStatus);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__RequestDetailedCrackingInfoResponse(struct soap *soap, const struct ns1__RequestDetailedCrackingInfoResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns1__RequestDetailedCrackingInfoResponse);
	if (soap_out_ns1__RequestDetailedCrackingInfoResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__RequestDetailedCrackingInfoResponse(struct soap *soap, const char *tag, int id, const struct ns1__RequestDetailedCrackingInfoResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__RequestDetailedCrackingInfoResponse), type))
		return soap->error;
	if (soap_out_PointerTons1__ArrayOfRainbowTableStatus(soap, "HashStatus", -1, &a->HashStatus, ""))
		return soap->error;
	if (soap_out_int(soap, "ErrorCode", -1, &a->ErrorCode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__RequestDetailedCrackingInfoResponse * SOAP_FMAC4 soap_get_ns1__RequestDetailedCrackingInfoResponse(struct soap *soap, struct ns1__RequestDetailedCrackingInfoResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__RequestDetailedCrackingInfoResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct ns1__RequestDetailedCrackingInfoResponse * SOAP_FMAC4 soap_in_ns1__RequestDetailedCrackingInfoResponse(struct soap *soap, const char *tag, struct ns1__RequestDetailedCrackingInfoResponse *a, const char *type)
{
	size_t soap_flag_HashStatus = 1;
	size_t soap_flag_ErrorCode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns1__RequestDetailedCrackingInfoResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__RequestDetailedCrackingInfoResponse, sizeof(struct ns1__RequestDetailedCrackingInfoResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns1__RequestDetailedCrackingInfoResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_HashStatus && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__ArrayOfRainbowTableStatus(soap, "HashStatus", &a->HashStatus, "ns1:ArrayOfRainbowTableStatus"))
				{	soap_flag_HashStatus--;
					continue;
				}
			if (soap_flag_ErrorCode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ErrorCode", &a->ErrorCode, "xsd:int"))
				{	soap_flag_ErrorCode--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns1__RequestDetailedCrackingInfoResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__RequestDetailedCrackingInfoResponse, 0, sizeof(struct ns1__RequestDetailedCrackingInfoResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_ErrorCode > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 struct ns1__RequestDetailedCrackingInfoResponse * SOAP_FMAC6 soap_new_ns1__RequestDetailedCrackingInfoResponse(struct soap *soap, int n)
{	return soap_instantiate_ns1__RequestDetailedCrackingInfoResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ns1__RequestDetailedCrackingInfoResponse(struct soap *soap, struct ns1__RequestDetailedCrackingInfoResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct ns1__RequestDetailedCrackingInfoResponse * SOAP_FMAC4 soap_instantiate_ns1__RequestDetailedCrackingInfoResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__RequestDetailedCrackingInfoResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__RequestDetailedCrackingInfoResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct ns1__RequestDetailedCrackingInfoResponse;
		if (size)
			*size = sizeof(struct ns1__RequestDetailedCrackingInfoResponse);
	}
	else
	{	cp->ptr = (void*)new struct ns1__RequestDetailedCrackingInfoResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns1__RequestDetailedCrackingInfoResponse);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns1__RequestDetailedCrackingInfoResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__RequestDetailedCrackingInfoResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns1__RequestDetailedCrackingInfoResponse %p -> %p\n", q, p));
	*(struct ns1__RequestDetailedCrackingInfoResponse*)p = *(struct ns1__RequestDetailedCrackingInfoResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__ReportError(struct soap *soap, struct ns1__ReportError *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->MachineInfo = NULL;
	soap_default_std__string(soap, &a->ErrorString);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__ReportError(struct soap *soap, const struct ns1__ReportError *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTons1__MachineInfo(soap, &a->MachineInfo);
	soap_serialize_std__string(soap, &a->ErrorString);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__ReportError(struct soap *soap, const struct ns1__ReportError *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns1__ReportError);
	if (soap_out_ns1__ReportError(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ReportError(struct soap *soap, const char *tag, int id, const struct ns1__ReportError *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__ReportError), type))
		return soap->error;
	if (soap_out_PointerTons1__MachineInfo(soap, "MachineInfo", -1, &a->MachineInfo, ""))
		return soap->error;
	if (soap_out_std__string(soap, "ErrorString", -1, &a->ErrorString, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__ReportError * SOAP_FMAC4 soap_get_ns1__ReportError(struct soap *soap, struct ns1__ReportError *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__ReportError(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct ns1__ReportError * SOAP_FMAC4 soap_in_ns1__ReportError(struct soap *soap, const char *tag, struct ns1__ReportError *a, const char *type)
{
	size_t soap_flag_MachineInfo = 1;
	size_t soap_flag_ErrorString = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns1__ReportError *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__ReportError, sizeof(struct ns1__ReportError), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns1__ReportError(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_MachineInfo && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__MachineInfo(soap, "MachineInfo", &a->MachineInfo, "ns1:MachineInfo"))
				{	soap_flag_MachineInfo--;
					continue;
				}
			if (soap_flag_ErrorString && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "ErrorString", &a->ErrorString, "xsd:string"))
				{	soap_flag_ErrorString--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns1__ReportError *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__ReportError, 0, sizeof(struct ns1__ReportError), 0, soap_copy_ns1__ReportError);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_ErrorString > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 struct ns1__ReportError * SOAP_FMAC6 soap_new_ns1__ReportError(struct soap *soap, int n)
{	return soap_instantiate_ns1__ReportError(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ns1__ReportError(struct soap *soap, struct ns1__ReportError *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct ns1__ReportError * SOAP_FMAC4 soap_instantiate_ns1__ReportError(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__ReportError(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__ReportError, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct ns1__ReportError;
		if (size)
			*size = sizeof(struct ns1__ReportError);
	}
	else
	{	cp->ptr = (void*)new struct ns1__ReportError[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns1__ReportError);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns1__ReportError*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__ReportError(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns1__ReportError %p -> %p\n", q, p));
	*(struct ns1__ReportError*)p = *(struct ns1__ReportError*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__ReportErrorResponse(struct soap *soap, struct ns1__ReportErrorResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->ErrorCode);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__ReportErrorResponse(struct soap *soap, const struct ns1__ReportErrorResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__ReportErrorResponse(struct soap *soap, const struct ns1__ReportErrorResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns1__ReportErrorResponse);
	if (soap_out_ns1__ReportErrorResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ReportErrorResponse(struct soap *soap, const char *tag, int id, const struct ns1__ReportErrorResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__ReportErrorResponse), type))
		return soap->error;
	if (soap_out_int(soap, "ErrorCode", -1, &a->ErrorCode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__ReportErrorResponse * SOAP_FMAC4 soap_get_ns1__ReportErrorResponse(struct soap *soap, struct ns1__ReportErrorResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__ReportErrorResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct ns1__ReportErrorResponse * SOAP_FMAC4 soap_in_ns1__ReportErrorResponse(struct soap *soap, const char *tag, struct ns1__ReportErrorResponse *a, const char *type)
{
	size_t soap_flag_ErrorCode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns1__ReportErrorResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__ReportErrorResponse, sizeof(struct ns1__ReportErrorResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns1__ReportErrorResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ErrorCode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ErrorCode", &a->ErrorCode, "xsd:int"))
				{	soap_flag_ErrorCode--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns1__ReportErrorResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__ReportErrorResponse, 0, sizeof(struct ns1__ReportErrorResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_ErrorCode > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 struct ns1__ReportErrorResponse * SOAP_FMAC6 soap_new_ns1__ReportErrorResponse(struct soap *soap, int n)
{	return soap_instantiate_ns1__ReportErrorResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ns1__ReportErrorResponse(struct soap *soap, struct ns1__ReportErrorResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct ns1__ReportErrorResponse * SOAP_FMAC4 soap_instantiate_ns1__ReportErrorResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__ReportErrorResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__ReportErrorResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct ns1__ReportErrorResponse;
		if (size)
			*size = sizeof(struct ns1__ReportErrorResponse);
	}
	else
	{	cp->ptr = (void*)new struct ns1__ReportErrorResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns1__ReportErrorResponse);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns1__ReportErrorResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__ReportErrorResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns1__ReportErrorResponse %p -> %p\n", q, p));
	*(struct ns1__ReportErrorResponse*)p = *(struct ns1__ReportErrorResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__SendChainCheckResult(struct soap *soap, struct ns1__SendChainCheckResult *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->MachineInfo = NULL;
	soap_default_unsignedInt(soap, &a->RequestID);
	soap_default_std__string(soap, &a->Password);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__SendChainCheckResult(struct soap *soap, const struct ns1__SendChainCheckResult *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTons1__MachineInfo(soap, &a->MachineInfo);
	soap_serialize_std__string(soap, &a->Password);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__SendChainCheckResult(struct soap *soap, const struct ns1__SendChainCheckResult *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns1__SendChainCheckResult);
	if (soap_out_ns1__SendChainCheckResult(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SendChainCheckResult(struct soap *soap, const char *tag, int id, const struct ns1__SendChainCheckResult *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__SendChainCheckResult), type))
		return soap->error;
	if (soap_out_PointerTons1__MachineInfo(soap, "MachineInfo", -1, &a->MachineInfo, ""))
		return soap->error;
	if (soap_out_unsignedInt(soap, "RequestID", -1, &a->RequestID, ""))
		return soap->error;
	if (soap_out_std__string(soap, "Password", -1, &a->Password, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__SendChainCheckResult * SOAP_FMAC4 soap_get_ns1__SendChainCheckResult(struct soap *soap, struct ns1__SendChainCheckResult *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__SendChainCheckResult(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct ns1__SendChainCheckResult * SOAP_FMAC4 soap_in_ns1__SendChainCheckResult(struct soap *soap, const char *tag, struct ns1__SendChainCheckResult *a, const char *type)
{
	size_t soap_flag_MachineInfo = 1;
	size_t soap_flag_RequestID = 1;
	size_t soap_flag_Password = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns1__SendChainCheckResult *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__SendChainCheckResult, sizeof(struct ns1__SendChainCheckResult), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns1__SendChainCheckResult(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_MachineInfo && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__MachineInfo(soap, "MachineInfo", &a->MachineInfo, "ns1:MachineInfo"))
				{	soap_flag_MachineInfo--;
					continue;
				}
			if (soap_flag_RequestID && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedInt(soap, "RequestID", &a->RequestID, "xsd:unsignedInt"))
				{	soap_flag_RequestID--;
					continue;
				}
			if (soap_flag_Password && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Password", &a->Password, "xsd:string"))
				{	soap_flag_Password--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns1__SendChainCheckResult *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__SendChainCheckResult, 0, sizeof(struct ns1__SendChainCheckResult), 0, soap_copy_ns1__SendChainCheckResult);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_RequestID > 0 || soap_flag_Password > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 struct ns1__SendChainCheckResult * SOAP_FMAC6 soap_new_ns1__SendChainCheckResult(struct soap *soap, int n)
{	return soap_instantiate_ns1__SendChainCheckResult(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ns1__SendChainCheckResult(struct soap *soap, struct ns1__SendChainCheckResult *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct ns1__SendChainCheckResult * SOAP_FMAC4 soap_instantiate_ns1__SendChainCheckResult(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__SendChainCheckResult(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__SendChainCheckResult, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct ns1__SendChainCheckResult;
		if (size)
			*size = sizeof(struct ns1__SendChainCheckResult);
	}
	else
	{	cp->ptr = (void*)new struct ns1__SendChainCheckResult[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns1__SendChainCheckResult);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns1__SendChainCheckResult*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__SendChainCheckResult(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns1__SendChainCheckResult %p -> %p\n", q, p));
	*(struct ns1__SendChainCheckResult*)p = *(struct ns1__SendChainCheckResult*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__SendChainCheckResultResponse(struct soap *soap, struct ns1__SendChainCheckResultResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->ErrorCode);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__SendChainCheckResultResponse(struct soap *soap, const struct ns1__SendChainCheckResultResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__SendChainCheckResultResponse(struct soap *soap, const struct ns1__SendChainCheckResultResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns1__SendChainCheckResultResponse);
	if (soap_out_ns1__SendChainCheckResultResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SendChainCheckResultResponse(struct soap *soap, const char *tag, int id, const struct ns1__SendChainCheckResultResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__SendChainCheckResultResponse), type))
		return soap->error;
	if (soap_out_int(soap, "ErrorCode", -1, &a->ErrorCode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__SendChainCheckResultResponse * SOAP_FMAC4 soap_get_ns1__SendChainCheckResultResponse(struct soap *soap, struct ns1__SendChainCheckResultResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__SendChainCheckResultResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct ns1__SendChainCheckResultResponse * SOAP_FMAC4 soap_in_ns1__SendChainCheckResultResponse(struct soap *soap, const char *tag, struct ns1__SendChainCheckResultResponse *a, const char *type)
{
	size_t soap_flag_ErrorCode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns1__SendChainCheckResultResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__SendChainCheckResultResponse, sizeof(struct ns1__SendChainCheckResultResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns1__SendChainCheckResultResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ErrorCode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ErrorCode", &a->ErrorCode, "xsd:int"))
				{	soap_flag_ErrorCode--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns1__SendChainCheckResultResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__SendChainCheckResultResponse, 0, sizeof(struct ns1__SendChainCheckResultResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_ErrorCode > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 struct ns1__SendChainCheckResultResponse * SOAP_FMAC6 soap_new_ns1__SendChainCheckResultResponse(struct soap *soap, int n)
{	return soap_instantiate_ns1__SendChainCheckResultResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ns1__SendChainCheckResultResponse(struct soap *soap, struct ns1__SendChainCheckResultResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct ns1__SendChainCheckResultResponse * SOAP_FMAC4 soap_instantiate_ns1__SendChainCheckResultResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__SendChainCheckResultResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__SendChainCheckResultResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct ns1__SendChainCheckResultResponse;
		if (size)
			*size = sizeof(struct ns1__SendChainCheckResultResponse);
	}
	else
	{	cp->ptr = (void*)new struct ns1__SendChainCheckResultResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns1__SendChainCheckResultResponse);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns1__SendChainCheckResultResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__SendChainCheckResultResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns1__SendChainCheckResultResponse %p -> %p\n", q, p));
	*(struct ns1__SendChainCheckResultResponse*)p = *(struct ns1__SendChainCheckResultResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__RequestChainCheck(struct soap *soap, struct ns1__RequestChainCheck *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->MachineInfo = NULL;
	soap_default_unsignedInt(soap, &a->NumHashes);
	soap_default_unsignedInt(soap, &a->RecievePublicHashes);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__RequestChainCheck(struct soap *soap, const struct ns1__RequestChainCheck *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTons1__MachineInfo(soap, &a->MachineInfo);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__RequestChainCheck(struct soap *soap, const struct ns1__RequestChainCheck *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns1__RequestChainCheck);
	if (soap_out_ns1__RequestChainCheck(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__RequestChainCheck(struct soap *soap, const char *tag, int id, const struct ns1__RequestChainCheck *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__RequestChainCheck), type))
		return soap->error;
	if (soap_out_PointerTons1__MachineInfo(soap, "MachineInfo", -1, &a->MachineInfo, ""))
		return soap->error;
	if (soap_out_unsignedInt(soap, "NumHashes", -1, &a->NumHashes, ""))
		return soap->error;
	if (soap_out_unsignedInt(soap, "RecievePublicHashes", -1, &a->RecievePublicHashes, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__RequestChainCheck * SOAP_FMAC4 soap_get_ns1__RequestChainCheck(struct soap *soap, struct ns1__RequestChainCheck *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__RequestChainCheck(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct ns1__RequestChainCheck * SOAP_FMAC4 soap_in_ns1__RequestChainCheck(struct soap *soap, const char *tag, struct ns1__RequestChainCheck *a, const char *type)
{
	size_t soap_flag_MachineInfo = 1;
	size_t soap_flag_NumHashes = 1;
	size_t soap_flag_RecievePublicHashes = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns1__RequestChainCheck *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__RequestChainCheck, sizeof(struct ns1__RequestChainCheck), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns1__RequestChainCheck(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_MachineInfo && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__MachineInfo(soap, "MachineInfo", &a->MachineInfo, "ns1:MachineInfo"))
				{	soap_flag_MachineInfo--;
					continue;
				}
			if (soap_flag_NumHashes && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedInt(soap, "NumHashes", &a->NumHashes, "xsd:unsignedInt"))
				{	soap_flag_NumHashes--;
					continue;
				}
			if (soap_flag_RecievePublicHashes && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedInt(soap, "RecievePublicHashes", &a->RecievePublicHashes, "xsd:unsignedInt"))
				{	soap_flag_RecievePublicHashes--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns1__RequestChainCheck *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__RequestChainCheck, 0, sizeof(struct ns1__RequestChainCheck), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_NumHashes > 0 || soap_flag_RecievePublicHashes > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 struct ns1__RequestChainCheck * SOAP_FMAC6 soap_new_ns1__RequestChainCheck(struct soap *soap, int n)
{	return soap_instantiate_ns1__RequestChainCheck(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ns1__RequestChainCheck(struct soap *soap, struct ns1__RequestChainCheck *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct ns1__RequestChainCheck * SOAP_FMAC4 soap_instantiate_ns1__RequestChainCheck(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__RequestChainCheck(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__RequestChainCheck, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct ns1__RequestChainCheck;
		if (size)
			*size = sizeof(struct ns1__RequestChainCheck);
	}
	else
	{	cp->ptr = (void*)new struct ns1__RequestChainCheck[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns1__RequestChainCheck);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns1__RequestChainCheck*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__RequestChainCheck(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns1__RequestChainCheck %p -> %p\n", q, p));
	*(struct ns1__RequestChainCheck*)p = *(struct ns1__RequestChainCheck*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__RequestChainCheckResponse(struct soap *soap, struct ns1__RequestChainCheckResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ChainCheckHashList = NULL;
	soap_default_int(soap, &a->ErrorCode);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__RequestChainCheckResponse(struct soap *soap, const struct ns1__RequestChainCheckResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTons1__ArrayOfChainCheckHash(soap, &a->ChainCheckHashList);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__RequestChainCheckResponse(struct soap *soap, const struct ns1__RequestChainCheckResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns1__RequestChainCheckResponse);
	if (soap_out_ns1__RequestChainCheckResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__RequestChainCheckResponse(struct soap *soap, const char *tag, int id, const struct ns1__RequestChainCheckResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__RequestChainCheckResponse), type))
		return soap->error;
	if (soap_out_PointerTons1__ArrayOfChainCheckHash(soap, "ChainCheckHashList", -1, &a->ChainCheckHashList, ""))
		return soap->error;
	if (soap_out_int(soap, "ErrorCode", -1, &a->ErrorCode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__RequestChainCheckResponse * SOAP_FMAC4 soap_get_ns1__RequestChainCheckResponse(struct soap *soap, struct ns1__RequestChainCheckResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__RequestChainCheckResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct ns1__RequestChainCheckResponse * SOAP_FMAC4 soap_in_ns1__RequestChainCheckResponse(struct soap *soap, const char *tag, struct ns1__RequestChainCheckResponse *a, const char *type)
{
	size_t soap_flag_ChainCheckHashList = 1;
	size_t soap_flag_ErrorCode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns1__RequestChainCheckResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__RequestChainCheckResponse, sizeof(struct ns1__RequestChainCheckResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns1__RequestChainCheckResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ChainCheckHashList && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__ArrayOfChainCheckHash(soap, "ChainCheckHashList", &a->ChainCheckHashList, "ns1:ArrayOfChainCheckHash"))
				{	soap_flag_ChainCheckHashList--;
					continue;
				}
			if (soap_flag_ErrorCode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ErrorCode", &a->ErrorCode, "xsd:int"))
				{	soap_flag_ErrorCode--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns1__RequestChainCheckResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__RequestChainCheckResponse, 0, sizeof(struct ns1__RequestChainCheckResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_ErrorCode > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 struct ns1__RequestChainCheckResponse * SOAP_FMAC6 soap_new_ns1__RequestChainCheckResponse(struct soap *soap, int n)
{	return soap_instantiate_ns1__RequestChainCheckResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ns1__RequestChainCheckResponse(struct soap *soap, struct ns1__RequestChainCheckResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct ns1__RequestChainCheckResponse * SOAP_FMAC4 soap_instantiate_ns1__RequestChainCheckResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__RequestChainCheckResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__RequestChainCheckResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct ns1__RequestChainCheckResponse;
		if (size)
			*size = sizeof(struct ns1__RequestChainCheckResponse);
	}
	else
	{	cp->ptr = (void*)new struct ns1__RequestChainCheckResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns1__RequestChainCheckResponse);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns1__RequestChainCheckResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__RequestChainCheckResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns1__RequestChainCheckResponse %p -> %p\n", q, p));
	*(struct ns1__RequestChainCheckResponse*)p = *(struct ns1__RequestChainCheckResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__UploadHashIndexList(struct soap *soap, struct ns1__UploadHashIndexList *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->MachineInfo = NULL;
	soap_default_unsignedInt(soap, &a->RequestID);
	soap_default_std__string(soap, &a->IndiceList);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__UploadHashIndexList(struct soap *soap, const struct ns1__UploadHashIndexList *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTons1__MachineInfo(soap, &a->MachineInfo);
	soap_serialize_std__string(soap, &a->IndiceList);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__UploadHashIndexList(struct soap *soap, const struct ns1__UploadHashIndexList *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns1__UploadHashIndexList);
	if (soap_out_ns1__UploadHashIndexList(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__UploadHashIndexList(struct soap *soap, const char *tag, int id, const struct ns1__UploadHashIndexList *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__UploadHashIndexList), type))
		return soap->error;
	if (soap_out_PointerTons1__MachineInfo(soap, "MachineInfo", -1, &a->MachineInfo, ""))
		return soap->error;
	if (soap_out_unsignedInt(soap, "RequestID", -1, &a->RequestID, ""))
		return soap->error;
	if (soap_out_std__string(soap, "IndiceList", -1, &a->IndiceList, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__UploadHashIndexList * SOAP_FMAC4 soap_get_ns1__UploadHashIndexList(struct soap *soap, struct ns1__UploadHashIndexList *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__UploadHashIndexList(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct ns1__UploadHashIndexList * SOAP_FMAC4 soap_in_ns1__UploadHashIndexList(struct soap *soap, const char *tag, struct ns1__UploadHashIndexList *a, const char *type)
{
	size_t soap_flag_MachineInfo = 1;
	size_t soap_flag_RequestID = 1;
	size_t soap_flag_IndiceList = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns1__UploadHashIndexList *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__UploadHashIndexList, sizeof(struct ns1__UploadHashIndexList), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns1__UploadHashIndexList(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_MachineInfo && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__MachineInfo(soap, "MachineInfo", &a->MachineInfo, "ns1:MachineInfo"))
				{	soap_flag_MachineInfo--;
					continue;
				}
			if (soap_flag_RequestID && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedInt(soap, "RequestID", &a->RequestID, "xsd:unsignedInt"))
				{	soap_flag_RequestID--;
					continue;
				}
			if (soap_flag_IndiceList && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "IndiceList", &a->IndiceList, "xsd:string"))
				{	soap_flag_IndiceList--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns1__UploadHashIndexList *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__UploadHashIndexList, 0, sizeof(struct ns1__UploadHashIndexList), 0, soap_copy_ns1__UploadHashIndexList);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_RequestID > 0 || soap_flag_IndiceList > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 struct ns1__UploadHashIndexList * SOAP_FMAC6 soap_new_ns1__UploadHashIndexList(struct soap *soap, int n)
{	return soap_instantiate_ns1__UploadHashIndexList(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ns1__UploadHashIndexList(struct soap *soap, struct ns1__UploadHashIndexList *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct ns1__UploadHashIndexList * SOAP_FMAC4 soap_instantiate_ns1__UploadHashIndexList(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__UploadHashIndexList(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__UploadHashIndexList, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct ns1__UploadHashIndexList;
		if (size)
			*size = sizeof(struct ns1__UploadHashIndexList);
	}
	else
	{	cp->ptr = (void*)new struct ns1__UploadHashIndexList[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns1__UploadHashIndexList);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns1__UploadHashIndexList*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__UploadHashIndexList(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns1__UploadHashIndexList %p -> %p\n", q, p));
	*(struct ns1__UploadHashIndexList*)p = *(struct ns1__UploadHashIndexList*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__UploadHashIndexListResponse(struct soap *soap, struct ns1__UploadHashIndexListResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->ErrorCode);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__UploadHashIndexListResponse(struct soap *soap, const struct ns1__UploadHashIndexListResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__UploadHashIndexListResponse(struct soap *soap, const struct ns1__UploadHashIndexListResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns1__UploadHashIndexListResponse);
	if (soap_out_ns1__UploadHashIndexListResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__UploadHashIndexListResponse(struct soap *soap, const char *tag, int id, const struct ns1__UploadHashIndexListResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__UploadHashIndexListResponse), type))
		return soap->error;
	if (soap_out_int(soap, "ErrorCode", -1, &a->ErrorCode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__UploadHashIndexListResponse * SOAP_FMAC4 soap_get_ns1__UploadHashIndexListResponse(struct soap *soap, struct ns1__UploadHashIndexListResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__UploadHashIndexListResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct ns1__UploadHashIndexListResponse * SOAP_FMAC4 soap_in_ns1__UploadHashIndexListResponse(struct soap *soap, const char *tag, struct ns1__UploadHashIndexListResponse *a, const char *type)
{
	size_t soap_flag_ErrorCode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns1__UploadHashIndexListResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__UploadHashIndexListResponse, sizeof(struct ns1__UploadHashIndexListResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns1__UploadHashIndexListResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ErrorCode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ErrorCode", &a->ErrorCode, "xsd:int"))
				{	soap_flag_ErrorCode--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns1__UploadHashIndexListResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__UploadHashIndexListResponse, 0, sizeof(struct ns1__UploadHashIndexListResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_ErrorCode > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 struct ns1__UploadHashIndexListResponse * SOAP_FMAC6 soap_new_ns1__UploadHashIndexListResponse(struct soap *soap, int n)
{	return soap_instantiate_ns1__UploadHashIndexListResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ns1__UploadHashIndexListResponse(struct soap *soap, struct ns1__UploadHashIndexListResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct ns1__UploadHashIndexListResponse * SOAP_FMAC4 soap_instantiate_ns1__UploadHashIndexListResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__UploadHashIndexListResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__UploadHashIndexListResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct ns1__UploadHashIndexListResponse;
		if (size)
			*size = sizeof(struct ns1__UploadHashIndexListResponse);
	}
	else
	{	cp->ptr = (void*)new struct ns1__UploadHashIndexListResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns1__UploadHashIndexListResponse);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns1__UploadHashIndexListResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__UploadHashIndexListResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns1__UploadHashIndexListResponse %p -> %p\n", q, p));
	*(struct ns1__UploadHashIndexListResponse*)p = *(struct ns1__UploadHashIndexListResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__RequestHashToIndex(struct soap *soap, struct ns1__RequestHashToIndex *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->MachineInfo = NULL;
	soap_default_unsignedInt(soap, &a->NumHashes);
	soap_default_unsignedInt(soap, &a->RecievePublicHashes);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__RequestHashToIndex(struct soap *soap, const struct ns1__RequestHashToIndex *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTons1__MachineInfo(soap, &a->MachineInfo);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__RequestHashToIndex(struct soap *soap, const struct ns1__RequestHashToIndex *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns1__RequestHashToIndex);
	if (soap_out_ns1__RequestHashToIndex(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__RequestHashToIndex(struct soap *soap, const char *tag, int id, const struct ns1__RequestHashToIndex *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__RequestHashToIndex), type))
		return soap->error;
	if (soap_out_PointerTons1__MachineInfo(soap, "MachineInfo", -1, &a->MachineInfo, ""))
		return soap->error;
	if (soap_out_unsignedInt(soap, "NumHashes", -1, &a->NumHashes, ""))
		return soap->error;
	if (soap_out_unsignedInt(soap, "RecievePublicHashes", -1, &a->RecievePublicHashes, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__RequestHashToIndex * SOAP_FMAC4 soap_get_ns1__RequestHashToIndex(struct soap *soap, struct ns1__RequestHashToIndex *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__RequestHashToIndex(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct ns1__RequestHashToIndex * SOAP_FMAC4 soap_in_ns1__RequestHashToIndex(struct soap *soap, const char *tag, struct ns1__RequestHashToIndex *a, const char *type)
{
	size_t soap_flag_MachineInfo = 1;
	size_t soap_flag_NumHashes = 1;
	size_t soap_flag_RecievePublicHashes = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns1__RequestHashToIndex *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__RequestHashToIndex, sizeof(struct ns1__RequestHashToIndex), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns1__RequestHashToIndex(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_MachineInfo && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__MachineInfo(soap, "MachineInfo", &a->MachineInfo, "ns1:MachineInfo"))
				{	soap_flag_MachineInfo--;
					continue;
				}
			if (soap_flag_NumHashes && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedInt(soap, "NumHashes", &a->NumHashes, "xsd:unsignedInt"))
				{	soap_flag_NumHashes--;
					continue;
				}
			if (soap_flag_RecievePublicHashes && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedInt(soap, "RecievePublicHashes", &a->RecievePublicHashes, "xsd:unsignedInt"))
				{	soap_flag_RecievePublicHashes--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns1__RequestHashToIndex *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__RequestHashToIndex, 0, sizeof(struct ns1__RequestHashToIndex), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_NumHashes > 0 || soap_flag_RecievePublicHashes > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 struct ns1__RequestHashToIndex * SOAP_FMAC6 soap_new_ns1__RequestHashToIndex(struct soap *soap, int n)
{	return soap_instantiate_ns1__RequestHashToIndex(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ns1__RequestHashToIndex(struct soap *soap, struct ns1__RequestHashToIndex *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct ns1__RequestHashToIndex * SOAP_FMAC4 soap_instantiate_ns1__RequestHashToIndex(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__RequestHashToIndex(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__RequestHashToIndex, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct ns1__RequestHashToIndex;
		if (size)
			*size = sizeof(struct ns1__RequestHashToIndex);
	}
	else
	{	cp->ptr = (void*)new struct ns1__RequestHashToIndex[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns1__RequestHashToIndex);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns1__RequestHashToIndex*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__RequestHashToIndex(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns1__RequestHashToIndex %p -> %p\n", q, p));
	*(struct ns1__RequestHashToIndex*)p = *(struct ns1__RequestHashToIndex*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__RequestHashToIndexResponse(struct soap *soap, struct ns1__RequestHashToIndexResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->IndexHash = NULL;
	soap_default_int(soap, &a->ErrorCode);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__RequestHashToIndexResponse(struct soap *soap, const struct ns1__RequestHashToIndexResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTons1__ArrayOfIndexHash(soap, &a->IndexHash);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__RequestHashToIndexResponse(struct soap *soap, const struct ns1__RequestHashToIndexResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns1__RequestHashToIndexResponse);
	if (soap_out_ns1__RequestHashToIndexResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__RequestHashToIndexResponse(struct soap *soap, const char *tag, int id, const struct ns1__RequestHashToIndexResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__RequestHashToIndexResponse), type))
		return soap->error;
	if (soap_out_PointerTons1__ArrayOfIndexHash(soap, "IndexHash", -1, &a->IndexHash, ""))
		return soap->error;
	if (soap_out_int(soap, "ErrorCode", -1, &a->ErrorCode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__RequestHashToIndexResponse * SOAP_FMAC4 soap_get_ns1__RequestHashToIndexResponse(struct soap *soap, struct ns1__RequestHashToIndexResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__RequestHashToIndexResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct ns1__RequestHashToIndexResponse * SOAP_FMAC4 soap_in_ns1__RequestHashToIndexResponse(struct soap *soap, const char *tag, struct ns1__RequestHashToIndexResponse *a, const char *type)
{
	size_t soap_flag_IndexHash = 1;
	size_t soap_flag_ErrorCode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns1__RequestHashToIndexResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__RequestHashToIndexResponse, sizeof(struct ns1__RequestHashToIndexResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns1__RequestHashToIndexResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_IndexHash && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__ArrayOfIndexHash(soap, "IndexHash", &a->IndexHash, "ns1:ArrayOfIndexHash"))
				{	soap_flag_IndexHash--;
					continue;
				}
			if (soap_flag_ErrorCode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ErrorCode", &a->ErrorCode, "xsd:int"))
				{	soap_flag_ErrorCode--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns1__RequestHashToIndexResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__RequestHashToIndexResponse, 0, sizeof(struct ns1__RequestHashToIndexResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_ErrorCode > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 struct ns1__RequestHashToIndexResponse * SOAP_FMAC6 soap_new_ns1__RequestHashToIndexResponse(struct soap *soap, int n)
{	return soap_instantiate_ns1__RequestHashToIndexResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ns1__RequestHashToIndexResponse(struct soap *soap, struct ns1__RequestHashToIndexResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct ns1__RequestHashToIndexResponse * SOAP_FMAC4 soap_instantiate_ns1__RequestHashToIndexResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__RequestHashToIndexResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__RequestHashToIndexResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct ns1__RequestHashToIndexResponse;
		if (size)
			*size = sizeof(struct ns1__RequestHashToIndexResponse);
	}
	else
	{	cp->ptr = (void*)new struct ns1__RequestHashToIndexResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns1__RequestHashToIndexResponse);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns1__RequestHashToIndexResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__RequestHashToIndexResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns1__RequestHashToIndexResponse %p -> %p\n", q, p));
	*(struct ns1__RequestHashToIndexResponse*)p = *(struct ns1__RequestHashToIndexResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__UploadCompletedWork(struct soap *soap, struct ns1__UploadCompletedWork *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->PartID);
	a->Data.xsd__base64Binary::soap_default(soap);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__UploadCompletedWork(struct soap *soap, const struct ns1__UploadCompletedWork *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->Data.soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__UploadCompletedWork(struct soap *soap, const struct ns1__UploadCompletedWork *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns1__UploadCompletedWork);
	if (soap_out_ns1__UploadCompletedWork(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__UploadCompletedWork(struct soap *soap, const char *tag, int id, const struct ns1__UploadCompletedWork *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__UploadCompletedWork), type))
		return soap->error;
	if (soap_out_int(soap, "PartID", -1, &a->PartID, ""))
		return soap->error;
	if (a->Data.soap_out(soap, "Data", -1, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__UploadCompletedWork * SOAP_FMAC4 soap_get_ns1__UploadCompletedWork(struct soap *soap, struct ns1__UploadCompletedWork *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__UploadCompletedWork(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct ns1__UploadCompletedWork * SOAP_FMAC4 soap_in_ns1__UploadCompletedWork(struct soap *soap, const char *tag, struct ns1__UploadCompletedWork *a, const char *type)
{
	size_t soap_flag_PartID = 1;
	size_t soap_flag_Data = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns1__UploadCompletedWork *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__UploadCompletedWork, sizeof(struct ns1__UploadCompletedWork), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns1__UploadCompletedWork(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_PartID && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "PartID", &a->PartID, "xsd:int"))
				{	soap_flag_PartID--;
					continue;
				}
			if (soap_flag_Data && soap->error == SOAP_TAG_MISMATCH)
				if (a->Data.soap_in(soap, "Data", "xsd:base64Binary"))
				{	soap_flag_Data--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns1__UploadCompletedWork *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__UploadCompletedWork, 0, sizeof(struct ns1__UploadCompletedWork), 0, soap_copy_ns1__UploadCompletedWork);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_PartID > 0 || soap_flag_Data > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 struct ns1__UploadCompletedWork * SOAP_FMAC6 soap_new_ns1__UploadCompletedWork(struct soap *soap, int n)
{	return soap_instantiate_ns1__UploadCompletedWork(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ns1__UploadCompletedWork(struct soap *soap, struct ns1__UploadCompletedWork *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct ns1__UploadCompletedWork * SOAP_FMAC4 soap_instantiate_ns1__UploadCompletedWork(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__UploadCompletedWork(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__UploadCompletedWork, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct ns1__UploadCompletedWork;
		if (size)
			*size = sizeof(struct ns1__UploadCompletedWork);
	}
	else
	{	cp->ptr = (void*)new struct ns1__UploadCompletedWork[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns1__UploadCompletedWork);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns1__UploadCompletedWork*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__UploadCompletedWork(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns1__UploadCompletedWork %p -> %p\n", q, p));
	*(struct ns1__UploadCompletedWork*)p = *(struct ns1__UploadCompletedWork*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__UploadCompletedWorkResponse(struct soap *soap, struct ns1__UploadCompletedWorkResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->ErrorCode);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__UploadCompletedWorkResponse(struct soap *soap, const struct ns1__UploadCompletedWorkResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__UploadCompletedWorkResponse(struct soap *soap, const struct ns1__UploadCompletedWorkResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns1__UploadCompletedWorkResponse);
	if (soap_out_ns1__UploadCompletedWorkResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__UploadCompletedWorkResponse(struct soap *soap, const char *tag, int id, const struct ns1__UploadCompletedWorkResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__UploadCompletedWorkResponse), type))
		return soap->error;
	if (soap_out_int(soap, "ErrorCode", -1, &a->ErrorCode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__UploadCompletedWorkResponse * SOAP_FMAC4 soap_get_ns1__UploadCompletedWorkResponse(struct soap *soap, struct ns1__UploadCompletedWorkResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__UploadCompletedWorkResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct ns1__UploadCompletedWorkResponse * SOAP_FMAC4 soap_in_ns1__UploadCompletedWorkResponse(struct soap *soap, const char *tag, struct ns1__UploadCompletedWorkResponse *a, const char *type)
{
	size_t soap_flag_ErrorCode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns1__UploadCompletedWorkResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__UploadCompletedWorkResponse, sizeof(struct ns1__UploadCompletedWorkResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns1__UploadCompletedWorkResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ErrorCode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ErrorCode", &a->ErrorCode, "xsd:int"))
				{	soap_flag_ErrorCode--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns1__UploadCompletedWorkResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__UploadCompletedWorkResponse, 0, sizeof(struct ns1__UploadCompletedWorkResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_ErrorCode > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 struct ns1__UploadCompletedWorkResponse * SOAP_FMAC6 soap_new_ns1__UploadCompletedWorkResponse(struct soap *soap, int n)
{	return soap_instantiate_ns1__UploadCompletedWorkResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ns1__UploadCompletedWorkResponse(struct soap *soap, struct ns1__UploadCompletedWorkResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct ns1__UploadCompletedWorkResponse * SOAP_FMAC4 soap_instantiate_ns1__UploadCompletedWorkResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__UploadCompletedWorkResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__UploadCompletedWorkResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct ns1__UploadCompletedWorkResponse;
		if (size)
			*size = sizeof(struct ns1__UploadCompletedWorkResponse);
	}
	else
	{	cp->ptr = (void*)new struct ns1__UploadCompletedWorkResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns1__UploadCompletedWorkResponse);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns1__UploadCompletedWorkResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__UploadCompletedWorkResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns1__UploadCompletedWorkResponse %p -> %p\n", q, p));
	*(struct ns1__UploadCompletedWorkResponse*)p = *(struct ns1__UploadCompletedWorkResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__RequestWork(struct soap *soap, struct ns1__RequestWork *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->MachineInfo = NULL;
	soap_default_int(soap, &a->NumPieces);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__RequestWork(struct soap *soap, const struct ns1__RequestWork *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTons1__MachineInfo(soap, &a->MachineInfo);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__RequestWork(struct soap *soap, const struct ns1__RequestWork *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns1__RequestWork);
	if (soap_out_ns1__RequestWork(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__RequestWork(struct soap *soap, const char *tag, int id, const struct ns1__RequestWork *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__RequestWork), type))
		return soap->error;
	if (soap_out_PointerTons1__MachineInfo(soap, "MachineInfo", -1, &a->MachineInfo, ""))
		return soap->error;
	if (soap_out_int(soap, "NumPieces", -1, &a->NumPieces, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__RequestWork * SOAP_FMAC4 soap_get_ns1__RequestWork(struct soap *soap, struct ns1__RequestWork *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__RequestWork(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct ns1__RequestWork * SOAP_FMAC4 soap_in_ns1__RequestWork(struct soap *soap, const char *tag, struct ns1__RequestWork *a, const char *type)
{
	size_t soap_flag_MachineInfo = 1;
	size_t soap_flag_NumPieces = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns1__RequestWork *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__RequestWork, sizeof(struct ns1__RequestWork), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns1__RequestWork(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_MachineInfo && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__MachineInfo(soap, "MachineInfo", &a->MachineInfo, "ns1:MachineInfo"))
				{	soap_flag_MachineInfo--;
					continue;
				}
			if (soap_flag_NumPieces && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "NumPieces", &a->NumPieces, "xsd:int"))
				{	soap_flag_NumPieces--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns1__RequestWork *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__RequestWork, 0, sizeof(struct ns1__RequestWork), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_NumPieces > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 struct ns1__RequestWork * SOAP_FMAC6 soap_new_ns1__RequestWork(struct soap *soap, int n)
{	return soap_instantiate_ns1__RequestWork(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ns1__RequestWork(struct soap *soap, struct ns1__RequestWork *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct ns1__RequestWork * SOAP_FMAC4 soap_instantiate_ns1__RequestWork(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__RequestWork(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__RequestWork, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct ns1__RequestWork;
		if (size)
			*size = sizeof(struct ns1__RequestWork);
	}
	else
	{	cp->ptr = (void*)new struct ns1__RequestWork[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns1__RequestWork);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns1__RequestWork*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__RequestWork(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns1__RequestWork %p -> %p\n", q, p));
	*(struct ns1__RequestWork*)p = *(struct ns1__RequestWork*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__RequestWorkResponse(struct soap *soap, struct ns1__RequestWorkResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->WorkUnit = NULL;
	soap_default_std__string(soap, &a->CharsetMD5);
	a->rtgencmd = NULL;
	soap_default_int(soap, &a->ErrorCode);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__RequestWorkResponse(struct soap *soap, const struct ns1__RequestWorkResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTons1__ArrayOfWorkUnit(soap, &a->WorkUnit);
	soap_serialize_std__string(soap, &a->CharsetMD5);
	soap_serialize_PointerTons1__rtgenDetails(soap, &a->rtgencmd);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__RequestWorkResponse(struct soap *soap, const struct ns1__RequestWorkResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns1__RequestWorkResponse);
	if (soap_out_ns1__RequestWorkResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__RequestWorkResponse(struct soap *soap, const char *tag, int id, const struct ns1__RequestWorkResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__RequestWorkResponse), type))
		return soap->error;
	if (soap_out_PointerTons1__ArrayOfWorkUnit(soap, "WorkUnit", -1, &a->WorkUnit, ""))
		return soap->error;
	if (soap_out_std__string(soap, "CharsetMD5", -1, &a->CharsetMD5, ""))
		return soap->error;
	if (soap_out_PointerTons1__rtgenDetails(soap, "rtgencmd", -1, &a->rtgencmd, ""))
		return soap->error;
	if (soap_out_int(soap, "ErrorCode", -1, &a->ErrorCode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__RequestWorkResponse * SOAP_FMAC4 soap_get_ns1__RequestWorkResponse(struct soap *soap, struct ns1__RequestWorkResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__RequestWorkResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct ns1__RequestWorkResponse * SOAP_FMAC4 soap_in_ns1__RequestWorkResponse(struct soap *soap, const char *tag, struct ns1__RequestWorkResponse *a, const char *type)
{
	size_t soap_flag_WorkUnit = 1;
	size_t soap_flag_CharsetMD5 = 1;
	size_t soap_flag_rtgencmd = 1;
	size_t soap_flag_ErrorCode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns1__RequestWorkResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__RequestWorkResponse, sizeof(struct ns1__RequestWorkResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns1__RequestWorkResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_WorkUnit && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__ArrayOfWorkUnit(soap, "WorkUnit", &a->WorkUnit, "ns1:ArrayOfWorkUnit"))
				{	soap_flag_WorkUnit--;
					continue;
				}
			if (soap_flag_CharsetMD5 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "CharsetMD5", &a->CharsetMD5, "xsd:string"))
				{	soap_flag_CharsetMD5--;
					continue;
				}
			if (soap_flag_rtgencmd && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__rtgenDetails(soap, "rtgencmd", &a->rtgencmd, "ns1:rtgenDetails"))
				{	soap_flag_rtgencmd--;
					continue;
				}
			if (soap_flag_ErrorCode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ErrorCode", &a->ErrorCode, "xsd:int"))
				{	soap_flag_ErrorCode--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns1__RequestWorkResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__RequestWorkResponse, 0, sizeof(struct ns1__RequestWorkResponse), 0, soap_copy_ns1__RequestWorkResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_CharsetMD5 > 0 || soap_flag_ErrorCode > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 struct ns1__RequestWorkResponse * SOAP_FMAC6 soap_new_ns1__RequestWorkResponse(struct soap *soap, int n)
{	return soap_instantiate_ns1__RequestWorkResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ns1__RequestWorkResponse(struct soap *soap, struct ns1__RequestWorkResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct ns1__RequestWorkResponse * SOAP_FMAC4 soap_instantiate_ns1__RequestWorkResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__RequestWorkResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__RequestWorkResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct ns1__RequestWorkResponse;
		if (size)
			*size = sizeof(struct ns1__RequestWorkResponse);
	}
	else
	{	cp->ptr = (void*)new struct ns1__RequestWorkResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns1__RequestWorkResponse);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns1__RequestWorkResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__RequestWorkResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns1__RequestWorkResponse %p -> %p\n", q, p));
	*(struct ns1__RequestWorkResponse*)p = *(struct ns1__RequestWorkResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__RegisterNewClient(struct soap *soap, struct ns1__RegisterNewClient *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->MachineInfo = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__RegisterNewClient(struct soap *soap, const struct ns1__RegisterNewClient *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTons1__MachineInfo(soap, &a->MachineInfo);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__RegisterNewClient(struct soap *soap, const struct ns1__RegisterNewClient *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns1__RegisterNewClient);
	if (soap_out_ns1__RegisterNewClient(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__RegisterNewClient(struct soap *soap, const char *tag, int id, const struct ns1__RegisterNewClient *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__RegisterNewClient), type))
		return soap->error;
	if (soap_out_PointerTons1__MachineInfo(soap, "MachineInfo", -1, &a->MachineInfo, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__RegisterNewClient * SOAP_FMAC4 soap_get_ns1__RegisterNewClient(struct soap *soap, struct ns1__RegisterNewClient *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__RegisterNewClient(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct ns1__RegisterNewClient * SOAP_FMAC4 soap_in_ns1__RegisterNewClient(struct soap *soap, const char *tag, struct ns1__RegisterNewClient *a, const char *type)
{
	size_t soap_flag_MachineInfo = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns1__RegisterNewClient *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__RegisterNewClient, sizeof(struct ns1__RegisterNewClient), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns1__RegisterNewClient(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_MachineInfo && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__MachineInfo(soap, "MachineInfo", &a->MachineInfo, "ns1:MachineInfo"))
				{	soap_flag_MachineInfo--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns1__RegisterNewClient *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__RegisterNewClient, 0, sizeof(struct ns1__RegisterNewClient), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct ns1__RegisterNewClient * SOAP_FMAC6 soap_new_ns1__RegisterNewClient(struct soap *soap, int n)
{	return soap_instantiate_ns1__RegisterNewClient(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ns1__RegisterNewClient(struct soap *soap, struct ns1__RegisterNewClient *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct ns1__RegisterNewClient * SOAP_FMAC4 soap_instantiate_ns1__RegisterNewClient(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__RegisterNewClient(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__RegisterNewClient, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct ns1__RegisterNewClient;
		if (size)
			*size = sizeof(struct ns1__RegisterNewClient);
	}
	else
	{	cp->ptr = (void*)new struct ns1__RegisterNewClient[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns1__RegisterNewClient);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns1__RegisterNewClient*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__RegisterNewClient(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns1__RegisterNewClient %p -> %p\n", q, p));
	*(struct ns1__RegisterNewClient*)p = *(struct ns1__RegisterNewClient*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__RegisterNewClientResponse(struct soap *soap, struct ns1__RegisterNewClientResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->ClientID);
	soap_default_int(soap, &a->ErrorCode);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__RegisterNewClientResponse(struct soap *soap, const struct ns1__RegisterNewClientResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__RegisterNewClientResponse(struct soap *soap, const struct ns1__RegisterNewClientResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns1__RegisterNewClientResponse);
	if (soap_out_ns1__RegisterNewClientResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__RegisterNewClientResponse(struct soap *soap, const char *tag, int id, const struct ns1__RegisterNewClientResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__RegisterNewClientResponse), type))
		return soap->error;
	if (soap_out_int(soap, "ClientID", -1, &a->ClientID, ""))
		return soap->error;
	if (soap_out_int(soap, "ErrorCode", -1, &a->ErrorCode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__RegisterNewClientResponse * SOAP_FMAC4 soap_get_ns1__RegisterNewClientResponse(struct soap *soap, struct ns1__RegisterNewClientResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__RegisterNewClientResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct ns1__RegisterNewClientResponse * SOAP_FMAC4 soap_in_ns1__RegisterNewClientResponse(struct soap *soap, const char *tag, struct ns1__RegisterNewClientResponse *a, const char *type)
{
	size_t soap_flag_ClientID = 1;
	size_t soap_flag_ErrorCode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns1__RegisterNewClientResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__RegisterNewClientResponse, sizeof(struct ns1__RegisterNewClientResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns1__RegisterNewClientResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ClientID && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ClientID", &a->ClientID, "xsd:int"))
				{	soap_flag_ClientID--;
					continue;
				}
			if (soap_flag_ErrorCode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ErrorCode", &a->ErrorCode, "xsd:int"))
				{	soap_flag_ErrorCode--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns1__RegisterNewClientResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__RegisterNewClientResponse, 0, sizeof(struct ns1__RegisterNewClientResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_ClientID > 0 || soap_flag_ErrorCode > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 struct ns1__RegisterNewClientResponse * SOAP_FMAC6 soap_new_ns1__RegisterNewClientResponse(struct soap *soap, int n)
{	return soap_instantiate_ns1__RegisterNewClientResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ns1__RegisterNewClientResponse(struct soap *soap, struct ns1__RegisterNewClientResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct ns1__RegisterNewClientResponse * SOAP_FMAC4 soap_instantiate_ns1__RegisterNewClientResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__RegisterNewClientResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__RegisterNewClientResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct ns1__RegisterNewClientResponse;
		if (size)
			*size = sizeof(struct ns1__RegisterNewClientResponse);
	}
	else
	{	cp->ptr = (void*)new struct ns1__RegisterNewClientResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns1__RegisterNewClientResponse);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns1__RegisterNewClientResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__RegisterNewClientResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns1__RegisterNewClientResponse %p -> %p\n", q, p));
	*(struct ns1__RegisterNewClientResponse*)p = *(struct ns1__RegisterNewClientResponse*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Reason);
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Reason);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Detail);
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Detail);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Code);
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Code);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ArrayOfRainbowTableStatus(struct soap *soap, ns1__ArrayOfRainbowTableStatus *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__ArrayOfRainbowTableStatus))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ArrayOfRainbowTableStatus(struct soap *soap, ns1__ArrayOfRainbowTableStatus *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons1__ArrayOfRainbowTableStatus);
	if (soap_out_PointerTons1__ArrayOfRainbowTableStatus(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ArrayOfRainbowTableStatus(struct soap *soap, const char *tag, int id, ns1__ArrayOfRainbowTableStatus *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__ArrayOfRainbowTableStatus);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__ArrayOfRainbowTableStatus ** SOAP_FMAC4 soap_get_PointerTons1__ArrayOfRainbowTableStatus(struct soap *soap, ns1__ArrayOfRainbowTableStatus **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__ArrayOfRainbowTableStatus(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 ns1__ArrayOfRainbowTableStatus ** SOAP_FMAC4 soap_in_PointerTons1__ArrayOfRainbowTableStatus(struct soap *soap, const char *tag, ns1__ArrayOfRainbowTableStatus **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__ArrayOfRainbowTableStatus **)soap_malloc(soap, sizeof(ns1__ArrayOfRainbowTableStatus *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__ArrayOfRainbowTableStatus *)soap_instantiate_ns1__ArrayOfRainbowTableStatus(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__ArrayOfRainbowTableStatus ** p = (ns1__ArrayOfRainbowTableStatus **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__ArrayOfRainbowTableStatus, sizeof(ns1__ArrayOfRainbowTableStatus), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ArrayOfChainCheckHash(struct soap *soap, ns1__ArrayOfChainCheckHash *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__ArrayOfChainCheckHash))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ArrayOfChainCheckHash(struct soap *soap, ns1__ArrayOfChainCheckHash *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons1__ArrayOfChainCheckHash);
	if (soap_out_PointerTons1__ArrayOfChainCheckHash(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ArrayOfChainCheckHash(struct soap *soap, const char *tag, int id, ns1__ArrayOfChainCheckHash *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__ArrayOfChainCheckHash);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__ArrayOfChainCheckHash ** SOAP_FMAC4 soap_get_PointerTons1__ArrayOfChainCheckHash(struct soap *soap, ns1__ArrayOfChainCheckHash **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__ArrayOfChainCheckHash(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 ns1__ArrayOfChainCheckHash ** SOAP_FMAC4 soap_in_PointerTons1__ArrayOfChainCheckHash(struct soap *soap, const char *tag, ns1__ArrayOfChainCheckHash **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__ArrayOfChainCheckHash **)soap_malloc(soap, sizeof(ns1__ArrayOfChainCheckHash *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__ArrayOfChainCheckHash *)soap_instantiate_ns1__ArrayOfChainCheckHash(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__ArrayOfChainCheckHash ** p = (ns1__ArrayOfChainCheckHash **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__ArrayOfChainCheckHash, sizeof(ns1__ArrayOfChainCheckHash), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ArrayOfIndexHash(struct soap *soap, ns1__ArrayOfIndexHash *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__ArrayOfIndexHash))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ArrayOfIndexHash(struct soap *soap, ns1__ArrayOfIndexHash *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons1__ArrayOfIndexHash);
	if (soap_out_PointerTons1__ArrayOfIndexHash(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ArrayOfIndexHash(struct soap *soap, const char *tag, int id, ns1__ArrayOfIndexHash *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__ArrayOfIndexHash);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__ArrayOfIndexHash ** SOAP_FMAC4 soap_get_PointerTons1__ArrayOfIndexHash(struct soap *soap, ns1__ArrayOfIndexHash **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__ArrayOfIndexHash(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 ns1__ArrayOfIndexHash ** SOAP_FMAC4 soap_in_PointerTons1__ArrayOfIndexHash(struct soap *soap, const char *tag, ns1__ArrayOfIndexHash **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__ArrayOfIndexHash **)soap_malloc(soap, sizeof(ns1__ArrayOfIndexHash *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__ArrayOfIndexHash *)soap_instantiate_ns1__ArrayOfIndexHash(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__ArrayOfIndexHash ** p = (ns1__ArrayOfIndexHash **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__ArrayOfIndexHash, sizeof(ns1__ArrayOfIndexHash), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__rtgenDetails(struct soap *soap, ns1__rtgenDetails *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__rtgenDetails))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__rtgenDetails(struct soap *soap, ns1__rtgenDetails *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons1__rtgenDetails);
	if (soap_out_PointerTons1__rtgenDetails(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__rtgenDetails(struct soap *soap, const char *tag, int id, ns1__rtgenDetails *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__rtgenDetails);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__rtgenDetails ** SOAP_FMAC4 soap_get_PointerTons1__rtgenDetails(struct soap *soap, ns1__rtgenDetails **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__rtgenDetails(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 ns1__rtgenDetails ** SOAP_FMAC4 soap_in_PointerTons1__rtgenDetails(struct soap *soap, const char *tag, ns1__rtgenDetails **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__rtgenDetails **)soap_malloc(soap, sizeof(ns1__rtgenDetails *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__rtgenDetails *)soap_instantiate_ns1__rtgenDetails(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__rtgenDetails ** p = (ns1__rtgenDetails **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__rtgenDetails, sizeof(ns1__rtgenDetails), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ArrayOfWorkUnit(struct soap *soap, ns1__ArrayOfWorkUnit *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__ArrayOfWorkUnit))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ArrayOfWorkUnit(struct soap *soap, ns1__ArrayOfWorkUnit *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons1__ArrayOfWorkUnit);
	if (soap_out_PointerTons1__ArrayOfWorkUnit(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ArrayOfWorkUnit(struct soap *soap, const char *tag, int id, ns1__ArrayOfWorkUnit *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__ArrayOfWorkUnit);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__ArrayOfWorkUnit ** SOAP_FMAC4 soap_get_PointerTons1__ArrayOfWorkUnit(struct soap *soap, ns1__ArrayOfWorkUnit **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__ArrayOfWorkUnit(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 ns1__ArrayOfWorkUnit ** SOAP_FMAC4 soap_in_PointerTons1__ArrayOfWorkUnit(struct soap *soap, const char *tag, ns1__ArrayOfWorkUnit **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__ArrayOfWorkUnit **)soap_malloc(soap, sizeof(ns1__ArrayOfWorkUnit *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__ArrayOfWorkUnit *)soap_instantiate_ns1__ArrayOfWorkUnit(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__ArrayOfWorkUnit ** p = (ns1__ArrayOfWorkUnit **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__ArrayOfWorkUnit, sizeof(ns1__ArrayOfWorkUnit), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__MachineInfo(struct soap *soap, ns1__MachineInfo *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__MachineInfo))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__MachineInfo(struct soap *soap, ns1__MachineInfo *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons1__MachineInfo);
	if (soap_out_PointerTons1__MachineInfo(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__MachineInfo(struct soap *soap, const char *tag, int id, ns1__MachineInfo *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__MachineInfo);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__MachineInfo ** SOAP_FMAC4 soap_get_PointerTons1__MachineInfo(struct soap *soap, ns1__MachineInfo **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__MachineInfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 ns1__MachineInfo ** SOAP_FMAC4 soap_in_PointerTons1__MachineInfo(struct soap *soap, const char *tag, ns1__MachineInfo **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__MachineInfo **)soap_malloc(soap, sizeof(ns1__MachineInfo *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__MachineInfo *)soap_instantiate_ns1__MachineInfo(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__MachineInfo ** p = (ns1__MachineInfo **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__MachineInfo, sizeof(ns1__MachineInfo), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__RainbowTableStatus(struct soap *soap, ns1__RainbowTableStatus *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__RainbowTableStatus))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__RainbowTableStatus(struct soap *soap, ns1__RainbowTableStatus *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons1__RainbowTableStatus);
	if (soap_out_PointerTons1__RainbowTableStatus(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__RainbowTableStatus(struct soap *soap, const char *tag, int id, ns1__RainbowTableStatus *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__RainbowTableStatus);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__RainbowTableStatus ** SOAP_FMAC4 soap_get_PointerTons1__RainbowTableStatus(struct soap *soap, ns1__RainbowTableStatus **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__RainbowTableStatus(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 ns1__RainbowTableStatus ** SOAP_FMAC4 soap_in_PointerTons1__RainbowTableStatus(struct soap *soap, const char *tag, ns1__RainbowTableStatus **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__RainbowTableStatus **)soap_malloc(soap, sizeof(ns1__RainbowTableStatus *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__RainbowTableStatus *)soap_instantiate_ns1__RainbowTableStatus(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__RainbowTableStatus ** p = (ns1__RainbowTableStatus **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__RainbowTableStatus, sizeof(ns1__RainbowTableStatus), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ChainCheckHash(struct soap *soap, ns1__ChainCheckHash *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__ChainCheckHash))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ChainCheckHash(struct soap *soap, ns1__ChainCheckHash *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons1__ChainCheckHash);
	if (soap_out_PointerTons1__ChainCheckHash(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ChainCheckHash(struct soap *soap, const char *tag, int id, ns1__ChainCheckHash *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__ChainCheckHash);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__ChainCheckHash ** SOAP_FMAC4 soap_get_PointerTons1__ChainCheckHash(struct soap *soap, ns1__ChainCheckHash **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__ChainCheckHash(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 ns1__ChainCheckHash ** SOAP_FMAC4 soap_in_PointerTons1__ChainCheckHash(struct soap *soap, const char *tag, ns1__ChainCheckHash **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__ChainCheckHash **)soap_malloc(soap, sizeof(ns1__ChainCheckHash *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__ChainCheckHash *)soap_instantiate_ns1__ChainCheckHash(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__ChainCheckHash ** p = (ns1__ChainCheckHash **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__ChainCheckHash, sizeof(ns1__ChainCheckHash), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__IndexHash(struct soap *soap, ns1__IndexHash *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__IndexHash))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__IndexHash(struct soap *soap, ns1__IndexHash *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons1__IndexHash);
	if (soap_out_PointerTons1__IndexHash(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__IndexHash(struct soap *soap, const char *tag, int id, ns1__IndexHash *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__IndexHash);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__IndexHash ** SOAP_FMAC4 soap_get_PointerTons1__IndexHash(struct soap *soap, ns1__IndexHash **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__IndexHash(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 ns1__IndexHash ** SOAP_FMAC4 soap_in_PointerTons1__IndexHash(struct soap *soap, const char *tag, ns1__IndexHash **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__IndexHash **)soap_malloc(soap, sizeof(ns1__IndexHash *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__IndexHash *)soap_instantiate_ns1__IndexHash(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__IndexHash ** p = (ns1__IndexHash **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__IndexHash, sizeof(ns1__IndexHash), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__WorkUnit(struct soap *soap, ns1__WorkUnit *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__WorkUnit))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__WorkUnit(struct soap *soap, ns1__WorkUnit *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons1__WorkUnit);
	if (soap_out_PointerTons1__WorkUnit(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__WorkUnit(struct soap *soap, const char *tag, int id, ns1__WorkUnit *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__WorkUnit);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__WorkUnit ** SOAP_FMAC4 soap_get_PointerTons1__WorkUnit(struct soap *soap, ns1__WorkUnit **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__WorkUnit(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 ns1__WorkUnit ** SOAP_FMAC4 soap_in_PointerTons1__WorkUnit(struct soap *soap, const char *tag, ns1__WorkUnit **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__WorkUnit **)soap_malloc(soap, sizeof(ns1__WorkUnit *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__WorkUnit *)soap_instantiate_ns1__WorkUnit(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__WorkUnit ** p = (ns1__WorkUnit **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__WorkUnit, sizeof(ns1__WorkUnit), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ArrayOfCPU(struct soap *soap, ns1__ArrayOfCPU *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__ArrayOfCPU))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ArrayOfCPU(struct soap *soap, ns1__ArrayOfCPU *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons1__ArrayOfCPU);
	if (soap_out_PointerTons1__ArrayOfCPU(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ArrayOfCPU(struct soap *soap, const char *tag, int id, ns1__ArrayOfCPU *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__ArrayOfCPU);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__ArrayOfCPU ** SOAP_FMAC4 soap_get_PointerTons1__ArrayOfCPU(struct soap *soap, ns1__ArrayOfCPU **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__ArrayOfCPU(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 ns1__ArrayOfCPU ** SOAP_FMAC4 soap_in_PointerTons1__ArrayOfCPU(struct soap *soap, const char *tag, ns1__ArrayOfCPU **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__ArrayOfCPU **)soap_malloc(soap, sizeof(ns1__ArrayOfCPU *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__ArrayOfCPU *)soap_instantiate_ns1__ArrayOfCPU(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__ArrayOfCPU ** p = (ns1__ArrayOfCPU **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__ArrayOfCPU, sizeof(ns1__ArrayOfCPU), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__Credentials(struct soap *soap, ns1__Credentials *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__Credentials))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__Credentials(struct soap *soap, ns1__Credentials *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons1__Credentials);
	if (soap_out_PointerTons1__Credentials(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__Credentials(struct soap *soap, const char *tag, int id, ns1__Credentials *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__Credentials);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__Credentials ** SOAP_FMAC4 soap_get_PointerTons1__Credentials(struct soap *soap, ns1__Credentials **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__Credentials(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 ns1__Credentials ** SOAP_FMAC4 soap_in_PointerTons1__Credentials(struct soap *soap, const char *tag, ns1__Credentials **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__Credentials **)soap_malloc(soap, sizeof(ns1__Credentials *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__Credentials *)soap_instantiate_ns1__Credentials(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__Credentials ** p = (ns1__Credentials **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__Credentials, sizeof(ns1__Credentials), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__CPU(struct soap *soap, ns1__CPU *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__CPU))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__CPU(struct soap *soap, ns1__CPU *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons1__CPU);
	if (soap_out_PointerTons1__CPU(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__CPU(struct soap *soap, const char *tag, int id, ns1__CPU *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__CPU);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__CPU ** SOAP_FMAC4 soap_get_PointerTons1__CPU(struct soap *soap, ns1__CPU **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__CPU(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 ns1__CPU ** SOAP_FMAC4 soap_in_PointerTons1__CPU(struct soap *soap, const char *tag, ns1__CPU **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__CPU **)soap_malloc(soap, sizeof(ns1__CPU *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__CPU *)soap_instantiate_ns1__CPU(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__CPU ** p = (ns1__CPU **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__CPU, sizeof(ns1__CPU), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTounsignedByte(struct soap *soap, unsigned char *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_unsignedByte);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTounsignedByte(struct soap *soap, unsigned char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTounsignedByte);
	if (soap_out_PointerTounsignedByte(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTounsignedByte(struct soap *soap, const char *tag, int id, unsigned char *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_unsignedByte);
	if (id < 0)
		return soap->error;
	return soap_out_unsignedByte(soap, tag, id, *a, type);
}

SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_get_PointerTounsignedByte(struct soap *soap, unsigned char **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTounsignedByte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_in_PointerTounsignedByte(struct soap *soap, const char *tag, unsigned char **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (unsigned char **)soap_malloc(soap, sizeof(unsigned char *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_unsignedByte(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (unsigned char **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_unsignedByte, sizeof(unsigned char), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default__QName(struct soap *soap, char **a)
{	soap_default_string(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap *soap, char *const*a)
{	soap_serialize_string(soap, a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE__QName);
	if (soap_out__QName(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE__QName);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{
	return soap_instring(soap, tag, a, type, SOAP_TYPE__QName, 2, -1, -1);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap *soap, char **a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_string);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_string);
	if (soap_out_string(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_string);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{
	return soap_instring(soap, tag, a, type, SOAP_TYPE_string, 1, -1, -1);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__RainbowTableStatus(struct soap *soap, std::vector<ns1__RainbowTableStatus * >*p)
{
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__RainbowTableStatus(struct soap *soap, const std::vector<ns1__RainbowTableStatus * >*a)
{
	for (std::vector<ns1__RainbowTableStatus * >::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_PointerTons1__RainbowTableStatus(soap, &(*i));
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__RainbowTableStatus(struct soap *soap, const char *tag, int id, const std::vector<ns1__RainbowTableStatus * >*a, const char *type)
{
	for (std::vector<ns1__RainbowTableStatus * >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_PointerTons1__RainbowTableStatus(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<ns1__RainbowTableStatus * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__RainbowTableStatus(struct soap *soap, const char *tag, std::vector<ns1__RainbowTableStatus * >*a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a && !(a = soap_new_std__vectorTemplateOfPointerTons1__RainbowTableStatus(soap, -1)))
		return NULL;
	ns1__RainbowTableStatus *n;
	short soap_flag = 0;
	do
	{	soap_revert(soap);
		n = NULL;
		if (*soap->id || *soap->href)
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_ns1__RainbowTableStatus, SOAP_TYPE_std__vectorTemplateOfPointerTons1__RainbowTableStatus, sizeof(ns1__RainbowTableStatus), 1))
				break;
			if (!soap_in_PointerTons1__RainbowTableStatus(soap, tag, NULL, "ns1:RainbowTableStatus"))
				break;
		}
		else
		{
			if (!soap_in_PointerTons1__RainbowTableStatus(soap, tag, &n, "ns1:RainbowTableStatus"))
				break;
		}
		a->push_back(n);
		soap_flag = 1;
	}
	while (tag && *tag != '-' && !soap_element_begin_in(soap, tag, 1, NULL));
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC5 std::vector<ns1__RainbowTableStatus * > * SOAP_FMAC6 soap_new_std__vectorTemplateOfPointerTons1__RainbowTableStatus(struct soap *soap, int n)
{	return soap_instantiate_std__vectorTemplateOfPointerTons1__RainbowTableStatus(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_std__vectorTemplateOfPointerTons1__RainbowTableStatus(struct soap *soap, std::vector<ns1__RainbowTableStatus * >*p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 std::vector<ns1__RainbowTableStatus * > * SOAP_FMAC4 soap_instantiate_std__vectorTemplateOfPointerTons1__RainbowTableStatus(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfPointerTons1__RainbowTableStatus(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOfPointerTons1__RainbowTableStatus, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new std::vector<ns1__RainbowTableStatus * >;
		if (size)
			*size = sizeof(std::vector<ns1__RainbowTableStatus * >);
	}
	else
	{	cp->ptr = (void*)new std::vector<ns1__RainbowTableStatus * >[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::vector<ns1__RainbowTableStatus * >);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::vector<ns1__RainbowTableStatus * >*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons1__RainbowTableStatus(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<ns1__RainbowTableStatus * > %p -> %p\n", q, p));
	*(std::vector<ns1__RainbowTableStatus * >*)p = *(std::vector<ns1__RainbowTableStatus * >*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__ChainCheckHash(struct soap *soap, std::vector<ns1__ChainCheckHash * >*p)
{
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__ChainCheckHash(struct soap *soap, const std::vector<ns1__ChainCheckHash * >*a)
{
	for (std::vector<ns1__ChainCheckHash * >::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_PointerTons1__ChainCheckHash(soap, &(*i));
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__ChainCheckHash(struct soap *soap, const char *tag, int id, const std::vector<ns1__ChainCheckHash * >*a, const char *type)
{
	for (std::vector<ns1__ChainCheckHash * >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_PointerTons1__ChainCheckHash(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<ns1__ChainCheckHash * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__ChainCheckHash(struct soap *soap, const char *tag, std::vector<ns1__ChainCheckHash * >*a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a && !(a = soap_new_std__vectorTemplateOfPointerTons1__ChainCheckHash(soap, -1)))
		return NULL;
	ns1__ChainCheckHash *n;
	short soap_flag = 0;
	do
	{	soap_revert(soap);
		n = NULL;
		if (*soap->id || *soap->href)
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_ns1__ChainCheckHash, SOAP_TYPE_std__vectorTemplateOfPointerTons1__ChainCheckHash, sizeof(ns1__ChainCheckHash), 1))
				break;
			if (!soap_in_PointerTons1__ChainCheckHash(soap, tag, NULL, "ns1:ChainCheckHash"))
				break;
		}
		else
		{
			if (!soap_in_PointerTons1__ChainCheckHash(soap, tag, &n, "ns1:ChainCheckHash"))
				break;
		}
		a->push_back(n);
		soap_flag = 1;
	}
	while (tag && *tag != '-' && !soap_element_begin_in(soap, tag, 1, NULL));
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC5 std::vector<ns1__ChainCheckHash * > * SOAP_FMAC6 soap_new_std__vectorTemplateOfPointerTons1__ChainCheckHash(struct soap *soap, int n)
{	return soap_instantiate_std__vectorTemplateOfPointerTons1__ChainCheckHash(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_std__vectorTemplateOfPointerTons1__ChainCheckHash(struct soap *soap, std::vector<ns1__ChainCheckHash * >*p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 std::vector<ns1__ChainCheckHash * > * SOAP_FMAC4 soap_instantiate_std__vectorTemplateOfPointerTons1__ChainCheckHash(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfPointerTons1__ChainCheckHash(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOfPointerTons1__ChainCheckHash, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new std::vector<ns1__ChainCheckHash * >;
		if (size)
			*size = sizeof(std::vector<ns1__ChainCheckHash * >);
	}
	else
	{	cp->ptr = (void*)new std::vector<ns1__ChainCheckHash * >[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::vector<ns1__ChainCheckHash * >);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::vector<ns1__ChainCheckHash * >*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons1__ChainCheckHash(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<ns1__ChainCheckHash * > %p -> %p\n", q, p));
	*(std::vector<ns1__ChainCheckHash * >*)p = *(std::vector<ns1__ChainCheckHash * >*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__IndexHash(struct soap *soap, std::vector<ns1__IndexHash * >*p)
{
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__IndexHash(struct soap *soap, const std::vector<ns1__IndexHash * >*a)
{
	for (std::vector<ns1__IndexHash * >::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_PointerTons1__IndexHash(soap, &(*i));
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__IndexHash(struct soap *soap, const char *tag, int id, const std::vector<ns1__IndexHash * >*a, const char *type)
{
	for (std::vector<ns1__IndexHash * >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_PointerTons1__IndexHash(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<ns1__IndexHash * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__IndexHash(struct soap *soap, const char *tag, std::vector<ns1__IndexHash * >*a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a && !(a = soap_new_std__vectorTemplateOfPointerTons1__IndexHash(soap, -1)))
		return NULL;
	ns1__IndexHash *n;
	short soap_flag = 0;
	do
	{	soap_revert(soap);
		n = NULL;
		if (*soap->id || *soap->href)
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_ns1__IndexHash, SOAP_TYPE_std__vectorTemplateOfPointerTons1__IndexHash, sizeof(ns1__IndexHash), 1))
				break;
			if (!soap_in_PointerTons1__IndexHash(soap, tag, NULL, "ns1:IndexHash"))
				break;
		}
		else
		{
			if (!soap_in_PointerTons1__IndexHash(soap, tag, &n, "ns1:IndexHash"))
				break;
		}
		a->push_back(n);
		soap_flag = 1;
	}
	while (tag && *tag != '-' && !soap_element_begin_in(soap, tag, 1, NULL));
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC5 std::vector<ns1__IndexHash * > * SOAP_FMAC6 soap_new_std__vectorTemplateOfPointerTons1__IndexHash(struct soap *soap, int n)
{	return soap_instantiate_std__vectorTemplateOfPointerTons1__IndexHash(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_std__vectorTemplateOfPointerTons1__IndexHash(struct soap *soap, std::vector<ns1__IndexHash * >*p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 std::vector<ns1__IndexHash * > * SOAP_FMAC4 soap_instantiate_std__vectorTemplateOfPointerTons1__IndexHash(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfPointerTons1__IndexHash(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOfPointerTons1__IndexHash, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new std::vector<ns1__IndexHash * >;
		if (size)
			*size = sizeof(std::vector<ns1__IndexHash * >);
	}
	else
	{	cp->ptr = (void*)new std::vector<ns1__IndexHash * >[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::vector<ns1__IndexHash * >);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::vector<ns1__IndexHash * >*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons1__IndexHash(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<ns1__IndexHash * > %p -> %p\n", q, p));
	*(std::vector<ns1__IndexHash * >*)p = *(std::vector<ns1__IndexHash * >*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__WorkUnit(struct soap *soap, std::vector<ns1__WorkUnit * >*p)
{
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__WorkUnit(struct soap *soap, const std::vector<ns1__WorkUnit * >*a)
{
	for (std::vector<ns1__WorkUnit * >::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_PointerTons1__WorkUnit(soap, &(*i));
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__WorkUnit(struct soap *soap, const char *tag, int id, const std::vector<ns1__WorkUnit * >*a, const char *type)
{
	for (std::vector<ns1__WorkUnit * >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_PointerTons1__WorkUnit(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<ns1__WorkUnit * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__WorkUnit(struct soap *soap, const char *tag, std::vector<ns1__WorkUnit * >*a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a && !(a = soap_new_std__vectorTemplateOfPointerTons1__WorkUnit(soap, -1)))
		return NULL;
	ns1__WorkUnit *n;
	short soap_flag = 0;
	do
	{	soap_revert(soap);
		n = NULL;
		if (*soap->id || *soap->href)
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_ns1__WorkUnit, SOAP_TYPE_std__vectorTemplateOfPointerTons1__WorkUnit, sizeof(ns1__WorkUnit), 1))
				break;
			if (!soap_in_PointerTons1__WorkUnit(soap, tag, NULL, "ns1:WorkUnit"))
				break;
		}
		else
		{
			if (!soap_in_PointerTons1__WorkUnit(soap, tag, &n, "ns1:WorkUnit"))
				break;
		}
		a->push_back(n);
		soap_flag = 1;
	}
	while (tag && *tag != '-' && !soap_element_begin_in(soap, tag, 1, NULL));
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC5 std::vector<ns1__WorkUnit * > * SOAP_FMAC6 soap_new_std__vectorTemplateOfPointerTons1__WorkUnit(struct soap *soap, int n)
{	return soap_instantiate_std__vectorTemplateOfPointerTons1__WorkUnit(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_std__vectorTemplateOfPointerTons1__WorkUnit(struct soap *soap, std::vector<ns1__WorkUnit * >*p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 std::vector<ns1__WorkUnit * > * SOAP_FMAC4 soap_instantiate_std__vectorTemplateOfPointerTons1__WorkUnit(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfPointerTons1__WorkUnit(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOfPointerTons1__WorkUnit, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new std::vector<ns1__WorkUnit * >;
		if (size)
			*size = sizeof(std::vector<ns1__WorkUnit * >);
	}
	else
	{	cp->ptr = (void*)new std::vector<ns1__WorkUnit * >[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::vector<ns1__WorkUnit * >);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::vector<ns1__WorkUnit * >*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons1__WorkUnit(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<ns1__WorkUnit * > %p -> %p\n", q, p));
	*(std::vector<ns1__WorkUnit * >*)p = *(std::vector<ns1__WorkUnit * >*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__CPU(struct soap *soap, std::vector<ns1__CPU * >*p)
{
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__CPU(struct soap *soap, const std::vector<ns1__CPU * >*a)
{
	for (std::vector<ns1__CPU * >::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_PointerTons1__CPU(soap, &(*i));
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__CPU(struct soap *soap, const char *tag, int id, const std::vector<ns1__CPU * >*a, const char *type)
{
	for (std::vector<ns1__CPU * >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_PointerTons1__CPU(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<ns1__CPU * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__CPU(struct soap *soap, const char *tag, std::vector<ns1__CPU * >*a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a && !(a = soap_new_std__vectorTemplateOfPointerTons1__CPU(soap, -1)))
		return NULL;
	ns1__CPU *n;
	short soap_flag = 0;
	do
	{	soap_revert(soap);
		n = NULL;
		if (*soap->id || *soap->href)
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_ns1__CPU, SOAP_TYPE_std__vectorTemplateOfPointerTons1__CPU, sizeof(ns1__CPU), 1))
				break;
			if (!soap_in_PointerTons1__CPU(soap, tag, NULL, "ns1:CPU"))
				break;
		}
		else
		{
			if (!soap_in_PointerTons1__CPU(soap, tag, &n, "ns1:CPU"))
				break;
		}
		a->push_back(n);
		soap_flag = 1;
	}
	while (tag && *tag != '-' && !soap_element_begin_in(soap, tag, 1, NULL));
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC5 std::vector<ns1__CPU * > * SOAP_FMAC6 soap_new_std__vectorTemplateOfPointerTons1__CPU(struct soap *soap, int n)
{	return soap_instantiate_std__vectorTemplateOfPointerTons1__CPU(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_std__vectorTemplateOfPointerTons1__CPU(struct soap *soap, std::vector<ns1__CPU * >*p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 std::vector<ns1__CPU * > * SOAP_FMAC4 soap_instantiate_std__vectorTemplateOfPointerTons1__CPU(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfPointerTons1__CPU(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOfPointerTons1__CPU, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new std::vector<ns1__CPU * >;
		if (size)
			*size = sizeof(std::vector<ns1__CPU * >);
	}
	else
	{	cp->ptr = (void*)new std::vector<ns1__CPU * >[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::vector<ns1__CPU * >);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::vector<ns1__CPU * >*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons1__CPU(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<ns1__CPU * > %p -> %p\n", q, p));
	*(std::vector<ns1__CPU * >*)p = *(std::vector<ns1__CPU * >*)q;
}

/* End of soapC.cpp */
