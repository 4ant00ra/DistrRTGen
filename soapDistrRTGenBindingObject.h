/* soapDistrRTGenBindingObject.h
   Generated by gSOAP 2.7.11 from temp.h
   Copyright(C) 2000-2008, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#ifndef soapDistrRTGenBindingObject_H
#define soapDistrRTGenBindingObject_H
#include "soapH.h"

/******************************************************************************\
 *                                                                            *
 * Service Object                                                             *
 *                                                                            *
\******************************************************************************/

class DistrRTGenBindingService : public soap
{    public:
	DistrRTGenBindingService()
	{ static const struct Namespace namespaces[] =
{
	{"SOAP-ENV", "http://schemas.xmlsoap.org/soap/envelope/", "http://www.w3.org/*/soap-envelope", NULL},
	{"SOAP-ENC", "http://schemas.xmlsoap.org/soap/encoding/", "http://www.w3.org/*/soap-encoding", NULL},
	{"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
	{"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
	{"ns1", "urn:DistrRTGen", NULL, NULL},
	{NULL, NULL, NULL, NULL}
};
	if (!this->namespaces) this->namespaces = namespaces; };
	virtual ~DistrRTGenBindingService() { };
	/// Bind service to port (returns master socket or SOAP_INVALID_SOCKET)
	virtual	SOAP_SOCKET bind(const char *host, int port, int backlog) { return soap_bind(this, host, port, backlog); };
	/// Accept next request (returns socket or SOAP_INVALID_SOCKET)
	virtual	SOAP_SOCKET accept() { return soap_accept(this); };
	/// Serve this request (returns error code or SOAP_OK)
	virtual	int serve() { return soap_serve(this); };
};

/******************************************************************************\
 *                                                                            *
 * Service Operations (you should define these globally)                      *
 *                                                                            *
\******************************************************************************/


SOAP_FMAC5 int SOAP_FMAC6 ns1__RegisterNewClient(struct soap*, ns1__MachineInfo *MachineInfo, struct ns1__RegisterNewClientResponse &_param_1);

SOAP_FMAC5 int SOAP_FMAC6 ns1__RequestWork(struct soap*, ns1__MachineInfo *MachineInfo, int NumPieces, struct ns1__RequestWorkResponse &_param_2);

SOAP_FMAC5 int SOAP_FMAC6 ns1__UploadCompletedWork(struct soap*, int PartID, xsd__base64Binary Data, struct ns1__UploadCompletedWorkResponse &_param_3);

SOAP_FMAC5 int SOAP_FMAC6 ns1__RequestHashToIndex(struct soap*, ns1__MachineInfo *MachineInfo, unsigned int NumHashes, unsigned int RecievePublicHashes, struct ns1__RequestHashToIndexResponse &_param_4);

SOAP_FMAC5 int SOAP_FMAC6 ns1__UploadHashIndexList(struct soap*, ns1__MachineInfo *MachineInfo, unsigned int RequestID, std::string IndiceList, struct ns1__UploadHashIndexListResponse &_param_5);

SOAP_FMAC5 int SOAP_FMAC6 ns1__RequestChainCheck(struct soap*, ns1__MachineInfo *MachineInfo, unsigned int NumHashes, unsigned int RecievePublicHashes, struct ns1__RequestChainCheckResponse &_param_6);

SOAP_FMAC5 int SOAP_FMAC6 ns1__SendChainCheckResult(struct soap*, ns1__MachineInfo *MachineInfo, unsigned int RequestID, std::string Password, struct ns1__SendChainCheckResultResponse &_param_7);

SOAP_FMAC5 int SOAP_FMAC6 ns1__ReportError(struct soap*, ns1__MachineInfo *MachineInfo, std::string ErrorString, struct ns1__ReportErrorResponse &_param_8);

SOAP_FMAC5 int SOAP_FMAC6 ns1__RequestDetailedCrackingInfo(struct soap*, int RequestID, struct ns1__RequestDetailedCrackingInfoResponse &_param_9);

#endif
