/* soapClient.cpp
   Generated by gSOAP 2.7.11 from temp.h
   Copyright(C) 2000-2008, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/
#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapClient.cpp ver 2.7.11 2008-08-31 14:10:32 GMT")


SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__RegisterNewClient(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__MachineInfo *MachineInfo, struct ns1__RegisterNewClientResponse &_param_1)
{	struct ns1__RegisterNewClient soap_tmp_ns1__RegisterNewClient;
	if (!soap_endpoint)
		soap_endpoint = "http://distributed.freerainbowtables.com/server.php";
	if (!soap_action)
		soap_action = "urn:RegisterNewClientAction";
	soap->encodingStyle = NULL;
	soap_tmp_ns1__RegisterNewClient.MachineInfo = MachineInfo;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__RegisterNewClient(soap, &soap_tmp_ns1__RegisterNewClient);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__RegisterNewClient(soap, &soap_tmp_ns1__RegisterNewClient, "ns1:RegisterNewClient", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__RegisterNewClient(soap, &soap_tmp_ns1__RegisterNewClient, "ns1:RegisterNewClient", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_1)
		return soap_closesock(soap);
	soap_default_ns1__RegisterNewClientResponse(soap, &_param_1);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns1__RegisterNewClientResponse(soap, &_param_1, "ns1:RegisterNewClientResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__RequestWork(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__MachineInfo *MachineInfo, int NumPieces, struct ns1__RequestWorkResponse &_param_2)
{	struct ns1__RequestWork soap_tmp_ns1__RequestWork;
	if (!soap_endpoint)
		soap_endpoint = "http://distributed.freerainbowtables.com/server.php";
	if (!soap_action)
		soap_action = "urn:RequestWorkAction";
	soap->encodingStyle = NULL;
	soap_tmp_ns1__RequestWork.MachineInfo = MachineInfo;
	soap_tmp_ns1__RequestWork.NumPieces = NumPieces;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__RequestWork(soap, &soap_tmp_ns1__RequestWork);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__RequestWork(soap, &soap_tmp_ns1__RequestWork, "ns1:RequestWork", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__RequestWork(soap, &soap_tmp_ns1__RequestWork, "ns1:RequestWork", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_2)
		return soap_closesock(soap);
	soap_default_ns1__RequestWorkResponse(soap, &_param_2);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns1__RequestWorkResponse(soap, &_param_2, "ns1:RequestWorkResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__UploadCompletedWork(struct soap *soap, const char *soap_endpoint, const char *soap_action, int PartID, xsd__base64Binary Data, struct ns1__UploadCompletedWorkResponse &_param_3)
{	struct ns1__UploadCompletedWork soap_tmp_ns1__UploadCompletedWork;
	if (!soap_endpoint)
		soap_endpoint = "http://distributed.freerainbowtables.com/server.php";
	if (!soap_action)
		soap_action = "urn:UploadCompletedWorkAction";
	soap->encodingStyle = NULL;
	soap_tmp_ns1__UploadCompletedWork.PartID = PartID;
	soap_tmp_ns1__UploadCompletedWork.Data = Data;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__UploadCompletedWork(soap, &soap_tmp_ns1__UploadCompletedWork);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__UploadCompletedWork(soap, &soap_tmp_ns1__UploadCompletedWork, "ns1:UploadCompletedWork", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__UploadCompletedWork(soap, &soap_tmp_ns1__UploadCompletedWork, "ns1:UploadCompletedWork", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_3)
		return soap_closesock(soap);
	soap_default_ns1__UploadCompletedWorkResponse(soap, &_param_3);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns1__UploadCompletedWorkResponse(soap, &_param_3, "ns1:UploadCompletedWorkResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__RequestHashToIndex(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__MachineInfo *MachineInfo, unsigned int NumHashes, unsigned int RecievePublicHashes, struct ns1__RequestHashToIndexResponse &_param_4)
{	struct ns1__RequestHashToIndex soap_tmp_ns1__RequestHashToIndex;
	if (!soap_endpoint)
		soap_endpoint = "http://distributed.freerainbowtables.com/server.php";
	if (!soap_action)
		soap_action = "urn:RequestHashToIndexAction";
	soap->encodingStyle = NULL;
	soap_tmp_ns1__RequestHashToIndex.MachineInfo = MachineInfo;
	soap_tmp_ns1__RequestHashToIndex.NumHashes = NumHashes;
	soap_tmp_ns1__RequestHashToIndex.RecievePublicHashes = RecievePublicHashes;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__RequestHashToIndex(soap, &soap_tmp_ns1__RequestHashToIndex);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__RequestHashToIndex(soap, &soap_tmp_ns1__RequestHashToIndex, "ns1:RequestHashToIndex", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__RequestHashToIndex(soap, &soap_tmp_ns1__RequestHashToIndex, "ns1:RequestHashToIndex", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_4)
		return soap_closesock(soap);
	soap_default_ns1__RequestHashToIndexResponse(soap, &_param_4);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns1__RequestHashToIndexResponse(soap, &_param_4, "ns1:RequestHashToIndexResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__UploadHashIndexList(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__MachineInfo *MachineInfo, unsigned int RequestID, std::string IndiceList, struct ns1__UploadHashIndexListResponse &_param_5)
{	struct ns1__UploadHashIndexList soap_tmp_ns1__UploadHashIndexList;
	if (!soap_endpoint)
		soap_endpoint = "http://distributed.freerainbowtables.com/server.php";
	if (!soap_action)
		soap_action = "urn:UploadHashIndexListAction";
	soap->encodingStyle = NULL;
	soap_tmp_ns1__UploadHashIndexList.MachineInfo = MachineInfo;
	soap_tmp_ns1__UploadHashIndexList.RequestID = RequestID;
	soap_tmp_ns1__UploadHashIndexList.IndiceList = IndiceList;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__UploadHashIndexList(soap, &soap_tmp_ns1__UploadHashIndexList);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__UploadHashIndexList(soap, &soap_tmp_ns1__UploadHashIndexList, "ns1:UploadHashIndexList", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__UploadHashIndexList(soap, &soap_tmp_ns1__UploadHashIndexList, "ns1:UploadHashIndexList", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_5)
		return soap_closesock(soap);
	soap_default_ns1__UploadHashIndexListResponse(soap, &_param_5);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns1__UploadHashIndexListResponse(soap, &_param_5, "ns1:UploadHashIndexListResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__RequestChainCheck(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__MachineInfo *MachineInfo, unsigned int NumHashes, unsigned int RecievePublicHashes, struct ns1__RequestChainCheckResponse &_param_6)
{	struct ns1__RequestChainCheck soap_tmp_ns1__RequestChainCheck;
	if (!soap_endpoint)
		soap_endpoint = "http://distributed.freerainbowtables.com/server.php";
	if (!soap_action)
		soap_action = "urn:RequestChainCheckAction";
	soap->encodingStyle = NULL;
	soap_tmp_ns1__RequestChainCheck.MachineInfo = MachineInfo;
	soap_tmp_ns1__RequestChainCheck.NumHashes = NumHashes;
	soap_tmp_ns1__RequestChainCheck.RecievePublicHashes = RecievePublicHashes;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__RequestChainCheck(soap, &soap_tmp_ns1__RequestChainCheck);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__RequestChainCheck(soap, &soap_tmp_ns1__RequestChainCheck, "ns1:RequestChainCheck", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__RequestChainCheck(soap, &soap_tmp_ns1__RequestChainCheck, "ns1:RequestChainCheck", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_6)
		return soap_closesock(soap);
	soap_default_ns1__RequestChainCheckResponse(soap, &_param_6);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns1__RequestChainCheckResponse(soap, &_param_6, "ns1:RequestChainCheckResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__SendChainCheckResult(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__MachineInfo *MachineInfo, unsigned int RequestID, std::string Password, struct ns1__SendChainCheckResultResponse &_param_7)
{	struct ns1__SendChainCheckResult soap_tmp_ns1__SendChainCheckResult;
	if (!soap_endpoint)
		soap_endpoint = "http://distributed.freerainbowtables.com/server.php";
	if (!soap_action)
		soap_action = "urn:SendChainCheckResultAction";
	soap->encodingStyle = NULL;
	soap_tmp_ns1__SendChainCheckResult.MachineInfo = MachineInfo;
	soap_tmp_ns1__SendChainCheckResult.RequestID = RequestID;
	soap_tmp_ns1__SendChainCheckResult.Password = Password;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__SendChainCheckResult(soap, &soap_tmp_ns1__SendChainCheckResult);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__SendChainCheckResult(soap, &soap_tmp_ns1__SendChainCheckResult, "ns1:SendChainCheckResult", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__SendChainCheckResult(soap, &soap_tmp_ns1__SendChainCheckResult, "ns1:SendChainCheckResult", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_7)
		return soap_closesock(soap);
	soap_default_ns1__SendChainCheckResultResponse(soap, &_param_7);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns1__SendChainCheckResultResponse(soap, &_param_7, "ns1:SendChainCheckResultResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__ReportError(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__MachineInfo *MachineInfo, std::string ErrorString, struct ns1__ReportErrorResponse &_param_8)
{	struct ns1__ReportError soap_tmp_ns1__ReportError;
	if (!soap_endpoint)
		soap_endpoint = "http://distributed.freerainbowtables.com/server.php";
	if (!soap_action)
		soap_action = "urn:ReportErrorAction";
	soap->encodingStyle = NULL;
	soap_tmp_ns1__ReportError.MachineInfo = MachineInfo;
	soap_tmp_ns1__ReportError.ErrorString = ErrorString;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__ReportError(soap, &soap_tmp_ns1__ReportError);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__ReportError(soap, &soap_tmp_ns1__ReportError, "ns1:ReportError", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__ReportError(soap, &soap_tmp_ns1__ReportError, "ns1:ReportError", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_8)
		return soap_closesock(soap);
	soap_default_ns1__ReportErrorResponse(soap, &_param_8);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns1__ReportErrorResponse(soap, &_param_8, "ns1:ReportErrorResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__RequestDetailedCrackingInfo(struct soap *soap, const char *soap_endpoint, const char *soap_action, int RequestID, struct ns1__RequestDetailedCrackingInfoResponse &_param_9)
{	struct ns1__RequestDetailedCrackingInfo soap_tmp_ns1__RequestDetailedCrackingInfo;
	if (!soap_endpoint)
		soap_endpoint = "http://distributed.freerainbowtables.com/server.php";
	if (!soap_action)
		soap_action = "urn:RequestDetailedCrackingInfoAction";
	soap->encodingStyle = NULL;
	soap_tmp_ns1__RequestDetailedCrackingInfo.RequestID = RequestID;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__RequestDetailedCrackingInfo(soap, &soap_tmp_ns1__RequestDetailedCrackingInfo);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__RequestDetailedCrackingInfo(soap, &soap_tmp_ns1__RequestDetailedCrackingInfo, "ns1:RequestDetailedCrackingInfo", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__RequestDetailedCrackingInfo(soap, &soap_tmp_ns1__RequestDetailedCrackingInfo, "ns1:RequestDetailedCrackingInfo", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_9)
		return soap_closesock(soap);
	soap_default_ns1__RequestDetailedCrackingInfoResponse(soap, &_param_9);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns1__RequestDetailedCrackingInfoResponse(soap, &_param_9, "ns1:RequestDetailedCrackingInfoResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

/* End of soapClient.cpp */
