/* rcx.h
   Generated by wsdl2h 1.2.9k from http://distributed.freerainbowtables.com/service.wsdl and typemap.dat
   2008-08-29 06:17:20 GMT
   Copyright (C) 2001-2006 Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL or Genivia's license for commercial use.
*/

/* NOTE:

 - Compile this file with soapcpp2 to complete the code generation process.
 - Use soapcpp2 option -I to specify paths for #import
   To build with STL, 'stlvector.h' is imported from 'import' dir in package.
 - Use wsdl2h options -c and -s to generate pure C code or C++ code without STL.
 - Use 'typemap.dat' to control schema namespace bindings and type mappings.
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Use Doxygen (www.doxygen.org) to browse this file.
 - Use wsdl2h option -l to view the software license terms.

   DO NOT include this file directly into your project.
   Include only the soapcpp2-generated headers and source code files.
*/

//gsoapopt cw

/******************************************************************************\
 *                                                                            *
 * urn:DistrRTGen                                                             *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to typemap.dat to rerun wsdl2h:

ns1 = "urn:DistrRTGen"

*/

//gsoap ns1   schema namespace:	urn:DistrRTGen
//gsoap ns1   schema form:	unqualified

/******************************************************************************\
 *                                                                            *
 * Schema Types                                                               *
 *                                                                            *
\******************************************************************************/


/// Built-in type "xs:base64Binary".
struct xsd__base64Binary
{	unsigned char *__ptr;
	int __size;
	char *id, *type, *options; // NOTE: for DIME and MTOM XOP attachments only
};


/// "urn:DistrRTGen":Credentials is a complexType.
struct ns1__Credentials
{
/// Element Username of type xs:string.
    char*                                Username                       1;	///< Required element.
/// Element Password of type xs:string.
    char*                                Password                       1;	///< Required element.
};

/// "urn:DistrRTGen":CPU is a complexType.
struct ns1__CPU
{
/// Element Architecture of type xs:string.
    char*                                Architecture                   1;	///< Required element.
/// Element CurrentSpeed of type xs:int.
    int                                  CurrentSpeed                   1;	///< Required element.
/// Element MaxSpeed of type xs:int.
    int                                  MaxSpeed                       1;	///< Required element.
/// Element NumCores of type xs:int.
    int                                  NumCores                       1;	///< Required element.
};

/// "urn:DistrRTGen":ArrayOfCPU is a complexType.
struct ns1__ArrayOfCPU
{
/// Size of array of struct ns1__CPU* is 0..unbounded
    int                                  __sizeCPUElement              ;
/// Array of length 0..unbounded
    struct ns1__CPU*                     CPUElement                     0;
};

/// "urn:DistrRTGen":rtgenDetails is a complexType.
struct ns1__rtgenDetails
{
/// Element Version of type xs:string.
    char*                                Version                        1;	///< Required element.
/// Element Architecture of type xs:string.
    char*                                Architecture                   1;	///< Required element.
};

/// "urn:DistrRTGen":MachineInfo is a complexType.
struct ns1__MachineInfo
{
/// Element Credentials of type "urn:DistrRTGen":Credentials.
    struct ns1__Credentials*             Credentials                    1;	///< Required element.
/// Element Version of type xs:string.
    char*                                Version                        1;	///< Required element.
/// Element Hostname of type xs:string.
    char*                                Hostname                       1;	///< Required element.
/// Element SupportHybrid of type xs:int.
    int                                  SupportHybrid                  1;	///< Required element.
/// Element CPU of type "urn:DistrRTGen":ArrayOfCPU.
    struct ns1__ArrayOfCPU*              CPU                            1;	///< Required element.
/// Element ClientID of type xs:int.
    int                                  ClientID                       1;	///< Required element.
};

/// "urn:DistrRTGen":WorkUnit is a complexType.
struct ns1__WorkUnit
{
/// Element PartID of type xs:unsignedInt.
    unsigned int                         PartID                         1;	///< Required element.
/// Element HashRoutine of type xs:string.
    char*                                HashRoutine                    1;	///< Required element.
/// Element Charset of type xs:string.
    char*                                Charset                        1;	///< Required element.
/// Element MinLetters of type xs:unsignedInt.
    unsigned int                         MinLetters                     1;	///< Required element.
/// Element MaxLetters of type xs:unsignedInt.
    unsigned int                         MaxLetters                     1;	///< Required element.
/// Element Index of type xs:unsignedInt.
    unsigned int                         Index                          1;	///< Required element.
/// Element ChainLength of type xs:unsignedInt.
    unsigned int                         ChainLength                    1;	///< Required element.
/// Element ChainCount of type xs:unsignedInt.
    unsigned int                         ChainCount                     1;	///< Required element.
/// Element ChainStart of type xs:unsignedLong.
    ULONG64                              ChainStart                     1;	///< Required element.
/// Element Salt of type xs:string.
    char*                                Salt                           1;	///< Required element.
};

/// "urn:DistrRTGen":ArrayOfWorkUnit is a complexType.
struct ns1__ArrayOfWorkUnit
{
/// Size of array of struct ns1__WorkUnit* is 0..unbounded
    int                                  __sizeWorkUnitElement         ;
/// Array of length 0..unbounded
    struct ns1__WorkUnit*                WorkUnitElement                0;
};

/// "urn:DistrRTGen":IndexHash is a complexType.
struct ns1__IndexHash
{
/// Element RequestID of type xs:unsignedInt.
    unsigned int                         RequestID                      1;	///< Required element.
/// Element Hash of type xs:string.
    char*                                Hash                           1;	///< Required element.
/// Element HashRoutine of type xs:string.
    char*                                HashRoutine                    1;	///< Required element.
/// Element Charset of type xs:string.
    char*                                Charset                        1;	///< Required element.
/// Element ChainLength of type xs:unsignedInt.
    unsigned int                         ChainLength                    1;	///< Required element.
/// Element MinLetters of type xs:unsignedInt.
    unsigned int                         MinLetters                     1;	///< Required element.
/// Element MaxLetters of type xs:unsignedInt.
    unsigned int                         MaxLetters                     1;	///< Required element.
/// Element Index of type xs:unsignedInt.
    unsigned int                         Index                          1;	///< Required element.
/// Element Salt of type xs:string.
    char*                                Salt                           1;	///< Required element.
/// Element ExpireTime of type xs:string.
    char*                                ExpireTime                     1;	///< Required element.
};

/// "urn:DistrRTGen":ArrayOfIndexHash is a complexType.
struct ns1__ArrayOfIndexHash
{
/// Size of array of struct ns1__IndexHash* is 0..unbounded
    int                                  __sizeIndexHashElement        ;
/// Array of length 0..unbounded
    struct ns1__IndexHash*               IndexHashElement               0;
};

/// "urn:DistrRTGen":ChainCheckHash is a complexType.
struct ns1__ChainCheckHash
{
/// Element RequestID of type xs:unsignedInt.
    unsigned int                         RequestID                      1;	///< Required element.
/// Element Hash of type xs:string.
    char*                                Hash                           1;	///< Required element.
/// Element HashRoutine of type xs:string.
    char*                                HashRoutine                    1;	///< Required element.
/// Element Charset of type xs:string.
    char*                                Charset                        1;	///< Required element.
/// Element ChainLength of type xs:unsignedInt.
    unsigned int                         ChainLength                    1;	///< Required element.
/// Element MinLetters of type xs:unsignedInt.
    unsigned int                         MinLetters                     1;	///< Required element.
/// Element MaxLetters of type xs:unsignedInt.
    unsigned int                         MaxLetters                     1;	///< Required element.
/// Element Index of type xs:unsignedInt.
    unsigned int                         Index                          1;	///< Required element.
/// Element Salt of type xs:string.
    char*                                Salt                           1;	///< Required element.
/// Element ExpireTime of type xs:string.
    char*                                ExpireTime                     1;	///< Required element.
/// Element Chains of type xs:string.
    char*                                Chains                         1;	///< Required element.
};

/// "urn:DistrRTGen":ArrayOfChainCheckHash is a complexType.
struct ns1__ArrayOfChainCheckHash
{
/// Size of array of struct ns1__ChainCheckHash* is 0..unbounded
    int                                  __sizeChainCheckHashElement   ;
/// Array of length 0..unbounded
    struct ns1__ChainCheckHash*          ChainCheckHashElement          0;
};

/// "urn:DistrRTGen":RainbowTableStatus is a complexType.
struct ns1__RainbowTableStatus
{
/// Element Tablename of type xs:string.
    char*                                Tablename                      1;	///< Required element.
/// Element Status of type xs:string.
    char*                                Status                         1;	///< Required element.
};

/// "urn:DistrRTGen":ArrayOfRainbowTableStatus is a complexType.
struct ns1__ArrayOfRainbowTableStatus
{
/// Size of array of struct ns1__RainbowTableStatus* is 0..unbounded
    int                                  __sizeRainbowTableStatusElement;
/// Array of length 0..unbounded
    struct ns1__RainbowTableStatus*      RainbowTableStatusElement      0;
};

/******************************************************************************\
 *                                                                            *
 * Services                                                                   *
 *                                                                            *
\******************************************************************************/


//gsoap ns1  service name:	DistrRTGenBinding 
//gsoap ns1  service type:	DistrRTGenPort 
//gsoap ns1  service port:	http://distributed.freerainbowtables.com/server.php 
//gsoap ns1  service namespace:	urn:DistrRTGen 
//gsoap ns1  service transport:	http://schemas.xmlsoap.org/soap/http 

/** @mainpage DistrRTGenService Definitions

@section DistrRTGenService_bindings Bindings
  - @ref DistrRTGenBinding

*/

/**

@page DistrRTGenBinding Binding "DistrRTGenBinding"

@section DistrRTGenBinding_operations Operations of Binding  "DistrRTGenBinding"
  - @ref ns1__RegisterNewClient
  - @ref ns1__RequestWork
  - @ref ns1__UploadCompletedWork
  - @ref ns1__RequestHashToIndex
  - @ref ns1__UploadHashIndexList
  - @ref ns1__RequestChainCheck
  - @ref ns1__SendChainCheckResult
  - @ref ns1__ReportError
  - @ref ns1__RequestDetailedCrackingInfo

@section DistrRTGenBinding_ports Endpoints of Binding  "DistrRTGenBinding"
  - http://distributed.freerainbowtables.com/server.php

Note: use wsdl2h option -N to change the service binding prefix name

*/

/******************************************************************************\
 *                                                                            *
 * DistrRTGenBinding                                                          *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * ns1__RegisterNewClient                                                     *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__RegisterNewClientResponse" of service binding "DistrRTGenBinding" operation "ns1__RegisterNewClient"
struct ns1__RegisterNewClientResponse
{
    int                                 ClientID;
    int                                 ErrorCode;
};

/// Operation "ns1__RegisterNewClient" of service binding "DistrRTGenBinding"

/**

Operation details:

  - SOAP RPC literal style
  - SOAP action="urn:RegisterNewClientAction"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__RegisterNewClient(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct ns1__MachineInfo*            MachineInfo,
    // response parameters:
    struct ns1__RegisterNewClientResponse*
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__RegisterNewClient(
    struct soap *soap,
    // request parameters:
    struct ns1__MachineInfo*            MachineInfo,
    // response parameters:
    struct ns1__RegisterNewClientResponse*
  );
@endcode

*/

//gsoap ns1  service method-style:	RegisterNewClient rpc
//gsoap ns1  service method-encoding:	RegisterNewClient literal
//gsoap ns1  service method-action:	RegisterNewClient urn:RegisterNewClientAction
int ns1__RegisterNewClient(
    struct ns1__MachineInfo*            MachineInfo,	///< Request parameter
    struct ns1__RegisterNewClientResponse*	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * ns1__RequestWork                                                           *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__RequestWorkResponse" of service binding "DistrRTGenBinding" operation "ns1__RequestWork"
struct ns1__RequestWorkResponse
{
    struct ns1__ArrayOfWorkUnit*        WorkUnit;
    char*                               CharsetMD5;
    struct ns1__rtgenDetails*           rtgencmd;
    int                                 ErrorCode;
};

/// Operation "ns1__RequestWork" of service binding "DistrRTGenBinding"

/**

Operation details:

  - SOAP RPC literal style
  - SOAP action="urn:RequestWorkAction"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__RequestWork(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct ns1__MachineInfo*            MachineInfo,
    int                                 NumPieces,
    // response parameters:
    struct ns1__RequestWorkResponse*
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__RequestWork(
    struct soap *soap,
    // request parameters:
    struct ns1__MachineInfo*            MachineInfo,
    int                                 NumPieces,
    // response parameters:
    struct ns1__RequestWorkResponse*
  );
@endcode

*/

//gsoap ns1  service method-style:	RequestWork rpc
//gsoap ns1  service method-encoding:	RequestWork literal
//gsoap ns1  service method-action:	RequestWork urn:RequestWorkAction
int ns1__RequestWork(
    struct ns1__MachineInfo*            MachineInfo,	///< Request parameter
    int                                 NumPieces,	///< Request parameter
    struct ns1__RequestWorkResponse    *	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * ns1__UploadCompletedWork                                                   *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__UploadCompletedWorkResponse" of service binding "DistrRTGenBinding" operation "ns1__UploadCompletedWork"
struct ns1__UploadCompletedWorkResponse
{
    int                                 ErrorCode;
};

/// Operation "ns1__UploadCompletedWork" of service binding "DistrRTGenBinding"

/**

Operation details:

  - SOAP RPC literal style
  - SOAP action="urn:UploadCompletedWorkAction"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__UploadCompletedWork(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    int                                 PartID,
    struct xsd__base64Binary            Data,
    // response parameters:
    struct ns1__UploadCompletedWorkResponse*
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__UploadCompletedWork(
    struct soap *soap,
    // request parameters:
    int                                 PartID,
    struct xsd__base64Binary            Data,
    // response parameters:
    struct ns1__UploadCompletedWorkResponse*
  );
@endcode

*/

//gsoap ns1  service method-style:	UploadCompletedWork rpc
//gsoap ns1  service method-encoding:	UploadCompletedWork literal
//gsoap ns1  service method-action:	UploadCompletedWork urn:UploadCompletedWorkAction
int ns1__UploadCompletedWork(
    int                                 PartID,	///< Request parameter
    struct xsd__base64Binary            Data,	///< Request parameter
    struct ns1__UploadCompletedWorkResponse*	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * ns1__RequestHashToIndex                                                    *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__RequestHashToIndexResponse" of service binding "DistrRTGenBinding" operation "ns1__RequestHashToIndex"
struct ns1__RequestHashToIndexResponse
{
    struct ns1__ArrayOfIndexHash*       IndexHash;
    int                                 ErrorCode;
};

/// Operation "ns1__RequestHashToIndex" of service binding "DistrRTGenBinding"

/**

Operation details:

  - SOAP RPC literal style
  - SOAP action="urn:RequestHashToIndexAction"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__RequestHashToIndex(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct ns1__MachineInfo*            MachineInfo,
    unsigned int                        NumHashes,
    unsigned int                        RecievePublicHashes,
    // response parameters:
    struct ns1__RequestHashToIndexResponse*
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__RequestHashToIndex(
    struct soap *soap,
    // request parameters:
    struct ns1__MachineInfo*            MachineInfo,
    unsigned int                        NumHashes,
    unsigned int                        RecievePublicHashes,
    // response parameters:
    struct ns1__RequestHashToIndexResponse*
  );
@endcode

*/

//gsoap ns1  service method-style:	RequestHashToIndex rpc
//gsoap ns1  service method-encoding:	RequestHashToIndex literal
//gsoap ns1  service method-action:	RequestHashToIndex urn:RequestHashToIndexAction
int ns1__RequestHashToIndex(
    struct ns1__MachineInfo*            MachineInfo,	///< Request parameter
    unsigned int                        NumHashes,	///< Request parameter
    unsigned int                        RecievePublicHashes,	///< Request parameter
    struct ns1__RequestHashToIndexResponse*	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * ns1__UploadHashIndexList                                                   *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__UploadHashIndexListResponse" of service binding "DistrRTGenBinding" operation "ns1__UploadHashIndexList"
struct ns1__UploadHashIndexListResponse
{
    int                                 ErrorCode;
};

/// Operation "ns1__UploadHashIndexList" of service binding "DistrRTGenBinding"

/**

Operation details:

  - SOAP RPC literal style
  - SOAP action="urn:UploadHashIndexListAction"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__UploadHashIndexList(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct ns1__MachineInfo*            MachineInfo,
    unsigned int                        RequestID,
    char*                               IndiceList,
    // response parameters:
    struct ns1__UploadHashIndexListResponse*
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__UploadHashIndexList(
    struct soap *soap,
    // request parameters:
    struct ns1__MachineInfo*            MachineInfo,
    unsigned int                        RequestID,
    char*                               IndiceList,
    // response parameters:
    struct ns1__UploadHashIndexListResponse*
  );
@endcode

*/

//gsoap ns1  service method-style:	UploadHashIndexList rpc
//gsoap ns1  service method-encoding:	UploadHashIndexList literal
//gsoap ns1  service method-action:	UploadHashIndexList urn:UploadHashIndexListAction
int ns1__UploadHashIndexList(
    struct ns1__MachineInfo*            MachineInfo,	///< Request parameter
    unsigned int                        RequestID,	///< Request parameter
    char*                               IndiceList,	///< Request parameter
    struct ns1__UploadHashIndexListResponse*	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * ns1__RequestChainCheck                                                     *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__RequestChainCheckResponse" of service binding "DistrRTGenBinding" operation "ns1__RequestChainCheck"
struct ns1__RequestChainCheckResponse
{
    struct ns1__ArrayOfChainCheckHash*  ChainCheckHashList;
    int                                 ErrorCode;
};

/// Operation "ns1__RequestChainCheck" of service binding "DistrRTGenBinding"

/**

Operation details:

  - SOAP RPC literal style
  - SOAP action="urn:RequestChainCheckAction"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__RequestChainCheck(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct ns1__MachineInfo*            MachineInfo,
    unsigned int                        NumHashes,
    unsigned int                        RecievePublicHashes,
    // response parameters:
    struct ns1__RequestChainCheckResponse*
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__RequestChainCheck(
    struct soap *soap,
    // request parameters:
    struct ns1__MachineInfo*            MachineInfo,
    unsigned int                        NumHashes,
    unsigned int                        RecievePublicHashes,
    // response parameters:
    struct ns1__RequestChainCheckResponse*
  );
@endcode

*/

//gsoap ns1  service method-style:	RequestChainCheck rpc
//gsoap ns1  service method-encoding:	RequestChainCheck literal
//gsoap ns1  service method-action:	RequestChainCheck urn:RequestChainCheckAction
int ns1__RequestChainCheck(
    struct ns1__MachineInfo*            MachineInfo,	///< Request parameter
    unsigned int                        NumHashes,	///< Request parameter
    unsigned int                        RecievePublicHashes,	///< Request parameter
    struct ns1__RequestChainCheckResponse*	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * ns1__SendChainCheckResult                                                  *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__SendChainCheckResultResponse" of service binding "DistrRTGenBinding" operation "ns1__SendChainCheckResult"
struct ns1__SendChainCheckResultResponse
{
    int                                 ErrorCode;
};

/// Operation "ns1__SendChainCheckResult" of service binding "DistrRTGenBinding"

/**

Operation details:

  - SOAP RPC literal style
  - SOAP action="urn:SendChainCheckResultAction"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__SendChainCheckResult(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct ns1__MachineInfo*            MachineInfo,
    unsigned int                        RequestID,
    char*                               Password,
    // response parameters:
    struct ns1__SendChainCheckResultResponse*
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__SendChainCheckResult(
    struct soap *soap,
    // request parameters:
    struct ns1__MachineInfo*            MachineInfo,
    unsigned int                        RequestID,
    char*                               Password,
    // response parameters:
    struct ns1__SendChainCheckResultResponse*
  );
@endcode

*/

//gsoap ns1  service method-style:	SendChainCheckResult rpc
//gsoap ns1  service method-encoding:	SendChainCheckResult literal
//gsoap ns1  service method-action:	SendChainCheckResult urn:SendChainCheckResultAction
int ns1__SendChainCheckResult(
    struct ns1__MachineInfo*            MachineInfo,	///< Request parameter
    unsigned int                        RequestID,	///< Request parameter
    char*                               Password,	///< Request parameter
    struct ns1__SendChainCheckResultResponse*	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * ns1__ReportError                                                           *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__ReportErrorResponse" of service binding "DistrRTGenBinding" operation "ns1__ReportError"
struct ns1__ReportErrorResponse
{
    int                                 ErrorCode;
};

/// Operation "ns1__ReportError" of service binding "DistrRTGenBinding"

/**

Operation details:

  - SOAP RPC literal style
  - SOAP action="urn:ReportErrorAction"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__ReportError(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct ns1__MachineInfo*            MachineInfo,
    char*                               ErrorString,
    // response parameters:
    struct ns1__ReportErrorResponse*
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__ReportError(
    struct soap *soap,
    // request parameters:
    struct ns1__MachineInfo*            MachineInfo,
    char*                               ErrorString,
    // response parameters:
    struct ns1__ReportErrorResponse*
  );
@endcode

*/

//gsoap ns1  service method-style:	ReportError rpc
//gsoap ns1  service method-encoding:	ReportError literal
//gsoap ns1  service method-action:	ReportError urn:ReportErrorAction
int ns1__ReportError(
    struct ns1__MachineInfo*            MachineInfo,	///< Request parameter
    char*                               ErrorString,	///< Request parameter
    struct ns1__ReportErrorResponse    *	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * ns1__RequestDetailedCrackingInfo                                           *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__RequestDetailedCrackingInfoResponse" of service binding "DistrRTGenBinding" operation "ns1__RequestDetailedCrackingInfo"
struct ns1__RequestDetailedCrackingInfoResponse
{
    struct ns1__ArrayOfRainbowTableStatus* HashStatus;
    int                                 ErrorCode;
};

/// Operation "ns1__RequestDetailedCrackingInfo" of service binding "DistrRTGenBinding"

/**

Operation details:

  - SOAP RPC literal style
  - SOAP action="urn:RequestDetailedCrackingInfoAction"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__RequestDetailedCrackingInfo(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    int                                 RequestID,
    // response parameters:
    struct ns1__RequestDetailedCrackingInfoResponse*
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__RequestDetailedCrackingInfo(
    struct soap *soap,
    // request parameters:
    int                                 RequestID,
    // response parameters:
    struct ns1__RequestDetailedCrackingInfoResponse*
  );
@endcode

*/

//gsoap ns1  service method-style:	RequestDetailedCrackingInfo rpc
//gsoap ns1  service method-encoding:	RequestDetailedCrackingInfo literal
//gsoap ns1  service method-action:	RequestDetailedCrackingInfo urn:RequestDetailedCrackingInfoAction
int ns1__RequestDetailedCrackingInfo(
    int                                 RequestID,	///< Request parameter
    struct ns1__RequestDetailedCrackingInfoResponse*	///< Response struct parameter
);

/* End of rcx.h */
